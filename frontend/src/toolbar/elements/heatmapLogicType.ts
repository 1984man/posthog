// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:10 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionStepType, FilterType } from '../../types'
import type { CountedHTMLElement, ElementsEventType } from '../types'

export interface heatmapLogicType extends Logic {
    actionCreators: {
        getEvents: () => {
            type: 'get events (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        enableHeatmap: () => {
            type: 'enable heatmap (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        disableHeatmap: () => {
            type: 'disable heatmap (toolbar.elements.heatmapLogic)'
            payload: {
                value: true
            }
        }
        setShowHeatmapTooltip: (showHeatmapTooltip: boolean) => {
            type: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
            payload: {
                showHeatmapTooltip: boolean
            }
        }
        setHeatmapFilter: (filter: Partial<FilterType>) => {
            type: 'set heatmap filter (toolbar.elements.heatmapLogic)'
            payload: {
                filter: Partial<FilterType>
            }
        }
        resetEvents: () => {
            type: 'reset events (toolbar.elements.heatmapLogic)'
            payload: any
        }
        resetEventsSuccess: (
            events: never[],
            payload?: any
        ) => {
            type: 'reset events success (toolbar.elements.heatmapLogic)'
            payload: {
                events: never[]
                payload?: any
            }
        }
        resetEventsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reset events failure (toolbar.elements.heatmapLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        getEventsSuccess: (
            events: any[],
            payload?: {
                value: true
            }
        ) => {
            type: 'get events success (toolbar.elements.heatmapLogic)'
            payload: {
                events: any[]
                payload?: {
                    value: true
                }
            }
        }
        getEventsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get events failure (toolbar.elements.heatmapLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'get events (toolbar.elements.heatmapLogic)': 'getEvents'
        'enable heatmap (toolbar.elements.heatmapLogic)': 'enableHeatmap'
        'disable heatmap (toolbar.elements.heatmapLogic)': 'disableHeatmap'
        'set show heatmap tooltip (toolbar.elements.heatmapLogic)': 'setShowHeatmapTooltip'
        'set heatmap filter (toolbar.elements.heatmapLogic)': 'setHeatmapFilter'
        'reset events (toolbar.elements.heatmapLogic)': 'resetEvents'
        'reset events success (toolbar.elements.heatmapLogic)': 'resetEventsSuccess'
        'reset events failure (toolbar.elements.heatmapLogic)': 'resetEventsFailure'
        'get events success (toolbar.elements.heatmapLogic)': 'getEventsSuccess'
        'get events failure (toolbar.elements.heatmapLogic)': 'getEventsFailure'
    }
    actionTypes: {
        getEvents: 'get events (toolbar.elements.heatmapLogic)'
        enableHeatmap: 'enable heatmap (toolbar.elements.heatmapLogic)'
        disableHeatmap: 'disable heatmap (toolbar.elements.heatmapLogic)'
        setShowHeatmapTooltip: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
        setHeatmapFilter: 'set heatmap filter (toolbar.elements.heatmapLogic)'
        resetEvents: 'reset events (toolbar.elements.heatmapLogic)'
        resetEventsSuccess: 'reset events success (toolbar.elements.heatmapLogic)'
        resetEventsFailure: 'reset events failure (toolbar.elements.heatmapLogic)'
        getEventsSuccess: 'get events success (toolbar.elements.heatmapLogic)'
        getEventsFailure: 'get events failure (toolbar.elements.heatmapLogic)'
    }
    actions: {
        getEvents: () => void
        enableHeatmap: () => void
        disableHeatmap: () => void
        setShowHeatmapTooltip: (showHeatmapTooltip: boolean) => void
        setHeatmapFilter: (filter: Partial<FilterType>) => void
        resetEvents: () => void
        resetEventsSuccess: (events: never[], payload?: any) => void
        resetEventsFailure: (error: string, errorObject?: any) => void
        getEventsSuccess: (
            events: any[],
            payload?: {
                value: true
            }
        ) => void
        getEventsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        heatmapFilter: Partial<FilterType>
        events: ElementsEventType[]
        eventsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        'set href (toolbar.stats.currentPageLogic)': ((
            action: {
                type: 'set href (toolbar.stats.currentPageLogic)'
                payload: {
                    href: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'set wildcard href (toolbar.stats.currentPageLogic)': ((
            action: {
                type: 'set wildcard href (toolbar.stats.currentPageLogic)'
                payload: {
                    href: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        enableHeatmap: ((
            action: {
                type: 'enable heatmap (toolbar.elements.heatmapLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        disableHeatmap: ((
            action: {
                type: 'disable heatmap (toolbar.elements.heatmapLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        getEventsSuccess: ((
            action: {
                type: 'get events success (toolbar.elements.heatmapLogic)'
                payload: {
                    events: any[]
                    payload?: {
                        value: true
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setShowHeatmapTooltip: ((
            action: {
                type: 'set show heatmap tooltip (toolbar.elements.heatmapLogic)'
                payload: {
                    showHeatmapTooltip: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setHeatmapFilter: ((
            action: {
                type: 'set heatmap filter (toolbar.elements.heatmapLogic)'
                payload: {
                    filter: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['toolbar', 'elements', 'heatmapLogic']
    pathString: 'toolbar.elements.heatmapLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        heatmapFilter: Partial<FilterType>
        events: ElementsEventType[]
        eventsLoading: boolean
    }
    reducers: {
        heatmapEnabled: (state: boolean, action: any, fullState: any) => boolean
        heatmapLoading: (state: boolean, action: any, fullState: any) => boolean
        showHeatmapTooltip: (state: boolean, action: any, fullState: any) => boolean
        heatmapFilter: (state: Partial<FilterType>, action: any, fullState: any) => Partial<FilterType>
        events: (state: ElementsEventType[], action: any, fullState: any) => ElementsEventType[]
        eventsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        heatmapFilter: Partial<FilterType>
        events: ElementsEventType[]
        eventsLoading: boolean
    }
    selectors: {
        heatmapEnabled: (state: any, props?: any) => boolean
        heatmapLoading: (state: any, props?: any) => boolean
        showHeatmapTooltip: (state: any, props?: any) => boolean
        heatmapFilter: (state: any, props?: any) => Partial<FilterType>
        events: (state: any, props?: any) => ElementsEventType[]
        eventsLoading: (state: any, props?: any) => boolean
        elements: (state: any, props?: any) => CountedHTMLElement[]
        countedElements: (
            state: any,
            props?: any
        ) => {
            position: number
            count: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
        }[]
        elementCount: (state: any, props?: any) => number
        clickCount: (state: any, props?: any) => number
        highestClickCount: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        heatmapEnabled: boolean
        heatmapLoading: boolean
        showHeatmapTooltip: boolean
        heatmapFilter: Partial<FilterType>
        events: ElementsEventType[]
        eventsLoading: boolean
        elements: CountedHTMLElement[]
        countedElements: {
            position: number
            count: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
        }[]
        elementCount: number
        clickCount: number
        highestClickCount: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        elements: (events: ElementsEventType[], dataAttributes: string[]) => CountedHTMLElement[]
        countedElements: (
            elements: CountedHTMLElement[],
            dataAttributes: string[]
        ) => {
            position: number
            count: number
            element: HTMLElement
            hash: string
            selector: string
            actionStep?: ActionStepType | undefined
        }[]
        elementCount: (
            countedElements: {
                position: number
                count: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ActionStepType
                    | undefined
            }[]
        ) => number
        clickCount: (
            countedElements: {
                position: number
                count: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ActionStepType
                    | undefined
            }[]
        ) => number
        highestClickCount: (
            countedElements: {
                position: number
                count: number
                element: HTMLElement
                hash: string
                selector: string
                actionStep?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ActionStepType
                    | undefined
            }[]
        ) => number
    }
    __keaTypeGenInternalReducerActions: {
        'set href (toolbar.stats.currentPageLogic)': (href: string) => {
            type: 'set href (toolbar.stats.currentPageLogic)'
            payload: {
                href: string
            }
        }
        'set wildcard href (toolbar.stats.currentPageLogic)': (href: string) => {
            type: 'set wildcard href (toolbar.stats.currentPageLogic)'
            payload: {
                href: string
            }
        }
    }
}
