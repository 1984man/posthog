// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CombinedFeatureFlagAndOverrideType, FeatureFlagOverrideType, FeatureFlagType } from '../../types'

export interface featureFlagsLogicType extends Logic {
    actionCreators: {
        getUserFlags: () => {
            type: 'get user flags (toolbar.flags.featureFlagsLogic)'
            payload: {
                value: true
            }
        }
        setOverriddenUserFlag: (
            flagId: number,
            overrideValue: string | boolean
        ) => {
            type: 'set overridden user flag (toolbar.flags.featureFlagsLogic)'
            payload: {
                flagId: number
                overrideValue: string | boolean
            }
        }
        deleteOverriddenUserFlag: (overrideId: number) => {
            type: 'delete overridden user flag (toolbar.flags.featureFlagsLogic)'
            payload: {
                overrideId: number
            }
        }
        setShowLocalFeatureFlagWarning: (showWarning: boolean) => {
            type: 'set show local feature flag warning (toolbar.flags.featureFlagsLogic)'
            payload: {
                showWarning: boolean
            }
        }
        setSearchTerm: (searchTerm: string) => {
            type: 'set search term (toolbar.flags.featureFlagsLogic)'
            payload: {
                searchTerm: string
            }
        }
        getUserFlagsSuccess: (
            userFlags: CombinedFeatureFlagAndOverrideType[],
            payload?: {
                value: true
            }
        ) => {
            type: 'get user flags success (toolbar.flags.featureFlagsLogic)'
            payload: {
                userFlags: CombinedFeatureFlagAndOverrideType[]
                payload?: {
                    value: true
                }
            }
        }
        getUserFlagsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'get user flags failure (toolbar.flags.featureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setOverriddenUserFlagSuccess: (
            userFlags: {
                override: any
                feature_flag: FeatureFlagType
                value_for_user_without_override: string | boolean
            }[],
            payload?: {
                flagId: number
                overrideValue: string | boolean
            }
        ) => {
            type: 'set overridden user flag success (toolbar.flags.featureFlagsLogic)'
            payload: {
                userFlags: {
                    override: any
                    feature_flag: FeatureFlagType
                    value_for_user_without_override: string | boolean
                }[]
                payload?: {
                    flagId: number
                    overrideValue: string | boolean
                }
            }
        }
        setOverriddenUserFlagFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set overridden user flag failure (toolbar.flags.featureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteOverriddenUserFlagSuccess: (
            userFlags: CombinedFeatureFlagAndOverrideType[],
            payload?: {
                overrideId: number
            }
        ) => {
            type: 'delete overridden user flag success (toolbar.flags.featureFlagsLogic)'
            payload: {
                userFlags: CombinedFeatureFlagAndOverrideType[]
                payload?: {
                    overrideId: number
                }
            }
        }
        deleteOverriddenUserFlagFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete overridden user flag failure (toolbar.flags.featureFlagsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'get user flags (toolbar.flags.featureFlagsLogic)': 'getUserFlags'
        'set overridden user flag (toolbar.flags.featureFlagsLogic)': 'setOverriddenUserFlag'
        'delete overridden user flag (toolbar.flags.featureFlagsLogic)': 'deleteOverriddenUserFlag'
        'set show local feature flag warning (toolbar.flags.featureFlagsLogic)': 'setShowLocalFeatureFlagWarning'
        'set search term (toolbar.flags.featureFlagsLogic)': 'setSearchTerm'
        'get user flags success (toolbar.flags.featureFlagsLogic)': 'getUserFlagsSuccess'
        'get user flags failure (toolbar.flags.featureFlagsLogic)': 'getUserFlagsFailure'
        'set overridden user flag success (toolbar.flags.featureFlagsLogic)': 'setOverriddenUserFlagSuccess'
        'set overridden user flag failure (toolbar.flags.featureFlagsLogic)': 'setOverriddenUserFlagFailure'
        'delete overridden user flag success (toolbar.flags.featureFlagsLogic)': 'deleteOverriddenUserFlagSuccess'
        'delete overridden user flag failure (toolbar.flags.featureFlagsLogic)': 'deleteOverriddenUserFlagFailure'
    }
    actionTypes: {
        getUserFlags: 'get user flags (toolbar.flags.featureFlagsLogic)'
        setOverriddenUserFlag: 'set overridden user flag (toolbar.flags.featureFlagsLogic)'
        deleteOverriddenUserFlag: 'delete overridden user flag (toolbar.flags.featureFlagsLogic)'
        setShowLocalFeatureFlagWarning: 'set show local feature flag warning (toolbar.flags.featureFlagsLogic)'
        setSearchTerm: 'set search term (toolbar.flags.featureFlagsLogic)'
        getUserFlagsSuccess: 'get user flags success (toolbar.flags.featureFlagsLogic)'
        getUserFlagsFailure: 'get user flags failure (toolbar.flags.featureFlagsLogic)'
        setOverriddenUserFlagSuccess: 'set overridden user flag success (toolbar.flags.featureFlagsLogic)'
        setOverriddenUserFlagFailure: 'set overridden user flag failure (toolbar.flags.featureFlagsLogic)'
        deleteOverriddenUserFlagSuccess: 'delete overridden user flag success (toolbar.flags.featureFlagsLogic)'
        deleteOverriddenUserFlagFailure: 'delete overridden user flag failure (toolbar.flags.featureFlagsLogic)'
    }
    actions: {
        getUserFlags: () => void
        setOverriddenUserFlag: (flagId: number, overrideValue: string | boolean) => void
        deleteOverriddenUserFlag: (overrideId: number) => void
        setShowLocalFeatureFlagWarning: (showWarning: boolean) => void
        setSearchTerm: (searchTerm: string) => void
        getUserFlagsSuccess: (
            userFlags: CombinedFeatureFlagAndOverrideType[],
            payload?: {
                value: true
            }
        ) => void
        getUserFlagsFailure: (error: string, errorObject?: any) => void
        setOverriddenUserFlagSuccess: (
            userFlags: {
                override: any
                feature_flag: FeatureFlagType
                value_for_user_without_override: string | boolean
            }[],
            payload?: {
                flagId: number
                overrideValue: string | boolean
            }
        ) => void
        setOverriddenUserFlagFailure: (error: string, errorObject?: any) => void
        deleteOverriddenUserFlagSuccess: (
            userFlags: CombinedFeatureFlagAndOverrideType[],
            payload?: {
                overrideId: number
            }
        ) => void
        deleteOverriddenUserFlagFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        userFlags: CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: boolean
        searchTerm: string
        showLocalFeatureFlagWarning: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['toolbar', 'flags', 'featureFlagsLogic']
    pathString: 'toolbar.flags.featureFlagsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        userFlags: CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: boolean
        searchTerm: string
        showLocalFeatureFlagWarning: boolean
    }
    reducers: {
        userFlags: (
            state: CombinedFeatureFlagAndOverrideType[],
            action: any,
            fullState: any
        ) => CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: (state: boolean, action: any, fullState: any) => boolean
        searchTerm: (state: string, action: any, fullState: any) => string
        showLocalFeatureFlagWarning: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        userFlags: CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: boolean
        searchTerm: string
        showLocalFeatureFlagWarning: boolean
    }
    selectors: {
        userFlags: (state: any, props?: any) => CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: (state: any, props?: any) => boolean
        searchTerm: (state: any, props?: any) => string
        showLocalFeatureFlagWarning: (state: any, props?: any) => boolean
        userFlagsWithCalculatedInfo: (
            state: any,
            props?: any
        ) => {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        filteredFlags: (
            state: any,
            props?: any
        ) => {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        countFlagsOverridden: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        userFlags: CombinedFeatureFlagAndOverrideType[]
        userFlagsLoading: boolean
        searchTerm: string
        showLocalFeatureFlagWarning: boolean
        userFlagsWithCalculatedInfo: {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        filteredFlags: {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        countFlagsOverridden: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        userFlagsWithCalculatedInfo: (
            userFlags: CombinedFeatureFlagAndOverrideType[]
        ) => {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        filteredFlags: (
            searchTerm: string,
            userFlagsWithCalculatedInfo: {
                hasVariants: boolean
                currentValue: string | boolean
                feature_flag: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FeatureFlagType
                value_for_user_without_override: string | boolean
                override:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FeatureFlagOverrideType
                    | null
            }[]
        ) => {
            hasVariants: boolean
            currentValue: string | boolean
            feature_flag: FeatureFlagType
            value_for_user_without_override: string | boolean
            override: FeatureFlagOverrideType | null
        }[]
        countFlagsOverridden: (userFlags: CombinedFeatureFlagAndOverrideType[]) => number
    }
}
