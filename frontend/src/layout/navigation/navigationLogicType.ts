// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SceneConfig } from '../../scenes/sceneTypes'
import type { OrganizationMemberType } from '../../types'
import type { WarningType } from './navigationLogic'

export interface navigationLogicType extends Logic {
    actionCreators: {
        toggleSideBarBase: () => {
            type: 'toggle side bar base (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        toggleSideBarMobile: () => {
            type: 'toggle side bar mobile (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        hideSideBarMobile: () => {
            type: 'hide side bar mobile (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        openSitePopover: () => {
            type: 'open site popover (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        closeSitePopover: () => {
            type: 'close site popover (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        toggleSitePopover: () => {
            type: 'toggle site popover (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        showCreateOrganizationModal: () => {
            type: 'show create organization modal (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        hideCreateOrganizationModal: () => {
            type: 'hide create organization modal (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        showCreateProjectModal: () => {
            type: 'show create project modal (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        hideCreateProjectModal: () => {
            type: 'hide create project modal (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        toggleProjectSwitcher: () => {
            type: 'toggle project switcher (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        hideProjectSwitcher: () => {
            type: 'hide project switcher (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        openAppSourceEditor: (
            id: number,
            pluginId: number
        ) => {
            type: 'open app source editor (layout.navigation.navigationLogic)'
            payload: {
                id: number
                pluginId: number
            }
        }
        closeAppSourceEditor: () => {
            type: 'close app source editor (layout.navigation.navigationLogic)'
            payload: {
                value: true
            }
        }
        setOpenAppMenu: (id: number | null) => {
            type: 'set open app menu (layout.navigation.navigationLogic)'
            payload: {
                id: number | null
            }
        }
        loadLatestVersion: () => {
            type: 'load latest version (layout.navigation.navigationLogic)'
            payload: any
        }
        loadLatestVersionSuccess: (
            latestVersion: string | null,
            payload?: any
        ) => {
            type: 'load latest version success (layout.navigation.navigationLogic)'
            payload: {
                latestVersion: string | null
                payload?: any
            }
        }
        loadLatestVersionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load latest version failure (layout.navigation.navigationLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'toggle side bar base (layout.navigation.navigationLogic)': 'toggleSideBarBase'
        'toggle side bar mobile (layout.navigation.navigationLogic)': 'toggleSideBarMobile'
        'hide side bar mobile (layout.navigation.navigationLogic)': 'hideSideBarMobile'
        'open site popover (layout.navigation.navigationLogic)': 'openSitePopover'
        'close site popover (layout.navigation.navigationLogic)': 'closeSitePopover'
        'toggle site popover (layout.navigation.navigationLogic)': 'toggleSitePopover'
        'show create organization modal (layout.navigation.navigationLogic)': 'showCreateOrganizationModal'
        'hide create organization modal (layout.navigation.navigationLogic)': 'hideCreateOrganizationModal'
        'show create project modal (layout.navigation.navigationLogic)': 'showCreateProjectModal'
        'hide create project modal (layout.navigation.navigationLogic)': 'hideCreateProjectModal'
        'toggle project switcher (layout.navigation.navigationLogic)': 'toggleProjectSwitcher'
        'hide project switcher (layout.navigation.navigationLogic)': 'hideProjectSwitcher'
        'open app source editor (layout.navigation.navigationLogic)': 'openAppSourceEditor'
        'close app source editor (layout.navigation.navigationLogic)': 'closeAppSourceEditor'
        'set open app menu (layout.navigation.navigationLogic)': 'setOpenAppMenu'
        'load latest version (layout.navigation.navigationLogic)': 'loadLatestVersion'
        'load latest version success (layout.navigation.navigationLogic)': 'loadLatestVersionSuccess'
        'load latest version failure (layout.navigation.navigationLogic)': 'loadLatestVersionFailure'
    }
    actionTypes: {
        toggleSideBarBase: 'toggle side bar base (layout.navigation.navigationLogic)'
        toggleSideBarMobile: 'toggle side bar mobile (layout.navigation.navigationLogic)'
        hideSideBarMobile: 'hide side bar mobile (layout.navigation.navigationLogic)'
        openSitePopover: 'open site popover (layout.navigation.navigationLogic)'
        closeSitePopover: 'close site popover (layout.navigation.navigationLogic)'
        toggleSitePopover: 'toggle site popover (layout.navigation.navigationLogic)'
        showCreateOrganizationModal: 'show create organization modal (layout.navigation.navigationLogic)'
        hideCreateOrganizationModal: 'hide create organization modal (layout.navigation.navigationLogic)'
        showCreateProjectModal: 'show create project modal (layout.navigation.navigationLogic)'
        hideCreateProjectModal: 'hide create project modal (layout.navigation.navigationLogic)'
        toggleProjectSwitcher: 'toggle project switcher (layout.navigation.navigationLogic)'
        hideProjectSwitcher: 'hide project switcher (layout.navigation.navigationLogic)'
        openAppSourceEditor: 'open app source editor (layout.navigation.navigationLogic)'
        closeAppSourceEditor: 'close app source editor (layout.navigation.navigationLogic)'
        setOpenAppMenu: 'set open app menu (layout.navigation.navigationLogic)'
        loadLatestVersion: 'load latest version (layout.navigation.navigationLogic)'
        loadLatestVersionSuccess: 'load latest version success (layout.navigation.navigationLogic)'
        loadLatestVersionFailure: 'load latest version failure (layout.navigation.navigationLogic)'
    }
    actions: {
        toggleSideBarBase: () => void
        toggleSideBarMobile: () => void
        hideSideBarMobile: () => void
        openSitePopover: () => void
        closeSitePopover: () => void
        toggleSitePopover: () => void
        showCreateOrganizationModal: () => void
        hideCreateOrganizationModal: () => void
        showCreateProjectModal: () => void
        hideCreateProjectModal: () => void
        toggleProjectSwitcher: () => void
        hideProjectSwitcher: () => void
        openAppSourceEditor: (id: number, pluginId: number) => void
        closeAppSourceEditor: () => void
        setOpenAppMenu: (id: number | null) => void
        loadLatestVersion: () => void
        loadLatestVersionSuccess: (latestVersion: string | null, payload?: any) => void
        loadLatestVersionFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        isSideBarShownBase: boolean
        isSideBarShownMobile: boolean
        isSitePopoverOpen: boolean
        isCreateOrganizationModalShown: boolean
        isCreateProjectModalShown: boolean
        isProjectSwitcherShown: boolean
        appSourceEditor: null | {
            pluginId: number
            id: number
        }
        openAppMenu: null | number
        fullscreen: boolean
        mobileLayout: boolean
        latestVersion: string | null
        latestVersionLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['layout', 'navigation', 'navigationLogic']
    pathString: 'layout.navigation.navigationLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isSideBarShownBase: boolean
        isSideBarShownMobile: boolean
        isSitePopoverOpen: boolean
        isCreateOrganizationModalShown: boolean
        isCreateProjectModalShown: boolean
        isProjectSwitcherShown: boolean
        appSourceEditor: null | {
            pluginId: number
            id: number
        }
        openAppMenu: null | number
        fullscreen: boolean
        mobileLayout: boolean
        latestVersion: string | null
        latestVersionLoading: boolean
    }
    reducers: {
        isSideBarShownBase: (state: boolean, action: any, fullState: any) => boolean
        isSideBarShownMobile: (state: boolean, action: any, fullState: any) => boolean
        isSitePopoverOpen: (state: boolean, action: any, fullState: any) => boolean
        isCreateOrganizationModalShown: (state: boolean, action: any, fullState: any) => boolean
        isCreateProjectModalShown: (state: boolean, action: any, fullState: any) => boolean
        isProjectSwitcherShown: (state: boolean, action: any, fullState: any) => boolean
        appSourceEditor: (
            state: null | {
                pluginId: number
                id: number
            },
            action: any,
            fullState: any
        ) => null | {
            pluginId: number
            id: number
        }
        openAppMenu: (state: null | number, action: any, fullState: any) => null | number
        fullscreen: (state: boolean, action: any, fullState: any) => boolean
        mobileLayout: (state: boolean, action: any, fullState: any) => boolean
        latestVersion: (state: string | null, action: any, fullState: any) => string | null
        latestVersionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        isSideBarShownBase: boolean
        isSideBarShownMobile: boolean
        isSitePopoverOpen: boolean
        isCreateOrganizationModalShown: boolean
        isCreateProjectModalShown: boolean
        isProjectSwitcherShown: boolean
        appSourceEditor: null | {
            pluginId: number
            id: number
        }
        openAppMenu: null | number
        fullscreen: boolean
        mobileLayout: boolean
        latestVersion: string | null
        latestVersionLoading: boolean
    }
    selectors: {
        isSideBarShownBase: (state: any, props?: any) => boolean
        isSideBarShownMobile: (state: any, props?: any) => boolean
        isSitePopoverOpen: (state: any, props?: any) => boolean
        isCreateOrganizationModalShown: (state: any, props?: any) => boolean
        isCreateProjectModalShown: (state: any, props?: any) => boolean
        isProjectSwitcherShown: (state: any, props?: any) => boolean
        appSourceEditor: (
            state: any,
            props?: any
        ) => null | {
            pluginId: number
            id: number
        }
        openAppMenu: (state: any, props?: any) => null | number
        fullscreen: (state: any, props?: any) => boolean
        mobileLayout: (state: any, props?: any) => boolean
        latestVersion: (state: any, props?: any) => string | null
        latestVersionLoading: (state: any, props?: any) => boolean
        sceneConfig: (state: any, props?: any) => SceneConfig | null
        members: (state: any, props?: any) => OrganizationMemberType[]
        membersLoading: (state: any, props?: any) => boolean
        bareNav: (state: any, props?: any) => boolean | undefined
        isSideBarShown: (state: any, props?: any) => boolean
        systemStatus: (state: any, props?: any) => boolean
        asyncMigrationsOk: (state: any, props?: any) => string | number | true
        updateAvailable: (state: any, props?: any) => boolean | '' | null
        demoWarning: (state: any, props?: any) => WarningType
    }
    sharedListeners: {}
    values: {
        isSideBarShownBase: boolean
        isSideBarShownMobile: boolean
        isSitePopoverOpen: boolean
        isCreateOrganizationModalShown: boolean
        isCreateProjectModalShown: boolean
        isProjectSwitcherShown: boolean
        appSourceEditor: null | {
            pluginId: number
            id: number
        }
        openAppMenu: null | number
        fullscreen: boolean
        mobileLayout: boolean
        latestVersion: string | null
        latestVersionLoading: boolean
        sceneConfig: SceneConfig | null
        members: OrganizationMemberType[]
        membersLoading: boolean
        bareNav: boolean | undefined
        isSideBarShown: boolean
        systemStatus: boolean
        asyncMigrationsOk: string | number | true
        updateAvailable: boolean | '' | null
        demoWarning: WarningType
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        bareNav: (
            fullscreen: boolean,
            sceneConfig:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/scenes/sceneTypes').SceneConfig
                | null
        ) => boolean | undefined
        isSideBarShown: (
            mobileLayout: boolean,
            isSideBarShownBase: boolean,
            isSideBarShownMobile: boolean,
            bareNav: boolean | undefined
        ) => boolean
        systemStatus: (
            overview: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SystemStatusRow[],
            systemStatusLoading: boolean,
            siteUrlMisconfigured: boolean
        ) => boolean
        asyncMigrationsOk: (
            overview: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SystemStatusRow[],
            systemStatusLoading: boolean
        ) => string | number | true
        updateAvailable: (
            latestVersion: string | null,
            latestVersionLoading: boolean,
            preflight: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PreflightStatus | null
        ) => boolean | '' | null
        demoWarning: (
            currentOrganization:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').OrganizationType
                | null,
            currentTeam: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').TeamType | null,
            preflight: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PreflightStatus | null,
            members: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').OrganizationMemberType[],
            membersLoading: boolean,
            featureFlags: import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet
        ) => WarningType
    }
}
