// Generated by kea-typegen on Thu, 09 Jun 2022 19:49:54 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonProperty } from '../types'

export interface personPropertiesModelType extends Logic {
    actionCreators: {
        loadPersonProperties: () => {
            type: 'load person properties (models.personPropertiesModel)'
            payload: any
        }
        loadPersonPropertiesSuccess: (
            personProperties: Array<PersonProperty>,
            payload?: any
        ) => {
            type: 'load person properties success (models.personPropertiesModel)'
            payload: {
                personProperties: Array<PersonProperty>
                payload?: any
            }
        }
        loadPersonPropertiesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load person properties failure (models.personPropertiesModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load person properties (models.personPropertiesModel)': 'loadPersonProperties'
        'load person properties success (models.personPropertiesModel)': 'loadPersonPropertiesSuccess'
        'load person properties failure (models.personPropertiesModel)': 'loadPersonPropertiesFailure'
    }
    actionTypes: {
        loadPersonProperties: 'load person properties (models.personPropertiesModel)'
        loadPersonPropertiesSuccess: 'load person properties success (models.personPropertiesModel)'
        loadPersonPropertiesFailure: 'load person properties failure (models.personPropertiesModel)'
    }
    actions: {
        loadPersonProperties: () => void
        loadPersonPropertiesSuccess: (personProperties: Array<PersonProperty>, payload?: any) => void
        loadPersonPropertiesFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        personProperties: Array<PersonProperty>
        personPropertiesLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['models', 'personPropertiesModel']
    pathString: 'models.personPropertiesModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        personProperties: Array<PersonProperty>
        personPropertiesLoading: boolean
    }
    reducers: {
        personProperties: (state: Array<PersonProperty>, action: any, fullState: any) => Array<PersonProperty>
        personPropertiesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        personProperties: Array<PersonProperty>
        personPropertiesLoading: boolean
    }
    selectors: {
        personProperties: (state: any, props?: any) => Array<PersonProperty>
        personPropertiesLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        personProperties: Array<PersonProperty>
        personPropertiesLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
