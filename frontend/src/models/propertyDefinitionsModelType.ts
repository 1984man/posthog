// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PropertyDefinition } from '../types'
import type { FormatForDisplayFunction, PropertyDefinitionStorage, PropertySelectOption } from './propertyDefinitionsModel'

export interface propertyDefinitionsModelType extends Logic {
    actionCreators: {
        loadPropertyDefinitions: (initial?: any) => {
            type: 'load property definitions (models.propertyDefinitionsModel)'
            payload: {
                initial: any
            }
        }
        updatePropertyDefinition: (property: PropertyDefinition) => {
            type: 'update property definition (models.propertyDefinitionsModel)'
            payload: {
                property: PropertyDefinition
            }
        }
        loadPropertyDefinitionsSuccess: (
            propertyStorage: { count: any; results: any[]; next: any },
            payload?: {
                initial: any
            }
        ) => {
            type: 'load property definitions success (models.propertyDefinitionsModel)'
            payload: {
                propertyStorage: { count: any; results: any[]; next: any }
                payload?: {
                    initial: any
                }
            }
        }
        loadPropertyDefinitionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load property definitions failure (models.propertyDefinitionsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load property definitions (models.propertyDefinitionsModel)': 'loadPropertyDefinitions'
        'update property definition (models.propertyDefinitionsModel)': 'updatePropertyDefinition'
        'load property definitions success (models.propertyDefinitionsModel)': 'loadPropertyDefinitionsSuccess'
        'load property definitions failure (models.propertyDefinitionsModel)': 'loadPropertyDefinitionsFailure'
    }
    actionTypes: {
        loadPropertyDefinitions: 'load property definitions (models.propertyDefinitionsModel)'
        updatePropertyDefinition: 'update property definition (models.propertyDefinitionsModel)'
        loadPropertyDefinitionsSuccess: 'load property definitions success (models.propertyDefinitionsModel)'
        loadPropertyDefinitionsFailure: 'load property definitions failure (models.propertyDefinitionsModel)'
    }
    actions: {
        loadPropertyDefinitions: (initial?: any) => void
        updatePropertyDefinition: (property: PropertyDefinition) => void
        loadPropertyDefinitionsSuccess: (
            propertyStorage: { count: any; results: any[]; next: any },
            payload?: {
                initial: any
            }
        ) => void
        loadPropertyDefinitionsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        propertyStorage: PropertyDefinitionStorage
        propertyStorageLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        loadPropertyDefinitionsSuccess: ((
            action: {
                type: 'load property definitions success (models.propertyDefinitionsModel)'
                payload: {
                    propertyStorage: { count: any; results: any[]; next: any }
                    payload?: {
                        initial: any
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'propertyDefinitionsModel']
    pathString: 'models.propertyDefinitionsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        propertyStorage: PropertyDefinitionStorage
        propertyStorageLoading: boolean
    }
    reducers: {
        propertyStorage: (state: PropertyDefinitionStorage, action: any, fullState: any) => PropertyDefinitionStorage
        propertyStorageLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        propertyStorage: PropertyDefinitionStorage
        propertyStorageLoading: boolean
    }
    selectors: {
        propertyStorage: (state: any, props?: any) => PropertyDefinitionStorage
        propertyStorageLoading: (state: any, props?: any) => boolean
        loaded: (state: any, props?: any) => boolean
        propertyDefinitions: (state: any, props?: any) => PropertyDefinition[]
        transformedPropertyDefinitions: (state: any, props?: any) => PropertySelectOption[]
        propertyNames: (state: any, props?: any) => string[]
        numericalPropertyNames: (state: any, props?: any) => PropertySelectOption[]
        describeProperty: (state: any, props?: any) => (s: string) => string | null
        formatForDisplay: (state: any, props?: any) => FormatForDisplayFunction
    }
    sharedListeners: {}
    values: {
        propertyStorage: PropertyDefinitionStorage
        propertyStorageLoading: boolean
        loaded: boolean
        propertyDefinitions: PropertyDefinition[]
        transformedPropertyDefinitions: PropertySelectOption[]
        propertyNames: string[]
        numericalPropertyNames: PropertySelectOption[]
        describeProperty: (s: string) => string | null
        formatForDisplay: FormatForDisplayFunction
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        loaded: (propertyStorage: PropertyDefinitionStorage, propertyStorageLoading: boolean) => boolean
        propertyDefinitions: (propertyStorage: PropertyDefinitionStorage) => PropertyDefinition[]
        transformedPropertyDefinitions: (propertyDefinitions: PropertyDefinition[]) => PropertySelectOption[]
        propertyNames: (propertyDefinitions: PropertyDefinition[]) => string[]
        numericalPropertyNames: (transformedPropertyDefinitions: PropertySelectOption[]) => PropertySelectOption[]
        describeProperty: (propertyDefinitions: PropertyDefinition[]) => (s: string) => string | null
        formatForDisplay: (propertyDefinitions: PropertyDefinition[]) => FormatForDisplayFunction
    }
}
