// Generated by kea-typegen on Thu, 09 Jun 2022 19:49:55 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InsightModel } from '../types'

export interface insightsModelType extends Logic {
    actionCreators: {
        renameInsight: (item: InsightModel) => {
            type: 'rename insight (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
        renameInsightSuccess: (item: InsightModel) => {
            type: 'rename insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
        duplicateInsight: (
            item: InsightModel,
            dashboardId?: number,
            move?: boolean
        ) => {
            type: 'duplicate insight (models.insightsModel)'
            payload: {
                item: InsightModel
                dashboardId: number | undefined
                move: boolean
            }
        }
        moveToDashboard: (
            item: InsightModel,
            fromDashboard: number,
            toDashboard: number,
            toDashboardName: string
        ) => {
            type: 'move to dashboard (models.insightsModel)'
            payload: {
                item: InsightModel
                fromDashboard: number
                toDashboard: number
                toDashboardName: string
            }
        }
        duplicateInsightSuccess: (item: InsightModel) => {
            type: 'duplicate insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
    }
    actionKeys: {
        'rename insight (models.insightsModel)': 'renameInsight'
        'rename insight success (models.insightsModel)': 'renameInsightSuccess'
        'duplicate insight (models.insightsModel)': 'duplicateInsight'
        'move to dashboard (models.insightsModel)': 'moveToDashboard'
        'duplicate insight success (models.insightsModel)': 'duplicateInsightSuccess'
    }
    actionTypes: {
        renameInsight: 'rename insight (models.insightsModel)'
        renameInsightSuccess: 'rename insight success (models.insightsModel)'
        duplicateInsight: 'duplicate insight (models.insightsModel)'
        moveToDashboard: 'move to dashboard (models.insightsModel)'
        duplicateInsightSuccess: 'duplicate insight success (models.insightsModel)'
    }
    actions: {
        renameInsight: (item: InsightModel) => void
        renameInsightSuccess: (item: InsightModel) => void
        duplicateInsight: (item: InsightModel, dashboardId?: number, move?: boolean) => void
        moveToDashboard: (
            item: InsightModel,
            fromDashboard: number,
            toDashboard: number,
            toDashboardName: string
        ) => void
        duplicateInsightSuccess: (item: InsightModel) => void
    }
    defaults: {}
    events: {}
    key: undefined
    listeners: {
        renameInsight: ((
            action: {
                type: 'rename insight (models.insightsModel)'
                payload: {
                    item: InsightModel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        moveToDashboard: ((
            action: {
                type: 'move to dashboard (models.insightsModel)'
                payload: {
                    item: InsightModel
                    fromDashboard: number
                    toDashboard: number
                    toDashboardName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateInsight: ((
            action: {
                type: 'duplicate insight (models.insightsModel)'
                payload: {
                    item: InsightModel
                    dashboardId: number | undefined
                    move: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'insightsModel']
    pathString: 'models.insightsModel'
    props: Record<string, unknown>
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {}
    sharedListeners: {}
    values: {}
    _isKea: true
    _isKeaWithKey: false
}
