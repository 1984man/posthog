// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Dayjs } from '../lib/dayjs'
import type { AnnotationType, UserType } from '../types'

export interface annotationsModelType extends Logic {
    actionCreators: {
        createGlobalAnnotation: (
            content: string,
            date_marker: string,
            insightNumericId?: number
        ) => {
            type: 'create global annotation (models.annotationsModel)'
            payload: {
                content: string
                date_marker: string
                created_at: Dayjs
                created_by: UserType | null
                insightNumericId: number | undefined
            }
        }
        deleteGlobalAnnotation: (id: any) => {
            type: 'delete global annotation (models.annotationsModel)'
            payload: {
                id: any
            }
        }
        loadGlobalAnnotations: () => {
            type: 'load global annotations (models.annotationsModel)'
            payload: any
        }
        loadGlobalAnnotationsSuccess: (
            globalAnnotations: AnnotationType[],
            payload?: any
        ) => {
            type: 'load global annotations success (models.annotationsModel)'
            payload: {
                globalAnnotations: AnnotationType[]
                payload?: any
            }
        }
        loadGlobalAnnotationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load global annotations failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createGlobalAnnotationSuccess: (
            globalAnnotations: AnnotationType[],
            payload?: {
                content: string
                date_marker: string
                created_at: Dayjs
                created_by: UserType | null
                insightNumericId: number | undefined
            }
        ) => {
            type: 'create global annotation success (models.annotationsModel)'
            payload: {
                globalAnnotations: AnnotationType[]
                payload?: {
                    content: string
                    date_marker: string
                    created_at: Dayjs
                    created_by: UserType | null
                    insightNumericId: number | undefined
                }
            }
        }
        createGlobalAnnotationFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create global annotation failure (models.annotationsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'create global annotation (models.annotationsModel)': 'createGlobalAnnotation'
        'delete global annotation (models.annotationsModel)': 'deleteGlobalAnnotation'
        'load global annotations (models.annotationsModel)': 'loadGlobalAnnotations'
        'load global annotations success (models.annotationsModel)': 'loadGlobalAnnotationsSuccess'
        'load global annotations failure (models.annotationsModel)': 'loadGlobalAnnotationsFailure'
        'create global annotation success (models.annotationsModel)': 'createGlobalAnnotationSuccess'
        'create global annotation failure (models.annotationsModel)': 'createGlobalAnnotationFailure'
    }
    actionTypes: {
        createGlobalAnnotation: 'create global annotation (models.annotationsModel)'
        deleteGlobalAnnotation: 'delete global annotation (models.annotationsModel)'
        loadGlobalAnnotations: 'load global annotations (models.annotationsModel)'
        loadGlobalAnnotationsSuccess: 'load global annotations success (models.annotationsModel)'
        loadGlobalAnnotationsFailure: 'load global annotations failure (models.annotationsModel)'
        createGlobalAnnotationSuccess: 'create global annotation success (models.annotationsModel)'
        createGlobalAnnotationFailure: 'create global annotation failure (models.annotationsModel)'
    }
    actions: {
        createGlobalAnnotation: (content: string, date_marker: string, insightNumericId?: number) => void
        deleteGlobalAnnotation: (id: any) => void
        loadGlobalAnnotations: () => void
        loadGlobalAnnotationsSuccess: (globalAnnotations: AnnotationType[], payload?: any) => void
        loadGlobalAnnotationsFailure: (error: string, errorObject?: any) => void
        createGlobalAnnotationSuccess: (
            globalAnnotations: AnnotationType[],
            payload?: {
                content: string
                date_marker: string
                created_at: Dayjs
                created_by: UserType | null
                insightNumericId: number | undefined
            }
        ) => void
        createGlobalAnnotationFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        globalAnnotations: AnnotationType[]
        globalAnnotationsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        deleteGlobalAnnotation: ((
            action: {
                type: 'delete global annotation (models.annotationsModel)'
                payload: {
                    id: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'annotationsModel']
    pathString: 'models.annotationsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        globalAnnotations: AnnotationType[]
        globalAnnotationsLoading: boolean
    }
    reducers: {
        globalAnnotations: (state: AnnotationType[], action: any, fullState: any) => AnnotationType[]
        globalAnnotationsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        globalAnnotations: AnnotationType[]
        globalAnnotationsLoading: boolean
    }
    selectors: {
        globalAnnotations: (state: any, props?: any) => AnnotationType[]
        globalAnnotationsLoading: (state: any, props?: any) => boolean
        activeGlobalAnnotations: (state: any, props?: any) => AnnotationType[]
    }
    sharedListeners: {}
    values: {
        globalAnnotations: AnnotationType[]
        globalAnnotationsLoading: boolean
        activeGlobalAnnotations: AnnotationType[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        activeGlobalAnnotations: (globalAnnotations: AnnotationType[]) => AnnotationType[]
    }
}
