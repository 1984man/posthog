// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardType, InsightModel, InsightShortId } from '../types'
import type { DashboardEventSource } from '../lib/utils/eventUsageLogic'

export interface dashboardsModelType extends Logic {
    actionCreators: {
        delayedDeleteDashboard: (id: number) => {
            type: 'delayed delete dashboard (models.dashboardsModel)'
            payload: {
                id: number
            }
        }
        setDiveSourceId: (id: InsightShortId | null) => {
            type: 'set dive source id (models.dashboardsModel)'
            payload: {
                id: InsightShortId | null
            }
        }
        setLastDashboardId: (id: number) => {
            type: 'set last dashboard id (models.dashboardsModel)'
            payload: {
                id: number
            }
        }
        addDashboardSuccess: (dashboard: DashboardType) => {
            type: 'add dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
            }
        }
        updateDashboardItem: (
            item: InsightModel,
            dashboardIds?: Array<DashboardType['id']>
        ) => {
            type: 'update dashboard item (models.dashboardsModel)'
            payload: {
                item: InsightModel
                dashboardIds: number[] | undefined
            }
        }
        updateDashboardRefreshStatus: (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => {
            type: 'update dashboard refresh status (models.dashboardsModel)'
            payload: {
                shortId: string | null | undefined
                refreshing: boolean | null
                last_refresh: string | null
            }
        }
        pinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'pin dashboard (models.dashboardsModel)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        unpinDashboard: (
            id: number,
            source: DashboardEventSource
        ) => {
            type: 'unpin dashboard (models.dashboardsModel)'
            payload: {
                id: number
                source: DashboardEventSource
            }
        }
        loadDashboards: () => {
            type: 'load dashboards (models.dashboardsModel)'
            payload: {
                value: true
            }
        }
        loadSharedDashboard: (shareToken: string) => {
            type: 'load shared dashboard (models.dashboardsModel)'
            payload: {
                shareToken: string
            }
        }
        duplicateDashboard: ({ id, name, show }: { id: number; name?: string; show?: boolean }) => {
            type: 'duplicate dashboard (models.dashboardsModel)'
            payload: {
                id: number
                name: string
                show: boolean
            }
        }
        loadDashboardsSuccess: (
            rawDashboards: Record<string, any>,
            payload?: {
                value: true
            }
        ) => {
            type: 'load dashboards success (models.dashboardsModel)'
            payload: {
                rawDashboards: Record<string, any>
                payload?: {
                    value: true
                }
            }
        }
        loadDashboardsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load dashboards failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadSharedDashboardSuccess: (
            sharedDashboard: DashboardType | null,
            payload?: {
                shareToken: string
            }
        ) => {
            type: 'load shared dashboard success (models.dashboardsModel)'
            payload: {
                sharedDashboard: DashboardType | null
                payload?: {
                    shareToken: string
                }
            }
        }
        loadSharedDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load shared dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateDashboard: ({ id, ...payload }: any) => {
            type: 'update dashboard (models.dashboardsModel)'
            payload: any
        }
        updateDashboardSuccess: (
            dashboard: DashboardType | undefined,
            payload?: any
        ) => {
            type: 'update dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType | undefined
                payload?: any
            }
        }
        updateDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setIsSharedDashboard: ({ id, isShared }: any) => {
            type: 'set is shared dashboard (models.dashboardsModel)'
            payload: any
        }
        setIsSharedDashboardSuccess: (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'set is shared dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
        setIsSharedDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set is shared dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteDashboard: ({ id }: any) => {
            type: 'delete dashboard (models.dashboardsModel)'
            payload: any
        }
        deleteDashboardSuccess: (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'delete dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
        deleteDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        restoreDashboard: ({ id }: any) => {
            type: 'restore dashboard (models.dashboardsModel)'
            payload: any
        }
        restoreDashboardSuccess: (
            dashboard: DashboardType,
            payload?: any
        ) => {
            type: 'restore dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: any
            }
        }
        restoreDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'restore dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        pinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => {
            type: 'pin dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    source: DashboardEventSource
                }
            }
        }
        pinDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'pin dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        unpinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => {
            type: 'unpin dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    source: DashboardEventSource
                }
            }
        }
        unpinDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'unpin dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        duplicateDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
            }
        ) => {
            type: 'duplicate dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
                payload?: {
                    id: number
                    name: string
                    show: boolean
                }
            }
        }
        duplicateDashboardFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'duplicate dashboard failure (models.dashboardsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'delayed delete dashboard (models.dashboardsModel)': 'delayedDeleteDashboard'
        'set dive source id (models.dashboardsModel)': 'setDiveSourceId'
        'set last dashboard id (models.dashboardsModel)': 'setLastDashboardId'
        'add dashboard success (models.dashboardsModel)': 'addDashboardSuccess'
        'update dashboard item (models.dashboardsModel)': 'updateDashboardItem'
        'update dashboard refresh status (models.dashboardsModel)': 'updateDashboardRefreshStatus'
        'pin dashboard (models.dashboardsModel)': 'pinDashboard'
        'unpin dashboard (models.dashboardsModel)': 'unpinDashboard'
        'load dashboards (models.dashboardsModel)': 'loadDashboards'
        'load shared dashboard (models.dashboardsModel)': 'loadSharedDashboard'
        'duplicate dashboard (models.dashboardsModel)': 'duplicateDashboard'
        'load dashboards success (models.dashboardsModel)': 'loadDashboardsSuccess'
        'load dashboards failure (models.dashboardsModel)': 'loadDashboardsFailure'
        'load shared dashboard success (models.dashboardsModel)': 'loadSharedDashboardSuccess'
        'load shared dashboard failure (models.dashboardsModel)': 'loadSharedDashboardFailure'
        'update dashboard (models.dashboardsModel)': 'updateDashboard'
        'update dashboard success (models.dashboardsModel)': 'updateDashboardSuccess'
        'update dashboard failure (models.dashboardsModel)': 'updateDashboardFailure'
        'set is shared dashboard (models.dashboardsModel)': 'setIsSharedDashboard'
        'set is shared dashboard success (models.dashboardsModel)': 'setIsSharedDashboardSuccess'
        'set is shared dashboard failure (models.dashboardsModel)': 'setIsSharedDashboardFailure'
        'delete dashboard (models.dashboardsModel)': 'deleteDashboard'
        'delete dashboard success (models.dashboardsModel)': 'deleteDashboardSuccess'
        'delete dashboard failure (models.dashboardsModel)': 'deleteDashboardFailure'
        'restore dashboard (models.dashboardsModel)': 'restoreDashboard'
        'restore dashboard success (models.dashboardsModel)': 'restoreDashboardSuccess'
        'restore dashboard failure (models.dashboardsModel)': 'restoreDashboardFailure'
        'pin dashboard success (models.dashboardsModel)': 'pinDashboardSuccess'
        'pin dashboard failure (models.dashboardsModel)': 'pinDashboardFailure'
        'unpin dashboard success (models.dashboardsModel)': 'unpinDashboardSuccess'
        'unpin dashboard failure (models.dashboardsModel)': 'unpinDashboardFailure'
        'duplicate dashboard success (models.dashboardsModel)': 'duplicateDashboardSuccess'
        'duplicate dashboard failure (models.dashboardsModel)': 'duplicateDashboardFailure'
    }
    actionTypes: {
        delayedDeleteDashboard: 'delayed delete dashboard (models.dashboardsModel)'
        setDiveSourceId: 'set dive source id (models.dashboardsModel)'
        setLastDashboardId: 'set last dashboard id (models.dashboardsModel)'
        addDashboardSuccess: 'add dashboard success (models.dashboardsModel)'
        updateDashboardItem: 'update dashboard item (models.dashboardsModel)'
        updateDashboardRefreshStatus: 'update dashboard refresh status (models.dashboardsModel)'
        pinDashboard: 'pin dashboard (models.dashboardsModel)'
        unpinDashboard: 'unpin dashboard (models.dashboardsModel)'
        loadDashboards: 'load dashboards (models.dashboardsModel)'
        loadSharedDashboard: 'load shared dashboard (models.dashboardsModel)'
        duplicateDashboard: 'duplicate dashboard (models.dashboardsModel)'
        loadDashboardsSuccess: 'load dashboards success (models.dashboardsModel)'
        loadDashboardsFailure: 'load dashboards failure (models.dashboardsModel)'
        loadSharedDashboardSuccess: 'load shared dashboard success (models.dashboardsModel)'
        loadSharedDashboardFailure: 'load shared dashboard failure (models.dashboardsModel)'
        updateDashboard: 'update dashboard (models.dashboardsModel)'
        updateDashboardSuccess: 'update dashboard success (models.dashboardsModel)'
        updateDashboardFailure: 'update dashboard failure (models.dashboardsModel)'
        setIsSharedDashboard: 'set is shared dashboard (models.dashboardsModel)'
        setIsSharedDashboardSuccess: 'set is shared dashboard success (models.dashboardsModel)'
        setIsSharedDashboardFailure: 'set is shared dashboard failure (models.dashboardsModel)'
        deleteDashboard: 'delete dashboard (models.dashboardsModel)'
        deleteDashboardSuccess: 'delete dashboard success (models.dashboardsModel)'
        deleteDashboardFailure: 'delete dashboard failure (models.dashboardsModel)'
        restoreDashboard: 'restore dashboard (models.dashboardsModel)'
        restoreDashboardSuccess: 'restore dashboard success (models.dashboardsModel)'
        restoreDashboardFailure: 'restore dashboard failure (models.dashboardsModel)'
        pinDashboardSuccess: 'pin dashboard success (models.dashboardsModel)'
        pinDashboardFailure: 'pin dashboard failure (models.dashboardsModel)'
        unpinDashboardSuccess: 'unpin dashboard success (models.dashboardsModel)'
        unpinDashboardFailure: 'unpin dashboard failure (models.dashboardsModel)'
        duplicateDashboardSuccess: 'duplicate dashboard success (models.dashboardsModel)'
        duplicateDashboardFailure: 'duplicate dashboard failure (models.dashboardsModel)'
    }
    actions: {
        delayedDeleteDashboard: (id: number) => void
        setDiveSourceId: (id: InsightShortId | null) => void
        setLastDashboardId: (id: number) => void
        addDashboardSuccess: (dashboard: DashboardType) => void
        updateDashboardItem: (item: InsightModel, dashboardIds?: Array<DashboardType['id']>) => void
        updateDashboardRefreshStatus: (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => void
        pinDashboard: (id: number, source: DashboardEventSource) => void
        unpinDashboard: (id: number, source: DashboardEventSource) => void
        loadDashboards: () => void
        loadSharedDashboard: (shareToken: string) => void
        duplicateDashboard: ({ id, name, show }: { id: number; name?: string; show?: boolean }) => void
        loadDashboardsSuccess: (
            rawDashboards: Record<string, any>,
            payload?: {
                value: true
            }
        ) => void
        loadDashboardsFailure: (error: string, errorObject?: any) => void
        loadSharedDashboardSuccess: (
            sharedDashboard: DashboardType | null,
            payload?: {
                shareToken: string
            }
        ) => void
        loadSharedDashboardFailure: (error: string, errorObject?: any) => void
        updateDashboard: ({ id, ...payload }: any) => void
        updateDashboardSuccess: (dashboard: DashboardType | undefined, payload?: any) => void
        updateDashboardFailure: (error: string, errorObject?: any) => void
        setIsSharedDashboard: ({ id, isShared }: any) => void
        setIsSharedDashboardSuccess: (dashboard: DashboardType, payload?: any) => void
        setIsSharedDashboardFailure: (error: string, errorObject?: any) => void
        deleteDashboard: ({ id }: any) => void
        deleteDashboardSuccess: (dashboard: DashboardType, payload?: any) => void
        deleteDashboardFailure: (error: string, errorObject?: any) => void
        restoreDashboard: ({ id }: any) => void
        restoreDashboardSuccess: (dashboard: DashboardType, payload?: any) => void
        restoreDashboardFailure: (error: string, errorObject?: any) => void
        pinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => void
        pinDashboardFailure: (error: string, errorObject?: any) => void
        unpinDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                source: DashboardEventSource
            }
        ) => void
        unpinDashboardFailure: (error: string, errorObject?: any) => void
        duplicateDashboardSuccess: (
            dashboard: DashboardType,
            payload?: {
                id: number
                name: string
                show: boolean
            }
        ) => void
        duplicateDashboardFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        rawDashboards: Record<string, DashboardType>
        rawDashboardsLoading: boolean
        sharedDashboard: DashboardType | null
        sharedDashboardLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        redirect: boolean
        lastDashboardId: null | number
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        addDashboardSuccess: ((
            action: {
                type: 'add dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        restoreDashboardSuccess: ((
            action: {
                type: 'restore dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteDashboardSuccess: ((
            action: {
                type: 'delete dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        duplicateDashboardSuccess: ((
            action: {
                type: 'duplicate dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                    payload?: {
                        id: number
                        name: string
                        show: boolean
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'dashboardsModel']
    pathString: 'models.dashboardsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        rawDashboards: Record<string, DashboardType>
        rawDashboardsLoading: boolean
        sharedDashboard: DashboardType | null
        sharedDashboardLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        redirect: boolean
        lastDashboardId: null | number
    }
    reducers: {
        rawDashboards: (
            state: Record<string, DashboardType>,
            action: any,
            fullState: any
        ) => Record<string, DashboardType>
        rawDashboardsLoading: (state: boolean, action: any, fullState: any) => boolean
        sharedDashboard: (state: DashboardType | null, action: any, fullState: any) => DashboardType | null
        sharedDashboardLoading: (state: boolean, action: any, fullState: any) => boolean
        dashboard: (state: null | DashboardType, action: any, fullState: any) => null | DashboardType
        dashboardLoading: (state: boolean, action: any, fullState: any) => boolean
        redirect: (state: boolean, action: any, fullState: any) => boolean
        lastDashboardId: (state: null | number, action: any, fullState: any) => null | number
    }
    selector: (state: any) => {
        rawDashboards: Record<string, DashboardType>
        rawDashboardsLoading: boolean
        sharedDashboard: DashboardType | null
        sharedDashboardLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        redirect: boolean
        lastDashboardId: null | number
    }
    selectors: {
        rawDashboards: (state: any, props?: any) => Record<string, DashboardType>
        rawDashboardsLoading: (state: any, props?: any) => boolean
        sharedDashboard: (state: any, props?: any) => DashboardType | null
        sharedDashboardLoading: (state: any, props?: any) => boolean
        dashboard: (state: any, props?: any) => null | DashboardType
        dashboardLoading: (state: any, props?: any) => boolean
        redirect: (state: any, props?: any) => boolean
        lastDashboardId: (state: any, props?: any) => null | number
        nameSortedDashboards: (state: any, props?: any) => DashboardType[]
        pinSortedDashboards: (state: any, props?: any) => DashboardType[]
        dashboardsLoading: (state: any, props?: any) => boolean
        pinnedDashboards: (state: any, props?: any) => DashboardType[]
    }
    sharedListeners: {}
    values: {
        rawDashboards: Record<string, DashboardType>
        rawDashboardsLoading: boolean
        sharedDashboard: DashboardType | null
        sharedDashboardLoading: boolean
        dashboard: null | DashboardType
        dashboardLoading: boolean
        redirect: boolean
        lastDashboardId: null | number
        nameSortedDashboards: DashboardType[]
        pinSortedDashboards: DashboardType[]
        dashboardsLoading: boolean
        pinnedDashboards: DashboardType[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        nameSortedDashboards: (rawDashboards: Record<string, DashboardType>) => DashboardType[]
        pinSortedDashboards: (nameSortedDashboards: DashboardType[]) => DashboardType[]
        dashboardsLoading: (rawDashboardsLoading: boolean, sharedDashboardLoading: boolean) => boolean
        pinnedDashboards: (nameSortedDashboards: DashboardType[]) => DashboardType[]
    }
}
