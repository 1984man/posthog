// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventDefinition } from '../types'
import type { EventDefinitionStorage } from './eventDefinitionsModel'

export interface eventDefinitionsModelType extends Logic {
    actionCreators: {
        updateDescription: (
            id: string,
            description: string | null,
            type: string
        ) => {
            type: 'update description (models.eventDefinitionsModel)'
            payload: {
                id: string
                description: string | null
                type: string
            }
        }
        updateEventDefinition: (eventDefinition: EventDefinition) => {
            type: 'update event definition (models.eventDefinitionsModel)'
            payload: {
                eventDefinition: EventDefinition
            }
        }
        loadEventDefinitions: (initial?: boolean) => {
            type: 'load event definitions (models.eventDefinitionsModel)'
            payload: boolean
        }
        loadEventDefinitionsSuccess: (
            eventStorage: { count: any; results: any[]; next: any },
            payload?: boolean
        ) => {
            type: 'load event definitions success (models.eventDefinitionsModel)'
            payload: {
                eventStorage: { count: any; results: any[]; next: any }
                payload?: boolean
            }
        }
        loadEventDefinitionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event definitions failure (models.eventDefinitionsModel)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update description (models.eventDefinitionsModel)': 'updateDescription'
        'update event definition (models.eventDefinitionsModel)': 'updateEventDefinition'
        'load event definitions (models.eventDefinitionsModel)': 'loadEventDefinitions'
        'load event definitions success (models.eventDefinitionsModel)': 'loadEventDefinitionsSuccess'
        'load event definitions failure (models.eventDefinitionsModel)': 'loadEventDefinitionsFailure'
    }
    actionTypes: {
        updateDescription: 'update description (models.eventDefinitionsModel)'
        updateEventDefinition: 'update event definition (models.eventDefinitionsModel)'
        loadEventDefinitions: 'load event definitions (models.eventDefinitionsModel)'
        loadEventDefinitionsSuccess: 'load event definitions success (models.eventDefinitionsModel)'
        loadEventDefinitionsFailure: 'load event definitions failure (models.eventDefinitionsModel)'
    }
    actions: {
        updateDescription: (id: string, description: string | null, type: string) => void
        updateEventDefinition: (eventDefinition: EventDefinition) => void
        loadEventDefinitions: (initial?: boolean) => void
        loadEventDefinitionsSuccess: (
            eventStorage: { count: any; results: any[]; next: any },
            payload?: boolean
        ) => void
        loadEventDefinitionsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        eventStorage: EventDefinitionStorage
        eventStorageLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        loadEventDefinitionsSuccess: ((
            action: {
                type: 'load event definitions success (models.eventDefinitionsModel)'
                payload: {
                    eventStorage: { count: any; results: any[]; next: any }
                    payload?: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateDescription: ((
            action: {
                type: 'update description (models.eventDefinitionsModel)'
                payload: {
                    id: string
                    description: string | null
                    type: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['models', 'eventDefinitionsModel']
    pathString: 'models.eventDefinitionsModel'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        eventStorage: EventDefinitionStorage
        eventStorageLoading: boolean
    }
    reducers: {
        eventStorage: (state: EventDefinitionStorage, action: any, fullState: any) => EventDefinitionStorage
        eventStorageLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        eventStorage: EventDefinitionStorage
        eventStorageLoading: boolean
    }
    selectors: {
        eventStorage: (state: any, props?: any) => EventDefinitionStorage
        eventStorageLoading: (state: any, props?: any) => boolean
        loaded: (state: any, props?: any) => boolean
        eventDefinitions: (state: any, props?: any) => EventDefinition[]
        eventNames: (state: any, props?: any) => string[]
        customEvents: (state: any, props?: any) => EventDefinition[]
    }
    sharedListeners: {}
    values: {
        eventStorage: EventDefinitionStorage
        eventStorageLoading: boolean
        loaded: boolean
        eventDefinitions: EventDefinition[]
        eventNames: string[]
        customEvents: EventDefinition[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        loaded: (eventStorage: EventDefinitionStorage, eventStorageLoading: boolean) => boolean
        eventDefinitions: (eventStorage: EventDefinitionStorage) => EventDefinition[]
        eventNames: (eventDefinitions: EventDefinition[]) => string[]
        customEvents: (eventDefinitions: EventDefinition[]) => EventDefinition[]
    }
}
