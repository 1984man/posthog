// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnnotationsLogicProps } from './annotationsLogic'
import type { Dayjs, OpUnitType } from '../../dayjs'
import type { AnnotationScope, AnnotationType, UserType } from '../../../types'

export interface annotationsLogicType extends Logic {
    actionCreators: {
        createGlobalAnnotation: (
            content: string,
            date_marker: string,
            insightNumericId?: number
        ) => {
            type: 'create global annotation (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                content: string
                date_marker: string
                created_at: Dayjs
                created_by: UserType | null
                insightNumericId: number | undefined
            }
        }
        deleteGlobalAnnotation: (id: any) => {
            type: 'delete global annotation (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                id: any
            }
        }
        createAnnotation: (
            content: string,
            date_marker: string,
            scope?: AnnotationScope
        ) => {
            type: 'create annotation (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                content: string
                date_marker: string
                created_at: Dayjs
                scope: AnnotationScope
            }
        }
        deleteAnnotation: (id: string) => {
            type: 'delete annotation (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                id: string
            }
        }
        updateDiffType: (dates: string[]) => {
            type: 'update diff type (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                dates: string[]
            }
        }
        setDiffType: (type: OpUnitType) => {
            type: 'set diff type (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                type: OpUnitType
            }
        }
        loadAnnotations: () => {
            type: 'load annotations (lib.components.Annotations.annotationsLogic.*)'
            payload: any
        }
        loadAnnotationsSuccess: (
            annotations: AnnotationType[],
            payload?: any
        ) => {
            type: 'load annotations success (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                annotations: AnnotationType[]
                payload?: any
            }
        }
        loadAnnotationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load annotations failure (lib.components.Annotations.annotationsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'create global annotation (lib.components.Annotations.annotationsLogic.*)': 'createGlobalAnnotation'
        'delete global annotation (lib.components.Annotations.annotationsLogic.*)': 'deleteGlobalAnnotation'
        'create annotation (lib.components.Annotations.annotationsLogic.*)': 'createAnnotation'
        'delete annotation (lib.components.Annotations.annotationsLogic.*)': 'deleteAnnotation'
        'update diff type (lib.components.Annotations.annotationsLogic.*)': 'updateDiffType'
        'set diff type (lib.components.Annotations.annotationsLogic.*)': 'setDiffType'
        'load annotations (lib.components.Annotations.annotationsLogic.*)': 'loadAnnotations'
        'load annotations success (lib.components.Annotations.annotationsLogic.*)': 'loadAnnotationsSuccess'
        'load annotations failure (lib.components.Annotations.annotationsLogic.*)': 'loadAnnotationsFailure'
    }
    actionTypes: {
        createGlobalAnnotation: 'create global annotation (lib.components.Annotations.annotationsLogic.*)'
        deleteGlobalAnnotation: 'delete global annotation (lib.components.Annotations.annotationsLogic.*)'
        createAnnotation: 'create annotation (lib.components.Annotations.annotationsLogic.*)'
        deleteAnnotation: 'delete annotation (lib.components.Annotations.annotationsLogic.*)'
        updateDiffType: 'update diff type (lib.components.Annotations.annotationsLogic.*)'
        setDiffType: 'set diff type (lib.components.Annotations.annotationsLogic.*)'
        loadAnnotations: 'load annotations (lib.components.Annotations.annotationsLogic.*)'
        loadAnnotationsSuccess: 'load annotations success (lib.components.Annotations.annotationsLogic.*)'
        loadAnnotationsFailure: 'load annotations failure (lib.components.Annotations.annotationsLogic.*)'
    }
    actions: {
        createGlobalAnnotation: (content: string, date_marker: string, insightNumericId?: number) => void
        deleteGlobalAnnotation: (id: any) => void
        createAnnotation: (content: string, date_marker: string, scope?: AnnotationScope) => void
        deleteAnnotation: (id: string) => void
        updateDiffType: (dates: string[]) => void
        setDiffType: (type: OpUnitType) => void
        loadAnnotations: () => void
        loadAnnotationsSuccess: (annotations: AnnotationType[], payload?: any) => void
        loadAnnotationsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        annotations: AnnotationType[]
        annotationsLoading: boolean
        diffType: string
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        createAnnotation: ((
            action: {
                type: 'create annotation (lib.components.Annotations.annotationsLogic.*)'
                payload: {
                    content: string
                    date_marker: string
                    created_at: Dayjs
                    scope: AnnotationScope
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteAnnotation: ((
            action: {
                type: 'delete annotation (lib.components.Annotations.annotationsLogic.*)'
                payload: {
                    id: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateDiffType: ((
            action: {
                type: 'update diff type (lib.components.Annotations.annotationsLogic.*)'
                payload: {
                    dates: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'Annotations', 'annotationsLogic', '*']
    pathString: 'lib.components.Annotations.annotationsLogic.*'
    props: AnnotationsLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        annotations: AnnotationType[]
        annotationsLoading: boolean
        diffType: string
    }
    reducers: {
        annotations: (state: AnnotationType[], action: any, fullState: any) => AnnotationType[]
        annotationsLoading: (state: boolean, action: any, fullState: any) => boolean
        diffType: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        annotations: AnnotationType[]
        annotationsLoading: boolean
        diffType: string
    }
    selectors: {
        annotations: (state: any, props?: any) => AnnotationType[]
        annotationsLoading: (state: any, props?: any) => boolean
        diffType: (state: any, props?: any) => string
        activeGlobalAnnotations: (state: any, props?: any) => AnnotationType[]
        annotationsList: (state: any, props?: any) => AnnotationType[]
        groupedAnnotations: (state: any, props?: any) => Record<string | number, AnnotationType[]>
    }
    sharedListeners: {}
    values: {
        annotations: AnnotationType[]
        annotationsLoading: boolean
        diffType: string
        activeGlobalAnnotations: AnnotationType[]
        annotationsList: AnnotationType[]
        groupedAnnotations: Record<string | number, AnnotationType[]>
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        annotationsList: (annotations: AnnotationType[], activeGlobalAnnotations: AnnotationType[]) => AnnotationType[]
        groupedAnnotations: (
            annotationsList: AnnotationType[],
            diffType: string
        ) => Record<string | number, AnnotationType[]>
    }
}
