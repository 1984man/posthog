// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface propertySelectLogicType extends Logic {
    actionCreators: {
        setPopoverTriggerElement: (triggerElement: HTMLElement | null) => {
            type: 'set popover trigger element (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                triggerElement: HTMLElement | null
            }
        }
        hidePopover: () => {
            type: 'hide popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                value: true
            }
        }
        openPopover: () => {
            type: 'open popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                value: true
            }
        }
        togglePopover: () => {
            type: 'toggle popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                value: true
            }
        }
        setSelectedProperties: (newSelectedProperties: string[]) => {
            type: 'set selected properties (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                newSelectedProperties: Set<string>
            }
        }
        toggleProperty: (property: string) => {
            type: 'toggle property (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                property: string
            }
        }
        clearAll: () => {
            type: 'clear all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                value: true
            }
        }
        selectAll: () => {
            type: 'select all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                value: true
            }
        }
        setQuery: (query: string) => {
            type: 'set query (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
            payload: {
                query: string
            }
        }
    }
    actionKeys: {
        'set popover trigger element (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'setPopoverTriggerElement'
        'hide popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'hidePopover'
        'open popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'openPopover'
        'toggle popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'togglePopover'
        'set selected properties (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'setSelectedProperties'
        'toggle property (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'toggleProperty'
        'clear all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'clearAll'
        'select all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'selectAll'
        'set query (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)': 'setQuery'
    }
    actionTypes: {
        setPopoverTriggerElement: 'set popover trigger element (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        hidePopover: 'hide popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        openPopover: 'open popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        togglePopover: 'toggle popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        setSelectedProperties: 'set selected properties (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        toggleProperty: 'toggle property (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        clearAll: 'clear all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        selectAll: 'select all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
        setQuery: 'set query (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
    }
    actions: {
        setPopoverTriggerElement: (triggerElement: HTMLElement | null) => void
        hidePopover: () => void
        openPopover: () => void
        togglePopover: () => void
        setSelectedProperties: (newSelectedProperties: string[]) => void
        toggleProperty: (property: string) => void
        clearAll: () => void
        selectAll: () => void
        setQuery: (query: string) => void
    }
    defaults: {
        isPopoverOpen: boolean
        popoverTriggerElement: HTMLElement | null
        selectedProperties: Set<string>
        query: string
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: string
    listeners: {
        togglePopover: ((
            action: {
                type: 'toggle popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        hidePopover: ((
            action: {
                type: 'hide popover (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        selectAll: ((
            action: {
                type: 'select all (lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'PropertyNamesSelect', 'propertyNamesSelectLogic', '*']
    pathString: 'lib.components.PropertyNamesSelect.propertyNamesSelectLogic.*'
    props: {
        propertySelectLogicKey: string
        properties: string[]
        initialProperties?: Set<string>
        onChange?: (value: string[]) => void
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isPopoverOpen: boolean
        popoverTriggerElement: HTMLElement | null
        selectedProperties: Set<string>
        query: string
    }
    reducers: {
        isPopoverOpen: (state: boolean, action: any, fullState: any) => boolean
        popoverTriggerElement: (state: HTMLElement | null, action: any, fullState: any) => HTMLElement | null
        selectedProperties: (state: Set<string>, action: any, fullState: any) => Set<string>
        query: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        isPopoverOpen: boolean
        popoverTriggerElement: HTMLElement | null
        selectedProperties: Set<string>
        query: string
    }
    selectors: {
        isPopoverOpen: (state: any, props?: any) => boolean
        popoverTriggerElement: (state: any, props?: any) => HTMLElement | null
        selectedProperties: (state: any, props?: any) => Set<string>
        query: (state: any, props?: any) => string
        selectState: (state: any, props?: any) => 'all' | 'none' | 'some'
        isSelected: (state: any, props?: any) => (propertyName: string) => boolean
        properties: (state: any, props?: any) => string[]
        filteredProperties: (state: any, props?: any) => { name: string; highlightedNameParts: string[] }[]
    }
    sharedListeners: {}
    values: {
        isPopoverOpen: boolean
        popoverTriggerElement: HTMLElement | null
        selectedProperties: Set<string>
        query: string
        selectState: 'all' | 'none' | 'some'
        isSelected: (propertyName: string) => boolean
        properties: string[]
        filteredProperties: { name: string; highlightedNameParts: string[] }[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        selectState: (selectedProperties: Set<string>, properties: string[]) => 'all' | 'none' | 'some'
        isSelected: (selectedProperties: Set<string>) => (propertyName: string) => boolean
        properties: (arg: any) => string[]
        filteredProperties: (properties: string[], query: string) => { name: string; highlightedNameParts: string[] }[]
    }
}
