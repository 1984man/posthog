// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PropertyFilterLogicProps } from './types'
import type { AnyPropertyFilter, PropertyFilter, PropertyFilterValue, PropertyOperator } from '../../../types'

export interface propertyFilterLogicType extends Logic {
    actionCreators: {
        update: () => {
            type: 'update (lib.components.PropertyFilters.propertyFilterLogic.*)'
            payload: {
                value: true
            }
        }
        setFilter: (
            index: number,
            key: PropertyFilter['key'],
            value: PropertyFilter['value'],
            operator: PropertyFilter['operator'],
            type: PropertyFilter['type'],
            group_type_index?: PropertyFilter['group_type_index']
        ) => {
            type: 'set filter (lib.components.PropertyFilters.propertyFilterLogic.*)'
            payload: {
                index: number
                key: string
                value: PropertyFilterValue
                operator: PropertyOperator | null
                type: string
                group_type_index: number | null | undefined
            }
        }
        setFilters: (filters: AnyPropertyFilter[]) => {
            type: 'set filters (lib.components.PropertyFilters.propertyFilterLogic.*)'
            payload: {
                filters: AnyPropertyFilter[]
            }
        }
        remove: (index: number) => {
            type: 'remove (lib.components.PropertyFilters.propertyFilterLogic.*)'
            payload: {
                index: number
            }
        }
    }
    actionKeys: {
        'update (lib.components.PropertyFilters.propertyFilterLogic.*)': 'update'
        'set filter (lib.components.PropertyFilters.propertyFilterLogic.*)': 'setFilter'
        'set filters (lib.components.PropertyFilters.propertyFilterLogic.*)': 'setFilters'
        'remove (lib.components.PropertyFilters.propertyFilterLogic.*)': 'remove'
    }
    actionTypes: {
        update: 'update (lib.components.PropertyFilters.propertyFilterLogic.*)'
        setFilter: 'set filter (lib.components.PropertyFilters.propertyFilterLogic.*)'
        setFilters: 'set filters (lib.components.PropertyFilters.propertyFilterLogic.*)'
        remove: 'remove (lib.components.PropertyFilters.propertyFilterLogic.*)'
    }
    actions: {
        update: () => void
        setFilter: (
            index: number,
            key: PropertyFilter['key'],
            value: PropertyFilter['value'],
            operator: PropertyFilter['operator'],
            type: PropertyFilter['type'],
            group_type_index?: PropertyFilter['group_type_index']
        ) => void
        setFilters: (filters: AnyPropertyFilter[]) => void
        remove: (index: number) => void
    }
    defaults: {
        filters: AnyPropertyFilter[]
    }
    events: {}
    key: string
    listeners: {
        setFilter: ((
            action: {
                type: 'set filter (lib.components.PropertyFilters.propertyFilterLogic.*)'
                payload: {
                    index: number
                    key: string
                    value: PropertyFilterValue
                    operator: PropertyOperator | null
                    type: string
                    group_type_index: number | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        remove: ((
            action: {
                type: 'remove (lib.components.PropertyFilters.propertyFilterLogic.*)'
                payload: {
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        update: ((
            action: {
                type: 'update (lib.components.PropertyFilters.propertyFilterLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'PropertyFilters', 'propertyFilterLogic', '*']
    pathString: 'lib.components.PropertyFilters.propertyFilterLogic.*'
    props: PropertyFilterLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: AnyPropertyFilter[]
    }
    reducers: {
        filters: (state: AnyPropertyFilter[], action: any, fullState: any) => AnyPropertyFilter[]
    }
    selector: (state: any) => {
        filters: AnyPropertyFilter[]
    }
    selectors: {
        filters: (state: any, props?: any) => AnyPropertyFilter[]
        filledFilters: (state: any, props?: any) => PropertyFilter[]
        filtersWithNew: (state: any, props?: any) => AnyPropertyFilter[]
    }
    sharedListeners: {}
    values: {
        filters: AnyPropertyFilter[]
        filledFilters: PropertyFilter[]
        filtersWithNew: AnyPropertyFilter[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        filledFilters: (filters: AnyPropertyFilter[]) => PropertyFilter[]
        filtersWithNew: (filters: AnyPropertyFilter[]) => AnyPropertyFilter[]
    }
}
