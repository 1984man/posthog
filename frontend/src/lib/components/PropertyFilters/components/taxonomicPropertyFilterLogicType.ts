// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { TaxonomicPropertyFilterLogicProps } from '../types'
import type { AnyPropertyFilter, PropertyFilterValue } from '../../../../types'
import type { TaxonomicFilterGroup } from '../../TaxonomicFilter/types'

export interface taxonomicPropertyFilterLogicType extends Logic {
    actionCreators: {
        selectItem: (
            taxonomicGroup: TaxonomicFilterGroup,
            propertyKey?: PropertyFilterValue
        ) => {
            type: 'select item (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
            payload: {
                taxonomicGroup: TaxonomicFilterGroup
                propertyKey: PropertyFilterValue | undefined
            }
        }
        openDropdown: () => {
            type: 'open dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
            payload: {
                value: true
            }
        }
        closeDropdown: () => {
            type: 'close dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'select item (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)': 'selectItem'
        'open dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)': 'openDropdown'
        'close dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)': 'closeDropdown'
    }
    actionTypes: {
        selectItem: 'select item (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
        openDropdown: 'open dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
        closeDropdown: 'close dropdown (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
    }
    actions: {
        selectItem: (taxonomicGroup: TaxonomicFilterGroup, propertyKey?: PropertyFilterValue) => void
        openDropdown: () => void
        closeDropdown: () => void
    }
    defaults: {
        dropdownOpen: boolean
    }
    events: {}
    key: string
    listeners: {
        selectItem: ((
            action: {
                type: 'select item (lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*)'
                payload: {
                    taxonomicGroup: TaxonomicFilterGroup
                    propertyKey: PropertyFilterValue | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'PropertyFilters', 'components', 'taxonomicPropertyFilterLogic', '*']
    pathString: 'lib.components.PropertyFilters.components.taxonomicPropertyFilterLogic.*'
    props: TaxonomicPropertyFilterLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        dropdownOpen: boolean
    }
    reducers: {
        dropdownOpen: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        dropdownOpen: boolean
    }
    selectors: {
        dropdownOpen: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => AnyPropertyFilter[]
        taxonomicGroups: (state: any, props?: any) => TaxonomicFilterGroup[]
        filter: (state: any, props?: any) => AnyPropertyFilter | null
        selectedCohortName: (state: any, props?: any) => string | null | undefined
        activeTaxonomicGroup: (state: any, props?: any) => TaxonomicFilterGroup | undefined
    }
    sharedListeners: {}
    values: {
        dropdownOpen: boolean
        filters: AnyPropertyFilter[]
        taxonomicGroups: TaxonomicFilterGroup[]
        filter: AnyPropertyFilter | null
        selectedCohortName: string | null | undefined
        activeTaxonomicGroup: TaxonomicFilterGroup | undefined
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        filter: (filters: AnyPropertyFilter[], arg: any) => AnyPropertyFilter | null
        selectedCohortName: (
            filter: AnyPropertyFilter | null,
            cohorts: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').CohortType[]
        ) => string | null | undefined
        activeTaxonomicGroup: (
            filter: AnyPropertyFilter | null,
            taxonomicGroups: TaxonomicFilterGroup[]
        ) => TaxonomicFilterGroup | undefined
    }
}
