// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:15 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DefinitionPopupLogicProps, DefinitionPopupState } from './definitionPopupLogic'
import type { AvailableFeature } from '../../../types'
import type { TaxonomicDefinitionTypes } from '../TaxonomicFilter/types'

export interface definitionPopupLogicType extends Logic {
    actionCreators: {
        setDefinition: (item: Partial<TaxonomicDefinitionTypes>) => {
            type: 'set definition (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                item: Partial<TaxonomicDefinitionTypes>
            }
        }
        setLocalDefinition: (item: Partial<TaxonomicDefinitionTypes>) => {
            type: 'set local definition (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                item: Partial<TaxonomicDefinitionTypes>
            }
        }
        setPopupState: (state: DefinitionPopupState) => {
            type: 'set popup state (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                state: DefinitionPopupState
            }
        }
        handleCancel: () => {
            type: 'handle cancel (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                value: true
            }
        }
        recordHoverActivity: () => {
            type: 'record hover activity (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                value: true
            }
        }
        setDefinitionSuccess: (
            definition: TaxonomicDefinitionTypes,
            payload?: {
                item: Partial<TaxonomicDefinitionTypes>
            }
        ) => {
            type: 'set definition success (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                definition: TaxonomicDefinitionTypes
                payload?: {
                    item: Partial<TaxonomicDefinitionTypes>
                }
            }
        }
        setDefinitionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set definition failure (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        handleSave: (_: any) => {
            type: 'handle save (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: any
        }
        handleSaveSuccess: (
            definition: Partial<TaxonomicDefinitionTypes>,
            payload?: any
        ) => {
            type: 'handle save success (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                definition: Partial<TaxonomicDefinitionTypes>
                payload?: any
            }
        }
        handleSaveFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'handle save failure (lib.components.DefinitionPanel.definitionPopupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set definition (lib.components.DefinitionPanel.definitionPopupLogic)': 'setDefinition'
        'set local definition (lib.components.DefinitionPanel.definitionPopupLogic)': 'setLocalDefinition'
        'set popup state (lib.components.DefinitionPanel.definitionPopupLogic)': 'setPopupState'
        'handle cancel (lib.components.DefinitionPanel.definitionPopupLogic)': 'handleCancel'
        'record hover activity (lib.components.DefinitionPanel.definitionPopupLogic)': 'recordHoverActivity'
        'set definition success (lib.components.DefinitionPanel.definitionPopupLogic)': 'setDefinitionSuccess'
        'set definition failure (lib.components.DefinitionPanel.definitionPopupLogic)': 'setDefinitionFailure'
        'handle save (lib.components.DefinitionPanel.definitionPopupLogic)': 'handleSave'
        'handle save success (lib.components.DefinitionPanel.definitionPopupLogic)': 'handleSaveSuccess'
        'handle save failure (lib.components.DefinitionPanel.definitionPopupLogic)': 'handleSaveFailure'
    }
    actionTypes: {
        setDefinition: 'set definition (lib.components.DefinitionPanel.definitionPopupLogic)'
        setLocalDefinition: 'set local definition (lib.components.DefinitionPanel.definitionPopupLogic)'
        setPopupState: 'set popup state (lib.components.DefinitionPanel.definitionPopupLogic)'
        handleCancel: 'handle cancel (lib.components.DefinitionPanel.definitionPopupLogic)'
        recordHoverActivity: 'record hover activity (lib.components.DefinitionPanel.definitionPopupLogic)'
        setDefinitionSuccess: 'set definition success (lib.components.DefinitionPanel.definitionPopupLogic)'
        setDefinitionFailure: 'set definition failure (lib.components.DefinitionPanel.definitionPopupLogic)'
        handleSave: 'handle save (lib.components.DefinitionPanel.definitionPopupLogic)'
        handleSaveSuccess: 'handle save success (lib.components.DefinitionPanel.definitionPopupLogic)'
        handleSaveFailure: 'handle save failure (lib.components.DefinitionPanel.definitionPopupLogic)'
    }
    actions: {
        setDefinition: (item: Partial<TaxonomicDefinitionTypes>) => void
        setLocalDefinition: (item: Partial<TaxonomicDefinitionTypes>) => void
        setPopupState: (state: DefinitionPopupState) => void
        handleCancel: () => void
        recordHoverActivity: () => void
        setDefinitionSuccess: (
            definition: TaxonomicDefinitionTypes,
            payload?: {
                item: Partial<TaxonomicDefinitionTypes>
            }
        ) => void
        setDefinitionFailure: (error: string, errorObject?: any) => void
        handleSave: (_: any) => void
        handleSaveSuccess: (definition: Partial<TaxonomicDefinitionTypes>, payload?: any) => void
        handleSaveFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        state: DefinitionPopupState
        localDefinition: Partial<TaxonomicDefinitionTypes>
        definition: Partial<TaxonomicDefinitionTypes>
        definitionLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        setDefinition: ((
            action: {
                type: 'set definition (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: {
                    item: Partial<TaxonomicDefinitionTypes>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleSave: ((
            action: {
                type: 'handle save (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: any
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleSaveSuccess: ((
            action: {
                type: 'handle save success (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: {
                    definition: Partial<TaxonomicDefinitionTypes>
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleSaveFailure: ((
            action: {
                type: 'handle save failure (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleCancel: ((
            action: {
                type: 'handle cancel (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        recordHoverActivity: ((
            action: {
                type: 'record hover activity (lib.components.DefinitionPanel.definitionPopupLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'DefinitionPanel', 'definitionPopupLogic']
    pathString: 'lib.components.DefinitionPanel.definitionPopupLogic'
    props: DefinitionPopupLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        state: DefinitionPopupState
        localDefinition: Partial<TaxonomicDefinitionTypes>
        definition: Partial<TaxonomicDefinitionTypes>
        definitionLoading: boolean
    }
    reducers: {
        state: (state: DefinitionPopupState, action: any, fullState: any) => DefinitionPopupState
        localDefinition: (
            state: Partial<TaxonomicDefinitionTypes>,
            action: any,
            fullState: any
        ) => Partial<TaxonomicDefinitionTypes>
        definition: (
            state: Partial<TaxonomicDefinitionTypes>,
            action: any,
            fullState: any
        ) => Partial<TaxonomicDefinitionTypes>
        definitionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        state: DefinitionPopupState
        localDefinition: Partial<TaxonomicDefinitionTypes>
        definition: Partial<TaxonomicDefinitionTypes>
        definitionLoading: boolean
    }
    selectors: {
        state: (state: any, props?: any) => DefinitionPopupState
        localDefinition: (state: any, props?: any) => Partial<TaxonomicDefinitionTypes>
        definition: (state: any, props?: any) => Partial<TaxonomicDefinitionTypes>
        definitionLoading: (state: any, props?: any) => boolean
        hasAvailableFeature: (state: any, props?: any) => (feature: AvailableFeature) => boolean
        type: (state: any, props?: any) => any
        onMouseLeave: (state: any, props?: any) => any
        hideView: (state: any, props?: any) => any
        hideEdit: (state: any, props?: any) => any
        openDetailInNewTab: (state: any, props?: any) => any
        singularType: (state: any, props?: any) => string
        dirty: (state: any, props?: any) => boolean
        hasTaxonomyFeatures: (state: any, props?: any) => boolean
        isViewable: (state: any, props?: any) => boolean
        isAction: (state: any, props?: any) => boolean
        isEvent: (state: any, props?: any) => boolean
        isProperty: (state: any, props?: any) => any
        isCohort: (state: any, props?: any) => boolean
        isElement: (state: any, props?: any) => boolean
        viewFullDetailUrl: (state: any, props?: any) => string | undefined
    }
    sharedListeners: {}
    values: {
        state: DefinitionPopupState
        localDefinition: Partial<TaxonomicDefinitionTypes>
        definition: Partial<TaxonomicDefinitionTypes>
        definitionLoading: boolean
        hasAvailableFeature: (feature: AvailableFeature) => boolean
        type: any
        onMouseLeave: any
        hideView: any
        hideEdit: any
        openDetailInNewTab: any
        singularType: string
        dirty: boolean
        hasTaxonomyFeatures: boolean
        isViewable: boolean
        isAction: boolean
        isEvent: boolean
        isProperty: any
        isCohort: boolean
        isElement: boolean
        viewFullDetailUrl: string | undefined
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        type: (arg: any) => any
        onMouseLeave: (arg: any) => any
        hideView: (arg: any) => any
        hideEdit: (arg: any) => any
        openDetailInNewTab: (arg: any) => any
        singularType: (type: any) => string
        dirty: (
            state: DefinitionPopupState,
            definition: Partial<TaxonomicDefinitionTypes>,
            localDefinition: Partial<TaxonomicDefinitionTypes>
        ) => boolean
        hasTaxonomyFeatures: (hasAvailableFeature: (feature: AvailableFeature) => boolean) => boolean
        isViewable: (type: any) => boolean
        isAction: (type: any) => boolean
        isEvent: (type: any) => boolean
        isProperty: (type: any) => any
        isCohort: (type: any) => boolean
        isElement: (type: any) => boolean
        viewFullDetailUrl: (
            definition: Partial<TaxonomicDefinitionTypes>,
            isAction: boolean,
            isEvent: boolean,
            isProperty: any,
            isCohort: boolean
        ) => string | undefined
    }
}
