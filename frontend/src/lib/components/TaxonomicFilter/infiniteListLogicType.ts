// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:36 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InfiniteListLogicProps, ListFuse, ListStorage, LoaderOptions, TaxonomicDefinitionTypes, TaxonomicFilterGroup, TaxonomicFilterGroupType, TaxonomicFilterValue } from './types'
import type { CohortType, EventDefinition, FeatureFlagType } from '../../../types'
import type { RenderedRows } from '../../../../../node_modules/@types/react-virtualized/dist/es/List.d'

export interface infiniteListLogicType extends Logic {
    actionCreators: {
        setSearchQuery: (searchQuery: string) => {
            type: 'set search query (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                searchQuery: string
            }
        }
        selectItem: (
            group: TaxonomicFilterGroup,
            value: TaxonomicFilterValue | null,
            item: any
        ) => {
            type: 'select item (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                group: TaxonomicFilterGroup
                value: TaxonomicFilterValue | null
                item: any
            }
        }
        infiniteListResultsReceived: (
            groupType: TaxonomicFilterGroupType,
            results: ListStorage
        ) => {
            type: 'infinite list results received (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                groupType: TaxonomicFilterGroupType
                results: ListStorage
            }
        }
        selectSelected: () => {
            type: 'select selected (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                value: true
            }
        }
        moveUp: () => {
            type: 'move up (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                value: true
            }
        }
        moveDown: () => {
            type: 'move down (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                value: true
            }
        }
        setIndex: (index: number) => {
            type: 'set index (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                index: number
            }
        }
        setLimit: (limit: number) => {
            type: 'set limit (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                limit: number
            }
        }
        onRowsRendered: (rowInfo: RenderedRows) => {
            type: 'on rows rendered (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                rowInfo: RenderedRows
            }
        }
        loadRemoteItems: (options: LoaderOptions) => {
            type: 'load remote items (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: LoaderOptions
        }
        updateRemoteItem: (item: TaxonomicDefinitionTypes) => {
            type: 'update remote item (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                item: TaxonomicDefinitionTypes
            }
        }
        expand: () => {
            type: 'expand (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                value: true
            }
        }
        loadRemoteItemsSuccess: (
            remoteItems: ListStorage,
            payload?: LoaderOptions
        ) => {
            type: 'load remote items success (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                remoteItems: ListStorage
                payload?: LoaderOptions
            }
        }
        loadRemoteItemsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load remote items failure (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateRemoteItemSuccess: (
            remoteItems: {
                results: TaxonomicDefinitionTypes[]
                searchQuery?: string | undefined
                count: number
                expandedCount?: number | undefined
                queryChanged?: boolean | undefined
                first?: boolean | undefined
            },
            payload?: {
                item: TaxonomicDefinitionTypes
            }
        ) => {
            type: 'update remote item success (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                remoteItems: {
                    results: TaxonomicDefinitionTypes[]
                    searchQuery?: string | undefined
                    count: number
                    expandedCount?: number | undefined
                    queryChanged?: boolean | undefined
                    first?: boolean | undefined
                }
                payload?: {
                    item: TaxonomicDefinitionTypes
                }
            }
        }
        updateRemoteItemFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update remote item failure (lib.components.TaxonomicFilter.infiniteListLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set search query (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'setSearchQuery'
        'select item (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'selectItem'
        'infinite list results received (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'infiniteListResultsReceived'
        'select selected (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'selectSelected'
        'move up (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'moveUp'
        'move down (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'moveDown'
        'set index (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'setIndex'
        'set limit (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'setLimit'
        'on rows rendered (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'onRowsRendered'
        'load remote items (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'loadRemoteItems'
        'update remote item (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'updateRemoteItem'
        'expand (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'expand'
        'load remote items success (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'loadRemoteItemsSuccess'
        'load remote items failure (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'loadRemoteItemsFailure'
        'update remote item success (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'updateRemoteItemSuccess'
        'update remote item failure (lib.components.TaxonomicFilter.infiniteListLogic.*)': 'updateRemoteItemFailure'
    }
    actionTypes: {
        setSearchQuery: 'set search query (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        selectItem: 'select item (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        infiniteListResultsReceived: 'infinite list results received (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        selectSelected: 'select selected (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        moveUp: 'move up (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        moveDown: 'move down (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        setIndex: 'set index (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        setLimit: 'set limit (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        onRowsRendered: 'on rows rendered (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        loadRemoteItems: 'load remote items (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        updateRemoteItem: 'update remote item (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        expand: 'expand (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        loadRemoteItemsSuccess: 'load remote items success (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        loadRemoteItemsFailure: 'load remote items failure (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        updateRemoteItemSuccess: 'update remote item success (lib.components.TaxonomicFilter.infiniteListLogic.*)'
        updateRemoteItemFailure: 'update remote item failure (lib.components.TaxonomicFilter.infiniteListLogic.*)'
    }
    actions: {
        setSearchQuery: (searchQuery: string) => void
        selectItem: (group: TaxonomicFilterGroup, value: TaxonomicFilterValue | null, item: any) => void
        infiniteListResultsReceived: (groupType: TaxonomicFilterGroupType, results: ListStorage) => void
        selectSelected: () => void
        moveUp: () => void
        moveDown: () => void
        setIndex: (index: number) => void
        setLimit: (limit: number) => void
        onRowsRendered: (rowInfo: RenderedRows) => void
        loadRemoteItems: (options: LoaderOptions) => void
        updateRemoteItem: (item: TaxonomicDefinitionTypes) => void
        expand: () => void
        loadRemoteItemsSuccess: (remoteItems: ListStorage, payload?: LoaderOptions) => void
        loadRemoteItemsFailure: (error: string, errorObject?: any) => void
        updateRemoteItemSuccess: (
            remoteItems: {
                results: TaxonomicDefinitionTypes[]
                searchQuery?: string | undefined
                count: number
                expandedCount?: number | undefined
                queryChanged?: boolean | undefined
                first?: boolean | undefined
            },
            payload?: {
                item: TaxonomicDefinitionTypes
            }
        ) => void
        updateRemoteItemFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        index: number
        showPopover: boolean
        limit: number
        startIndex: number
        stopIndex: number
        isExpanded: boolean
        remoteItems: ListStorage
        remoteItemsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        onRowsRendered: ((
            action: {
                type: 'on rows rendered (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    rowInfo: RenderedRows
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSearchQuery: ((
            action: {
                type: 'set search query (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    searchQuery: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        moveUp: ((
            action: {
                type: 'move up (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        moveDown: ((
            action: {
                type: 'move down (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        selectSelected: ((
            action: {
                type: 'select selected (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadRemoteItemsSuccess: ((
            action: {
                type: 'load remote items success (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    remoteItems: ListStorage
                    payload?: LoaderOptions
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        expand: ((
            action: {
                type: 'expand (lib.components.TaxonomicFilter.infiniteListLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'TaxonomicFilter', 'infiniteListLogic', '*']
    pathString: 'lib.components.TaxonomicFilter.infiniteListLogic.*'
    props: InfiniteListLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        index: number
        showPopover: boolean
        limit: number
        startIndex: number
        stopIndex: number
        isExpanded: boolean
        remoteItems: ListStorage
        remoteItemsLoading: boolean
    }
    reducers: {
        index: (state: number, action: any, fullState: any) => number
        showPopover: (state: boolean, action: any, fullState: any) => boolean
        limit: (state: number, action: any, fullState: any) => number
        startIndex: (state: number, action: any, fullState: any) => number
        stopIndex: (state: number, action: any, fullState: any) => number
        isExpanded: (state: boolean, action: any, fullState: any) => boolean
        remoteItems: (state: ListStorage, action: any, fullState: any) => ListStorage
        remoteItemsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        index: number
        showPopover: boolean
        limit: number
        startIndex: number
        stopIndex: number
        isExpanded: boolean
        remoteItems: ListStorage
        remoteItemsLoading: boolean
    }
    selectors: {
        index: (state: any, props?: any) => number
        showPopover: (state: any, props?: any) => boolean
        limit: (state: any, props?: any) => number
        startIndex: (state: any, props?: any) => number
        stopIndex: (state: any, props?: any) => number
        isExpanded: (state: any, props?: any) => boolean
        remoteItems: (state: any, props?: any) => ListStorage
        remoteItemsLoading: (state: any, props?: any) => boolean
        searchQuery: (state: any, props?: any) => string
        taxonomicGroups: (state: any, props?: any) => TaxonomicFilterGroup[]
        value: (state: any, props?: any) => any
        groupType: (state: any, props?: any) => any
        featureFlags: (state: any, props?: any) => FeatureFlagType[]
        listGroupType: (state: any, props?: any) => any
        isLoading: (state: any, props?: any) => boolean
        group: (state: any, props?: any) => TaxonomicFilterGroup
        remoteEndpoint: (state: any, props?: any) => string | null
        scopedRemoteEndpoint: (state: any, props?: any) => string | null
        isExpandable: (state: any, props?: any) => boolean
        isExpandableButtonSelected: (state: any, props?: any) => boolean
        isRemoteDataSource: (state: any, props?: any) => boolean
        rawLocalItems: (state: any, props?: any) => (EventDefinition | CohortType)[]
        fuse: (state: any, props?: any) => ListFuse
        localItems: (state: any, props?: any) => ListStorage
        items: (state: any, props?: any) => ListStorage
        totalResultCount: (state: any, props?: any) => number
        totalExtraCount: (state: any, props?: any) => 1 | 0
        totalListCount: (state: any, props?: any) => number
        expandedCount: (state: any, props?: any) => number
        results: (state: any, props?: any) => TaxonomicDefinitionTypes[]
        selectedItem: (state: any, props?: any) => TaxonomicDefinitionTypes | undefined
        selectedItemValue: (state: any, props?: any) => TaxonomicFilterValue | null
        selectedItemInView: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        index: number
        showPopover: boolean
        limit: number
        startIndex: number
        stopIndex: number
        isExpanded: boolean
        remoteItems: ListStorage
        remoteItemsLoading: boolean
        searchQuery: string
        taxonomicGroups: TaxonomicFilterGroup[]
        value: any
        groupType: any
        featureFlags: FeatureFlagType[]
        listGroupType: any
        isLoading: boolean
        group: TaxonomicFilterGroup
        remoteEndpoint: string | null
        scopedRemoteEndpoint: string | null
        isExpandable: boolean
        isExpandableButtonSelected: boolean
        isRemoteDataSource: boolean
        rawLocalItems: (EventDefinition | CohortType)[]
        fuse: ListFuse
        localItems: ListStorage
        items: ListStorage
        totalResultCount: number
        totalExtraCount: 1 | 0
        totalListCount: number
        expandedCount: number
        results: TaxonomicDefinitionTypes[]
        selectedItem: TaxonomicDefinitionTypes | undefined
        selectedItemValue: TaxonomicFilterValue | null
        selectedItemInView: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        listGroupType: (arg: any) => any
        isLoading: (remoteItemsLoading: boolean) => boolean
        group: (listGroupType: any, taxonomicGroups: TaxonomicFilterGroup[]) => TaxonomicFilterGroup
        remoteEndpoint: (group: TaxonomicFilterGroup) => string | null
        scopedRemoteEndpoint: (group: TaxonomicFilterGroup) => string | null
        isExpandable: (
            remoteEndpoint: string | null,
            scopedRemoteEndpoint: string | null,
            remoteItems: ListStorage
        ) => boolean
        isExpandableButtonSelected: (isExpandable: boolean, index: number, totalListCount: number) => boolean
        isRemoteDataSource: (remoteEndpoint: string | null) => boolean
        rawLocalItems: (arg: any) => (EventDefinition | CohortType)[]
        fuse: (rawLocalItems: (EventDefinition | CohortType)[], group: TaxonomicFilterGroup) => ListFuse
        localItems: (
            rawLocalItems: (EventDefinition | CohortType)[],
            searchQuery: string,
            fuse: ListFuse
        ) => ListStorage
        items: (isRemoteDataSource: boolean, remoteItems: ListStorage, localItems: ListStorage) => ListStorage
        totalResultCount: (items: ListStorage) => number
        totalExtraCount: (isExpandable: boolean) => 1 | 0
        totalListCount: (totalResultCount: number, totalExtraCount: 0 | 1) => number
        expandedCount: (items: ListStorage) => number
        results: (items: ListStorage) => TaxonomicDefinitionTypes[]
        selectedItem: (index: number, items: ListStorage) => TaxonomicDefinitionTypes | undefined
        selectedItemValue: (
            selectedItem: TaxonomicDefinitionTypes | undefined,
            group: TaxonomicFilterGroup
        ) => TaxonomicFilterValue | null
        selectedItemInView: (index: number, startIndex: number, stopIndex: number) => boolean
    }
}
