// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ColumnConfiguratorLogicProps } from './columnConfiguratorLogic'

export interface columnConfiguratorLogicType extends Logic {
    actionCreators: {
        selectColumn: (column: string) => {
            type: 'select column (lib.components.ResizableTable.columnConfiguratorLogic)'
            payload: {
                column: string
            }
        }
        unselectColumn: (column: string) => {
            type: 'unselect column (lib.components.ResizableTable.columnConfiguratorLogic)'
            payload: {
                column: string
            }
        }
        resetColumns: (columns: string[]) => {
            type: 'reset columns (lib.components.ResizableTable.columnConfiguratorLogic)'
            payload: {
                columns: string[]
            }
        }
        save: () => {
            type: 'save (lib.components.ResizableTable.columnConfiguratorLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'select column (lib.components.ResizableTable.columnConfiguratorLogic)': 'selectColumn'
        'unselect column (lib.components.ResizableTable.columnConfiguratorLogic)': 'unselectColumn'
        'reset columns (lib.components.ResizableTable.columnConfiguratorLogic)': 'resetColumns'
        'save (lib.components.ResizableTable.columnConfiguratorLogic)': 'save'
    }
    actionTypes: {
        selectColumn: 'select column (lib.components.ResizableTable.columnConfiguratorLogic)'
        unselectColumn: 'unselect column (lib.components.ResizableTable.columnConfiguratorLogic)'
        resetColumns: 'reset columns (lib.components.ResizableTable.columnConfiguratorLogic)'
        save: 'save (lib.components.ResizableTable.columnConfiguratorLogic)'
    }
    actions: {
        selectColumn: (column: string) => void
        unselectColumn: (column: string) => void
        resetColumns: (columns: string[]) => void
        save: () => void
    }
    defaults: {
        selectedColumns: string[]
    }
    events: {}
    key: undefined
    listeners: {
        save: ((
            action: {
                type: 'save (lib.components.ResizableTable.columnConfiguratorLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'ResizableTable', 'columnConfiguratorLogic']
    pathString: 'lib.components.ResizableTable.columnConfiguratorLogic'
    props: ColumnConfiguratorLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        selectedColumns: string[]
    }
    reducers: {
        selectedColumns: (state: string[], action: any, fullState: any) => string[]
    }
    selector: (state: any) => {
        selectedColumns: string[]
    }
    selectors: {
        selectedColumns: (state: any, props?: any) => string[]
    }
    sharedListeners: {}
    values: {
        selectedColumns: string[]
    }
    _isKea: true
    _isKeaWithKey: false
}
