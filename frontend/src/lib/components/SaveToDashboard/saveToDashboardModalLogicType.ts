// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:15 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Fuse, SaveToDashboardModalLogicProps } from './saveToDashboardModalLogic'
import type { DashboardType, InsightModel, InsightShortId, InsightType } from '../../../types'

export interface saveToDashboardModalLogicType extends Logic {
    actionCreators: {
        updateInsight: (
            insight: Partial<InsightModel>,
            callback?: (insight: Partial<InsightModel>) => void
        ) => {
            type: 'update insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        }
        updateInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        ) => {
            type: 'update insight success (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    insight: Partial<InsightModel>
                    callback: ((insight: Partial<InsightModel>) => void) | undefined
                }
            }
        }
        updateInsightFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update insight failure (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        reportCreatedDashboardFromModal: () => {
            type: 'report created dashboard from modal (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                value: true
            }
        }
        reportSavedInsightToDashboard: () => {
            type: 'report saved insight to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                value: true
            }
        }
        reportRemovedInsightFromDashboard: () => {
            type: 'report removed insight from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                value: true
            }
        }
        addNewDashboard: () => {
            type: 'add new dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                value: true
            }
        }
        setDashboardId: (id: number) => {
            type: 'set dashboard id (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                id: number
            }
        }
        setSearchQuery: (query: string) => {
            type: 'set search query (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                query: string
            }
        }
        setInsight: (insight: InsightType) => {
            type: 'set insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                insight: InsightType
            }
        }
        setScrollIndex: (index: number) => {
            type: 'set scroll index (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                index: number
            }
        }
        addToDashboard: (
            insight: Partial<InsightModel>,
            dashboardId: number
        ) => {
            type: 'add to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                insight: Partial<InsightModel>
                dashboardId: number
            }
        }
        removeFromDashboard: (
            insight: Partial<InsightModel>,
            dashboardId: number
        ) => {
            type: 'remove from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
            payload: {
                insight: Partial<InsightModel>
                dashboardId: number
            }
        }
    }
    actionKeys: {
        'update insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'updateInsight'
        'update insight success (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'updateInsightSuccess'
        'update insight failure (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'updateInsightFailure'
        'report created dashboard from modal (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'reportCreatedDashboardFromModal'
        'report saved insight to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'reportSavedInsightToDashboard'
        'report removed insight from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'reportRemovedInsightFromDashboard'
        'add new dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'addNewDashboard'
        'set dashboard id (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'setDashboardId'
        'set search query (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'setSearchQuery'
        'set insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'setInsight'
        'set scroll index (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'setScrollIndex'
        'add to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'addToDashboard'
        'remove from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)': 'removeFromDashboard'
    }
    actionTypes: {
        updateInsight: 'update insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        updateInsightSuccess: 'update insight success (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        updateInsightFailure: 'update insight failure (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        reportCreatedDashboardFromModal: 'report created dashboard from modal (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        reportSavedInsightToDashboard: 'report saved insight to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        reportRemovedInsightFromDashboard: 'report removed insight from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        addNewDashboard: 'add new dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        setDashboardId: 'set dashboard id (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        setSearchQuery: 'set search query (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        setInsight: 'set insight (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        setScrollIndex: 'set scroll index (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        addToDashboard: 'add to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
        removeFromDashboard: 'remove from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
    }
    actions: {
        updateInsight: (insight: Partial<InsightModel>, callback?: (insight: Partial<InsightModel>) => void) => void
        updateInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        ) => void
        updateInsightFailure: (error: string, errorObject?: any) => void
        reportCreatedDashboardFromModal: () => void
        reportSavedInsightToDashboard: () => void
        reportRemovedInsightFromDashboard: () => void
        addNewDashboard: () => void
        setDashboardId: (id: number) => void
        setSearchQuery: (query: string) => void
        setInsight: (insight: InsightType) => void
        setScrollIndex: (index: number) => void
        addToDashboard: (insight: Partial<InsightModel>, dashboardId: number) => void
        removeFromDashboard: (insight: Partial<InsightModel>, dashboardId: number) => void
    }
    defaults: {
        _dashboardId: null | number
        searchQuery: string
        scrollIndex: number
        dashboardWithActiveAPICall: number | null
    }
    events: {}
    key: InsightShortId
    listeners: {
        setDashboardId: ((
            action: {
                type: 'set dashboard id (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
                payload: {
                    id: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addNewDashboard: ((
            action: {
                type: 'add new dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'add dashboard success (models.dashboardsModel)': ((
            action: {
                type: 'add dashboard success (models.dashboardsModel)'
                payload: {
                    dashboard: DashboardType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        addToDashboard: ((
            action: {
                type: 'add to dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
                payload: {
                    insight: Partial<InsightModel>
                    dashboardId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeFromDashboard: ((
            action: {
                type: 'remove from dashboard (lib.components.SaveToDashboard.saveToDashboardModalLogic)'
                payload: {
                    insight: Partial<InsightModel>
                    dashboardId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'SaveToDashboard', 'saveToDashboardModalLogic']
    pathString: 'lib.components.SaveToDashboard.saveToDashboardModalLogic'
    props: SaveToDashboardModalLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        _dashboardId: null | number
        searchQuery: string
        scrollIndex: number
        dashboardWithActiveAPICall: number | null
    }
    reducers: {
        _dashboardId: (state: null | number, action: any, fullState: any) => null | number
        searchQuery: (state: string, action: any, fullState: any) => string
        scrollIndex: (state: number, action: any, fullState: any) => number
        dashboardWithActiveAPICall: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        _dashboardId: null | number
        searchQuery: string
        scrollIndex: number
        dashboardWithActiveAPICall: number | null
    }
    selectors: {
        _dashboardId: (state: any, props?: any) => null | number
        searchQuery: (state: any, props?: any) => string
        scrollIndex: (state: any, props?: any) => number
        dashboardWithActiveAPICall: (state: any, props?: any) => number | null
        dashboardId: (state: any, props?: any) => any
        dashboardsFuse: (state: any, props?: any) => Fuse
        filteredDashboards: (state: any, props?: any) => DashboardType[]
        currentDashboards: (state: any, props?: any) => DashboardType[]
        availableDashboards: (state: any, props?: any) => DashboardType[]
        orderedDashboards: (state: any, props?: any) => DashboardType[]
    }
    sharedListeners: {}
    values: {
        _dashboardId: null | number
        searchQuery: string
        scrollIndex: number
        dashboardWithActiveAPICall: number | null
        dashboardId: any
        dashboardsFuse: Fuse
        filteredDashboards: DashboardType[]
        currentDashboards: DashboardType[]
        availableDashboards: DashboardType[]
        orderedDashboards: DashboardType[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        dashboardId: (
            _dashboardId: number | null,
            lastDashboardId: number | null,
            nameSortedDashboards: DashboardType[],
            arg: any
        ) => any
        dashboardsFuse: (nameSortedDashboards: DashboardType[]) => Fuse
        filteredDashboards: (
            searchQuery: string,
            dashboardsFuse: Fuse,
            nameSortedDashboards: DashboardType[]
        ) => DashboardType[]
        currentDashboards: (filteredDashboards: DashboardType[], arg: any) => DashboardType[]
        availableDashboards: (filteredDashboards: DashboardType[], arg: any) => DashboardType[]
        orderedDashboards: (currentDashboards: DashboardType[], availableDashboards: DashboardType[]) => DashboardType[]
    }
    __keaTypeGenInternalReducerActions: {
        'add dashboard success (models.dashboardsModel)': (dashboard: DashboardType) => {
            type: 'add dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType
            }
        }
    }
}
