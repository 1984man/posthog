// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:15 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FilterType, InsightLogicProps, ItemMode } from '../../../types'

export interface compareFilterLogicType extends Logic {
    actionCreators: {
        setFilters: (
            filters: Partial<FilterType>,
            insightMode?: ItemMode
        ) => {
            type: 'set filters (lib.components.CompareFilter.compareFilterLogic.*)'
            payload: {
                filters: Partial<FilterType>
                insightMode: ItemMode | undefined
            }
        }
        setCompare: (compare: boolean) => {
            type: 'set compare (lib.components.CompareFilter.compareFilterLogic.*)'
            payload: {
                compare: boolean
            }
        }
        toggleCompare: () => {
            type: 'toggle compare (lib.components.CompareFilter.compareFilterLogic.*)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'set filters (lib.components.CompareFilter.compareFilterLogic.*)': 'setFilters'
        'set compare (lib.components.CompareFilter.compareFilterLogic.*)': 'setCompare'
        'toggle compare (lib.components.CompareFilter.compareFilterLogic.*)': 'toggleCompare'
    }
    actionTypes: {
        setFilters: 'set filters (lib.components.CompareFilter.compareFilterLogic.*)'
        setCompare: 'set compare (lib.components.CompareFilter.compareFilterLogic.*)'
        toggleCompare: 'toggle compare (lib.components.CompareFilter.compareFilterLogic.*)'
    }
    actions: {
        setFilters: (filters: Partial<FilterType>, insightMode?: ItemMode) => void
        setCompare: (compare: boolean) => void
        toggleCompare: () => void
    }
    defaults: {}
    events: {}
    key: string | number
    listeners: {
        setCompare: ((
            action: {
                type: 'set compare (lib.components.CompareFilter.compareFilterLogic.*)'
                payload: {
                    compare: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleCompare: ((
            action: {
                type: 'toggle compare (lib.components.CompareFilter.compareFilterLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'CompareFilter', 'compareFilterLogic', '*']
    pathString: 'lib.components.CompareFilter.compareFilterLogic.*'
    props: InsightLogicProps
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        filters: (state: any, props?: any) => Partial<FilterType>
        canEditInsight: (state: any, props?: any) => boolean
        compare: (state: any, props?: any) => boolean
        disabled: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        filters: Partial<FilterType>
        canEditInsight: boolean
        compare: boolean
        disabled: boolean
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        compare: (
            filters: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FilterType>
        ) => boolean
        disabled: (
            filters: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FilterType>,
            canEditInsight: boolean
        ) => boolean
    }
}
