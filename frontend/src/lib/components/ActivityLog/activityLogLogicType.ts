// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActivityLogProps } from './ActivityLog'
import type { CountedPaginatedResponse } from '../../api'
import type { HumanizedActivityLogItem } from './humanizeActivity'
import type { PaginationManual } from '../PaginationControl/index'

export interface activityLogLogicType extends Logic {
    actionCreators: {
        setPage: (page: number) => {
            type: 'set page (lib.components.ActivityLog.activitylog.logic.*)'
            payload: {
                page: number
            }
        }
        fetchNextPage: () => {
            type: 'fetch next page (lib.components.ActivityLog.activitylog.logic.*)'
            payload: any
        }
        fetchNextPageSuccess: (
            nextPage: CountedPaginatedResponse,
            payload?: any
        ) => {
            type: 'fetch next page success (lib.components.ActivityLog.activitylog.logic.*)'
            payload: {
                nextPage: CountedPaginatedResponse
                payload?: any
            }
        }
        fetchNextPageFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'fetch next page failure (lib.components.ActivityLog.activitylog.logic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        fetchPreviousPage: () => {
            type: 'fetch previous page (lib.components.ActivityLog.activitylog.logic.*)'
            payload: any
        }
        fetchPreviousPageSuccess: (
            previousPage: CountedPaginatedResponse,
            payload?: any
        ) => {
            type: 'fetch previous page success (lib.components.ActivityLog.activitylog.logic.*)'
            payload: {
                previousPage: CountedPaginatedResponse
                payload?: any
            }
        }
        fetchPreviousPageFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'fetch previous page failure (lib.components.ActivityLog.activitylog.logic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set page (lib.components.ActivityLog.activitylog.logic.*)': 'setPage'
        'fetch next page (lib.components.ActivityLog.activitylog.logic.*)': 'fetchNextPage'
        'fetch next page success (lib.components.ActivityLog.activitylog.logic.*)': 'fetchNextPageSuccess'
        'fetch next page failure (lib.components.ActivityLog.activitylog.logic.*)': 'fetchNextPageFailure'
        'fetch previous page (lib.components.ActivityLog.activitylog.logic.*)': 'fetchPreviousPage'
        'fetch previous page success (lib.components.ActivityLog.activitylog.logic.*)': 'fetchPreviousPageSuccess'
        'fetch previous page failure (lib.components.ActivityLog.activitylog.logic.*)': 'fetchPreviousPageFailure'
    }
    actionTypes: {
        setPage: 'set page (lib.components.ActivityLog.activitylog.logic.*)'
        fetchNextPage: 'fetch next page (lib.components.ActivityLog.activitylog.logic.*)'
        fetchNextPageSuccess: 'fetch next page success (lib.components.ActivityLog.activitylog.logic.*)'
        fetchNextPageFailure: 'fetch next page failure (lib.components.ActivityLog.activitylog.logic.*)'
        fetchPreviousPage: 'fetch previous page (lib.components.ActivityLog.activitylog.logic.*)'
        fetchPreviousPageSuccess: 'fetch previous page success (lib.components.ActivityLog.activitylog.logic.*)'
        fetchPreviousPageFailure: 'fetch previous page failure (lib.components.ActivityLog.activitylog.logic.*)'
    }
    actions: {
        setPage: (page: number) => void
        fetchNextPage: () => void
        fetchNextPageSuccess: (nextPage: CountedPaginatedResponse, payload?: any) => void
        fetchNextPageFailure: (error: string, errorObject?: any) => void
        fetchPreviousPage: () => void
        fetchPreviousPageSuccess: (previousPage: CountedPaginatedResponse, payload?: any) => void
        fetchPreviousPageFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        nextPage: CountedPaginatedResponse
        nextPageLoading: boolean
        previousPage: CountedPaginatedResponse
        previousPageLoading: boolean
        page: number
        humanizedActivity: HumanizedActivityLogItem[]
        totalCount: number | null
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        setPage: ((
            action: {
                type: 'set page (lib.components.ActivityLog.activitylog.logic.*)'
                payload: {
                    page: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'ActivityLog', 'activitylog', 'logic', '*']
    pathString: 'lib.components.ActivityLog.activitylog.logic.*'
    props: ActivityLogProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        nextPage: CountedPaginatedResponse
        nextPageLoading: boolean
        previousPage: CountedPaginatedResponse
        previousPageLoading: boolean
        page: number
        humanizedActivity: HumanizedActivityLogItem[]
        totalCount: number | null
    }
    reducers: {
        nextPage: (state: CountedPaginatedResponse, action: any, fullState: any) => CountedPaginatedResponse
        nextPageLoading: (state: boolean, action: any, fullState: any) => boolean
        previousPage: (state: CountedPaginatedResponse, action: any, fullState: any) => CountedPaginatedResponse
        previousPageLoading: (state: boolean, action: any, fullState: any) => boolean
        page: (state: number, action: any, fullState: any) => number
        humanizedActivity: (
            state: HumanizedActivityLogItem[],
            action: any,
            fullState: any
        ) => HumanizedActivityLogItem[]
        totalCount: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        nextPage: CountedPaginatedResponse
        nextPageLoading: boolean
        previousPage: CountedPaginatedResponse
        previousPageLoading: boolean
        page: number
        humanizedActivity: HumanizedActivityLogItem[]
        totalCount: number | null
    }
    selectors: {
        nextPage: (state: any, props?: any) => CountedPaginatedResponse
        nextPageLoading: (state: any, props?: any) => boolean
        previousPage: (state: any, props?: any) => CountedPaginatedResponse
        previousPageLoading: (state: any, props?: any) => boolean
        page: (state: any, props?: any) => number
        humanizedActivity: (state: any, props?: any) => HumanizedActivityLogItem[]
        totalCount: (state: any, props?: any) => number | null
        pagination: (state: any, props?: any) => PaginationManual
    }
    sharedListeners: {}
    values: {
        nextPage: CountedPaginatedResponse
        nextPageLoading: boolean
        previousPage: CountedPaginatedResponse
        previousPageLoading: boolean
        page: number
        humanizedActivity: HumanizedActivityLogItem[]
        totalCount: number | null
        pagination: PaginationManual
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        pagination: (page: number, totalCount: number | null) => PaginationManual
    }
}
