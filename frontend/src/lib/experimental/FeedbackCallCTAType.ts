// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface feedbackCallLogicType extends Logic {
    actionCreators: {
        reportAndDismiss: (result: 'call' | 'more-info' | 'not-interested' | 'dismiss') => {
            type: 'report and dismiss (lib.experimental.FeedbackCallCTA)'
            payload: {
                result: 'dismiss' | 'call' | 'more-info' | 'not-interested'
            }
        }
        show: () => {
            type: 'show (lib.experimental.FeedbackCallCTA)'
            payload: {
                value: true
            }
        }
        hide: () => {
            type: 'hide (lib.experimental.FeedbackCallCTA)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'report and dismiss (lib.experimental.FeedbackCallCTA)': 'reportAndDismiss'
        'show (lib.experimental.FeedbackCallCTA)': 'show'
        'hide (lib.experimental.FeedbackCallCTA)': 'hide'
    }
    actionTypes: {
        reportAndDismiss: 'report and dismiss (lib.experimental.FeedbackCallCTA)'
        show: 'show (lib.experimental.FeedbackCallCTA)'
        hide: 'hide (lib.experimental.FeedbackCallCTA)'
    }
    actions: {
        reportAndDismiss: (result: 'call' | 'more-info' | 'not-interested' | 'dismiss') => void
        show: () => void
        hide: () => void
    }
    defaults: {
        hidden: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        reportAndDismiss: ((
            action: {
                type: 'report and dismiss (lib.experimental.FeedbackCallCTA)'
                payload: {
                    result: 'dismiss' | 'call' | 'more-info' | 'not-interested'
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'experimental', 'FeedbackCallCTA']
    pathString: 'lib.experimental.FeedbackCallCTA'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        hidden: boolean
    }
    reducers: {
        hidden: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        hidden: boolean
    }
    selectors: {
        hidden: (state: any, props?: any) => boolean
        featureFlagGroup: (state: any, props?: any) => null | 'control' | 'variant-0' | 'variant-1'
        copy: (state: any, props?: any) => { title: string; description: string } | null
    }
    sharedListeners: {}
    values: {
        hidden: boolean
        featureFlagGroup: null | 'control' | 'variant-0' | 'variant-1'
        copy: { title: string; description: string } | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        featureFlagGroup: (
            featureFlags: import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet
        ) => null | 'control' | 'variant-0' | 'variant-1'
        copy: (
            featureFlagGroup: 'control' | 'variant-0' | 'variant-1' | null
        ) => { title: string; description: string } | null
    }
}
