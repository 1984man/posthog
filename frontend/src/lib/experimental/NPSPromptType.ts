// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NPSPayload, Step } from './NPSPrompt'

export interface npsLogicType extends Logic {
    actionCreators: {
        show: () => {
            type: 'show (lib.experimental.NPSPrompt)'
            payload: {
                value: true
            }
        }
        hide: () => {
            type: 'hide (lib.experimental.NPSPrompt)'
            payload: {
                value: true
            }
        }
        setStep: (step: Step) => {
            type: 'set step (lib.experimental.NPSPrompt)'
            payload: {
                step: Step
            }
        }
        stepBack: () => {
            type: 'step back (lib.experimental.NPSPrompt)'
            payload: {
                value: true
            }
        }
        setPayload: (payload: NPSPayload | null) => {
            type: 'set payload (lib.experimental.NPSPrompt)'
            payload: {
                payload: NPSPayload | null
            }
        }
        submit: (completed?: boolean) => {
            type: 'submit (lib.experimental.NPSPrompt)'
            payload: {
                completed: boolean | undefined
            }
        }
        dismiss: () => {
            type: 'dismiss (lib.experimental.NPSPrompt)'
            payload: {
                value: true
            }
        }
        send: (result: 'completed' | 'partial' | 'dismissed') => {
            type: 'send (lib.experimental.NPSPrompt)'
            payload: {
                result: 'completed' | 'partial' | 'dismissed'
            }
        }
    }
    actionKeys: {
        'show (lib.experimental.NPSPrompt)': 'show'
        'hide (lib.experimental.NPSPrompt)': 'hide'
        'set step (lib.experimental.NPSPrompt)': 'setStep'
        'step back (lib.experimental.NPSPrompt)': 'stepBack'
        'set payload (lib.experimental.NPSPrompt)': 'setPayload'
        'submit (lib.experimental.NPSPrompt)': 'submit'
        'dismiss (lib.experimental.NPSPrompt)': 'dismiss'
        'send (lib.experimental.NPSPrompt)': 'send'
    }
    actionTypes: {
        show: 'show (lib.experimental.NPSPrompt)'
        hide: 'hide (lib.experimental.NPSPrompt)'
        setStep: 'set step (lib.experimental.NPSPrompt)'
        stepBack: 'step back (lib.experimental.NPSPrompt)'
        setPayload: 'set payload (lib.experimental.NPSPrompt)'
        submit: 'submit (lib.experimental.NPSPrompt)'
        dismiss: 'dismiss (lib.experimental.NPSPrompt)'
        send: 'send (lib.experimental.NPSPrompt)'
    }
    actions: {
        show: () => void
        hide: () => void
        setStep: (step: Step) => void
        stepBack: () => void
        setPayload: (payload: NPSPayload | null) => void
        submit: (completed?: boolean) => void
        dismiss: () => void
        send: (result: 'completed' | 'partial' | 'dismissed') => void
    }
    defaults: {
        step: Step
        hidden: boolean
        payload: NPSPayload | null
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        stepBack: ((
            action: {
                type: 'step back (lib.experimental.NPSPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        dismiss: ((
            action: {
                type: 'dismiss (lib.experimental.NPSPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        submit: ((
            action: {
                type: 'submit (lib.experimental.NPSPrompt)'
                payload: {
                    completed: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        send: ((
            action: {
                type: 'send (lib.experimental.NPSPrompt)'
                payload: {
                    result: 'completed' | 'partial' | 'dismissed'
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        show: ((
            action: {
                type: 'show (lib.experimental.NPSPrompt)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'experimental', 'NPSPrompt']
    pathString: 'lib.experimental.NPSPrompt'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        step: Step
        hidden: boolean
        payload: NPSPayload | null
    }
    reducers: {
        step: (state: Step, action: any, fullState: any) => Step
        hidden: (state: boolean, action: any, fullState: any) => boolean
        payload: (state: NPSPayload | null, action: any, fullState: any) => NPSPayload | null
    }
    selector: (state: any) => {
        step: Step
        hidden: boolean
        payload: NPSPayload | null
    }
    selectors: {
        step: (state: any, props?: any) => Step
        hidden: (state: any, props?: any) => boolean
        payload: (state: any, props?: any) => NPSPayload | null
        featureFlagEnabled: (state: any, props?: any) => string | boolean
        userIsOldEnough: (state: any, props?: any) => boolean | null
        npsPromptEnabled: (state: any, props?: any) => boolean | '' | null
    }
    sharedListeners: {}
    values: {
        step: Step
        hidden: boolean
        payload: NPSPayload | null
        featureFlagEnabled: string | boolean
        userIsOldEnough: boolean | null
        npsPromptEnabled: boolean | '' | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        featureFlagEnabled: (
            featureFlags: import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/logic/featureFlagLogic').FeatureFlagsSet
        ) => string | boolean
        userIsOldEnough: (
            user: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').UserType | null
        ) => boolean | null
        npsPromptEnabled: (featureFlagEnabled: string | boolean, userIsOldEnough: boolean | null) => boolean | '' | null
    }
}
