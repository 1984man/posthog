// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnnotationType, AvailableFeature, DashboardMode, DashboardType, EntityType, Experiment, FilterLogicalOperator, FilterType, FunnelCorrelation, FunnelCorrelationResultsType, HelpType, InsightModel, InsightType, ItemMode, PersonType, Realm, SessionPlayerData, SessionRecordingUsageType, UserType } from '../../types'
import type { PersonsModalParams } from '../../scenes/trends/personsModalLogic'
import type { DashboardEventSource, GraphSeriesAddedSource, RecordingWatchedSource, SessionRecordingFilterType } from './eventUsageLogic'
import type { Dayjs } from '../dayjs'
import type { TaxonomicFilterGroupType } from '../components/TaxonomicFilter/types'
import type { Framework, PlatformType } from '../../scenes/ingestion/types'

export interface eventUsageLogicType extends Logic {
    actionCreators: {
        reportAnnotationViewed: (annotations: AnnotationType[] | null) => {
            type: 'report annotation viewed (lib.utils.eventUsageLogic)'
            payload: {
                annotations: AnnotationType[] | null
            }
        }
        reportPersonDetailViewed: (person: PersonType) => {
            type: 'report person detail viewed (lib.utils.eventUsageLogic)'
            payload: {
                person: PersonType
            }
        }
        reportInsightCreated: (insight: InsightType | null) => {
            type: 'report insight created (lib.utils.eventUsageLogic)'
            payload: {
                insight: InsightType | null
            }
        }
        reportInsightViewed: (
            insightModel: Partial<InsightModel>,
            filters: Partial<FilterType>,
            insightMode: ItemMode,
            isFirstLoad: boolean,
            fromDashboard: boolean,
            delay?: number,
            changedFilters?: Record<string, any>
        ) => {
            type: 'report insight viewed (lib.utils.eventUsageLogic)'
            payload: {
                insightModel: Partial<InsightModel>
                filters: Partial<FilterType>
                insightMode: ItemMode
                isFirstLoad: boolean
                fromDashboard: boolean
                delay: number | undefined
                changedFilters: Record<string, any> | undefined
            }
        }
        reportPersonsModalViewed: (
            params: PersonsModalParams,
            count: number,
            hasNext: boolean
        ) => {
            type: 'report persons modal viewed (lib.utils.eventUsageLogic)'
            payload: {
                params: PersonsModalParams
                count: number
                hasNext: boolean
            }
        }
        reportCohortCreatedFromPersonsModal: (filters: Partial<FilterType>) => {
            type: 'report cohort created from persons modal (lib.utils.eventUsageLogic)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        reportBookmarkletDragged: () => {
            type: 'report bookmarklet dragged (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportIngestionBookmarkletCollapsible: (activePanels: string[]) => {
            type: 'report ingestion bookmarklet collapsible (lib.utils.eventUsageLogic)'
            payload: {
                activePanels: string[]
            }
        }
        reportProjectCreationSubmitted: (
            projectCount: number,
            nameLength: number
        ) => {
            type: 'report project creation submitted (lib.utils.eventUsageLogic)'
            payload: {
                projectCount: number
                nameLength: number
            }
        }
        reportDemoWarningDismissed: (key: string) => {
            type: 'report demo warning dismissed (lib.utils.eventUsageLogic)'
            payload: {
                key: string
            }
        }
        reportOnboardingStepTriggered: (
            stepKey: string,
            extraArgs: Record<string, string | number | boolean>
        ) => {
            type: 'report onboarding step triggered (lib.utils.eventUsageLogic)'
            payload: {
                stepKey: string
                extraArgs: Record<string, string | number | boolean>
            }
        }
        reportBulkInviteAttempted: (
            inviteesCount: number,
            namesCount: number
        ) => {
            type: 'report bulk invite attempted (lib.utils.eventUsageLogic)'
            payload: {
                inviteesCount: number
                namesCount: number
            }
        }
        reportInviteAttempted: (
            nameProvided: boolean,
            instanceEmailAvailable: boolean
        ) => {
            type: 'report invite attempted (lib.utils.eventUsageLogic)'
            payload: {
                nameProvided: boolean
                instanceEmailAvailable: boolean
            }
        }
        reportFunnelCalculated: (
            eventCount: number,
            actionCount: number,
            interval: string,
            funnelVizType: string | undefined,
            success: boolean,
            error?: string
        ) => {
            type: 'report funnel calculated (lib.utils.eventUsageLogic)'
            payload: {
                eventCount: number
                actionCount: number
                interval: string
                funnelVizType: string | undefined
                success: boolean
                error: string | undefined
            }
        }
        reportFunnelStepReordered: () => {
            type: 'report funnel step reordered (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportPersonPropertyUpdated: (
            action: 'added' | 'updated' | 'removed',
            totalProperties: number,
            oldPropertyType?: string,
            newPropertyType?: string
        ) => {
            type: 'report person property updated (lib.utils.eventUsageLogic)'
            payload: {
                action: 'added' | 'updated' | 'removed'
                totalProperties: number
                oldPropertyType: string | undefined
                newPropertyType: string | undefined
            }
        }
        reportDashboardViewed: (
            dashboard: DashboardType,
            hasShareToken: boolean,
            delay?: number
        ) => {
            type: 'report dashboard viewed (lib.utils.eventUsageLogic)'
            payload: {
                dashboard: DashboardType
                hasShareToken: boolean
                delay: number | undefined
            }
        }
        reportDashboardModeToggled: (
            mode: DashboardMode,
            source: DashboardEventSource | null
        ) => {
            type: 'report dashboard mode toggled (lib.utils.eventUsageLogic)'
            payload: {
                mode: DashboardMode
                source: DashboardEventSource | null
            }
        }
        reportDashboardRefreshed: (lastRefreshed?: string | Dayjs | null) => {
            type: 'report dashboard refreshed (lib.utils.eventUsageLogic)'
            payload: {
                lastRefreshed: string | Dayjs | null | undefined
            }
        }
        reportDashboardItemRefreshed: (dashboardItem: InsightModel) => {
            type: 'report dashboard item refreshed (lib.utils.eventUsageLogic)'
            payload: {
                dashboardItem: InsightModel
            }
        }
        reportDashboardDateRangeChanged: (
            dateFrom?: string | Dayjs,
            dateTo?: string | Dayjs | null
        ) => {
            type: 'report dashboard date range changed (lib.utils.eventUsageLogic)'
            payload: {
                dateFrom: string | Dayjs | undefined
                dateTo: string | Dayjs | null | undefined
            }
        }
        reportDashboardPropertiesChanged: () => {
            type: 'report dashboard properties changed (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportDashboardPinToggled: (
            pinned: boolean,
            source: DashboardEventSource
        ) => {
            type: 'report dashboard pin toggled (lib.utils.eventUsageLogic)'
            payload: {
                pinned: boolean
                source: DashboardEventSource
            }
        }
        reportDashboardDropdownNavigation: () => {
            type: 'report dashboard dropdown navigation (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportDashboardFrontEndUpdate: (
            attribute: 'name' | 'description' | 'tags',
            originalLength: number,
            newLength: number
        ) => {
            type: 'report dashboard front end update (lib.utils.eventUsageLogic)'
            payload: {
                attribute: 'name' | 'description' | 'tags'
                originalLength: number
                newLength: number
            }
        }
        reportDashboardShareToggled: (isShared: boolean) => {
            type: 'report dashboard share toggled (lib.utils.eventUsageLogic)'
            payload: {
                isShared: boolean
            }
        }
        reportUpgradeModalShown: (featureName: string) => {
            type: 'report upgrade modal shown (lib.utils.eventUsageLogic)'
            payload: {
                featureName: string
            }
        }
        reportIngestionLandingSeen: () => {
            type: 'report ingestion landing seen (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportTimezoneComponentViewed: (
            component: 'label' | 'indicator',
            project_timezone?: string,
            device_timezone?: string | null
        ) => {
            type: 'report timezone component viewed (lib.utils.eventUsageLogic)'
            payload: {
                component: 'label' | 'indicator'
                project_timezone: string | undefined
                device_timezone: string | null | undefined
            }
        }
        reportTestAccountFiltersUpdated: (filters: Record<string, any>[]) => {
            type: 'report test account filters updated (lib.utils.eventUsageLogic)'
            payload: {
                filters: Record<string, any>[]
            }
        }
        reportProjectHomeItemClicked: (
            module: string,
            item: string,
            extraProps?: Record<string, string | boolean | number | undefined>
        ) => {
            type: 'report project home item clicked (lib.utils.eventUsageLogic)'
            payload: {
                module: string
                item: string
                extraProps: Record<string, string | number | boolean | undefined> | undefined
            }
        }
        reportProjectHomeSeen: (teamHasData: boolean) => {
            type: 'report project home seen (lib.utils.eventUsageLogic)'
            payload: {
                teamHasData: boolean
            }
        }
        reportInsightHistoryItemClicked: (
            itemType: string,
            displayLocation?: string
        ) => {
            type: 'report insight history item clicked (lib.utils.eventUsageLogic)'
            payload: {
                itemType: string
                displayLocation: string | undefined
            }
        }
        reportEventSearched: (
            searchTerm: string,
            extraProps?: Record<string, number>
        ) => {
            type: 'report event searched (lib.utils.eventUsageLogic)'
            payload: {
                searchTerm: string
                extraProps: Record<string, number> | undefined
            }
        }
        reportInsightFilterUpdated: (
            index: number,
            name: string | null,
            type?: EntityType
        ) => {
            type: 'report insight filter updated (lib.utils.eventUsageLogic)'
            payload: {
                type: EntityType | undefined
                index: number
                name: string | null
            }
        }
        reportInsightFilterRemoved: (index: number) => {
            type: 'report insight filter removed (lib.utils.eventUsageLogic)'
            payload: {
                index: number
            }
        }
        reportInsightFilterAdded: (
            newLength: number,
            source: GraphSeriesAddedSource
        ) => {
            type: 'report insight filter added (lib.utils.eventUsageLogic)'
            payload: {
                newLength: number
                source: GraphSeriesAddedSource
            }
        }
        reportInsightFilterSet: (
            filters: Array<{
                id: string | number | null
                type?: EntityType
            }>
        ) => {
            type: 'report insight filter set (lib.utils.eventUsageLogic)'
            payload: {
                filters: { id: string | number | null; type?: EntityType | undefined }[]
            }
        }
        reportEntityFilterVisibilitySet: (
            index: number,
            visible: boolean
        ) => {
            type: 'report entity filter visibility set (lib.utils.eventUsageLogic)'
            payload: {
                index: number
                visible: boolean
            }
        }
        reportPropertySelectOpened: () => {
            type: 'report property select opened (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportCreatedDashboardFromModal: () => {
            type: 'report created dashboard from modal (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportSavedInsightToDashboard: () => {
            type: 'report saved insight to dashboard (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportRemovedInsightFromDashboard: () => {
            type: 'report removed insight from dashboard (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportInsightsTabReset: () => {
            type: 'report insights tab reset (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportInsightsTableCalcToggled: (mode: string) => {
            type: 'report insights table calc toggled (lib.utils.eventUsageLogic)'
            payload: {
                mode: string
            }
        }
        reportInsightShortUrlVisited: (
            valid: boolean,
            insight: InsightType | null
        ) => {
            type: 'report insight short url visited (lib.utils.eventUsageLogic)'
            payload: {
                valid: boolean
                insight: InsightType | null
            }
        }
        reportSavedInsightTabChanged: (tab: string) => {
            type: 'report saved insight tab changed (lib.utils.eventUsageLogic)'
            payload: {
                tab: string
            }
        }
        reportSavedInsightFilterUsed: (filterKeys: string[]) => {
            type: 'report saved insight filter used (lib.utils.eventUsageLogic)'
            payload: {
                filterKeys: string[]
            }
        }
        reportSavedInsightLayoutChanged: (layout: string) => {
            type: 'report saved insight layout changed (lib.utils.eventUsageLogic)'
            payload: {
                layout: string
            }
        }
        reportSavedInsightNewInsightClicked: (insightType: string) => {
            type: 'report saved insight new insight clicked (lib.utils.eventUsageLogic)'
            payload: {
                insightType: string
            }
        }
        reportPayGateShown: (identifier: AvailableFeature) => {
            type: 'report pay gate shown (lib.utils.eventUsageLogic)'
            payload: {
                identifier: AvailableFeature
            }
        }
        reportPayGateDismissed: (identifier: AvailableFeature) => {
            type: 'report pay gate dismissed (lib.utils.eventUsageLogic)'
            payload: {
                identifier: AvailableFeature
            }
        }
        reportPersonMerged: (merge_count: number) => {
            type: 'report person merged (lib.utils.eventUsageLogic)'
            payload: {
                merge_count: number
            }
        }
        reportPersonSplit: (merge_count: number) => {
            type: 'report person split (lib.utils.eventUsageLogic)'
            payload: {
                merge_count: number
            }
        }
        reportRecording: (
            recordingData: SessionPlayerData,
            source: RecordingWatchedSource,
            loadTime: number,
            type: SessionRecordingUsageType,
            delay?: number
        ) => {
            type: 'report recording (lib.utils.eventUsageLogic)'
            payload: {
                recordingData: SessionPlayerData
                source: RecordingWatchedSource
                loadTime: number
                type: SessionRecordingUsageType
                delay: number | undefined
            }
        }
        reportRecordingScrollTo: (rowIndex: number) => {
            type: 'report recording scroll to (lib.utils.eventUsageLogic)'
            payload: {
                rowIndex: number
            }
        }
        reportHelpButtonViewed: () => {
            type: 'report help button viewed (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportHelpButtonUsed: (help_type: HelpType) => {
            type: 'report help button used (lib.utils.eventUsageLogic)'
            payload: {
                help_type: HelpType
            }
        }
        reportCorrelationViewed: (
            filters: Partial<FilterType>,
            delay?: number,
            propertiesTable?: boolean
        ) => {
            type: 'report correlation viewed (lib.utils.eventUsageLogic)'
            payload: {
                filters: Partial<FilterType>
                delay: number | undefined
                propertiesTable: boolean | undefined
            }
        }
        reportCorrelationInteraction: (
            correlationType: FunnelCorrelation['result_type'],
            action: string,
            props?: Record<string, any>
        ) => {
            type: 'report correlation interaction (lib.utils.eventUsageLogic)'
            payload: {
                correlationType: FunnelCorrelationResultsType
                action: string
                props: Record<string, any> | undefined
            }
        }
        reportRecordingEventsFetched: (
            numEvents: number,
            loadTime: number
        ) => {
            type: 'report recording events fetched (lib.utils.eventUsageLogic)'
            payload: {
                numEvents: number
                loadTime: number
            }
        }
        reportCorrelationAnalysisFeedback: (rating: number) => {
            type: 'report correlation analysis feedback (lib.utils.eventUsageLogic)'
            payload: {
                rating: number
            }
        }
        reportCorrelationAnalysisDetailedFeedback: (
            rating: number,
            comments: string
        ) => {
            type: 'report correlation analysis detailed feedback (lib.utils.eventUsageLogic)'
            payload: {
                rating: number
                comments: string
            }
        }
        reportRecordingsListFetched: (loadTime: number) => {
            type: 'report recordings list fetched (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
            }
        }
        reportRecordingsListFilterAdded: (filterType: SessionRecordingFilterType) => {
            type: 'report recordings list filter added (lib.utils.eventUsageLogic)'
            payload: {
                filterType: SessionRecordingFilterType
            }
        }
        reportRecordingPlayerSeekbarEventHovered: () => {
            type: 'report recording player seekbar event hovered (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportRecordingPlayerSpeedChanged: (newSpeed: number) => {
            type: 'report recording player speed changed (lib.utils.eventUsageLogic)'
            payload: {
                newSpeed: number
            }
        }
        reportRecordingPlayerSkipInactivityToggled: (skipInactivity: boolean) => {
            type: 'report recording player skip inactivity toggled (lib.utils.eventUsageLogic)'
            payload: {
                skipInactivity: boolean
            }
        }
        reportRecordingConsoleFeedback: (
            logCount: number,
            response: string,
            question: string
        ) => {
            type: 'report recording console feedback (lib.utils.eventUsageLogic)'
            payload: {
                logCount: number
                response: string
                question: string
            }
        }
        reportRecordingConsoleViewed: (logCount: number) => {
            type: 'report recording console viewed (lib.utils.eventUsageLogic)'
            payload: {
                logCount: number
            }
        }
        reportExperimentArchived: (experiment: Experiment) => {
            type: 'report experiment archived (lib.utils.eventUsageLogic)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentCreated: (experiment: Experiment) => {
            type: 'report experiment created (lib.utils.eventUsageLogic)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentViewed: (experiment: Experiment) => {
            type: 'report experiment viewed (lib.utils.eventUsageLogic)'
            payload: {
                experiment: Experiment
            }
        }
        reportExperimentLaunched: (
            experiment: Experiment,
            launchDate: Dayjs
        ) => {
            type: 'report experiment launched (lib.utils.eventUsageLogic)'
            payload: {
                experiment: Experiment
                launchDate: Dayjs
            }
        }
        reportExperimentCompleted: (
            experiment: Experiment,
            endDate: Dayjs,
            duration: number,
            significant: boolean
        ) => {
            type: 'report experiment completed (lib.utils.eventUsageLogic)'
            payload: {
                experiment: Experiment
                endDate: Dayjs
                duration: number
                significant: boolean
            }
        }
        reportPropertyGroupFilterAdded: () => {
            type: 'report property group filter added (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportChangeOuterPropertyGroupFiltersType: (
            type: FilterLogicalOperator,
            groupsLength: number
        ) => {
            type: 'report change outer property group filters type (lib.utils.eventUsageLogic)'
            payload: {
                type: FilterLogicalOperator
                groupsLength: number
            }
        }
        reportChangeInnerPropertyGroupFiltersType: (
            type: FilterLogicalOperator,
            filtersLength: number
        ) => {
            type: 'report change inner property group filters type (lib.utils.eventUsageLogic)'
            payload: {
                type: FilterLogicalOperator
                filtersLength: number
            }
        }
        reportPrimaryDashboardModalOpened: () => {
            type: 'report primary dashboard modal opened (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportPrimaryDashboardChanged: () => {
            type: 'report primary dashboard changed (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportDataManagementDefinitionHovered: (type: TaxonomicFilterGroupType) => {
            type: 'report data management definition hovered (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
            }
        }
        reportDataManagementDefinitionClickView: (type: TaxonomicFilterGroupType) => {
            type: 'report data management definition click view (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
            }
        }
        reportDataManagementDefinitionClickEdit: (type: TaxonomicFilterGroupType) => {
            type: 'report data management definition click edit (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
            }
        }
        reportDataManagementDefinitionSaveSucceeded: (
            type: TaxonomicFilterGroupType,
            loadTime: number
        ) => {
            type: 'report data management definition save succeeded (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
                loadTime: number
            }
        }
        reportDataManagementDefinitionSaveFailed: (
            type: TaxonomicFilterGroupType,
            loadTime: number,
            error: string
        ) => {
            type: 'report data management definition save failed (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
                loadTime: number
                error: string
            }
        }
        reportDataManagementDefinitionCancel: (type: TaxonomicFilterGroupType) => {
            type: 'report data management definition cancel (lib.utils.eventUsageLogic)'
            payload: {
                type: TaxonomicFilterGroupType
            }
        }
        reportDataManagementEventDefinitionsPageLoadSucceeded: (
            loadTime: number,
            resultsLength: number
        ) => {
            type: 'report data management event definitions page load succeeded (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
                resultsLength: number
            }
        }
        reportDataManagementEventDefinitionsPageLoadFailed: (
            loadTime: number,
            error: string
        ) => {
            type: 'report data management event definitions page load failed (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
                error: string
            }
        }
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded: (loadTime: number) => {
            type: 'report data management event definitions page nested properties load succeeded (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
            }
        }
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed: (
            loadTime: number,
            error: string
        ) => {
            type: 'report data management event definitions page nested properties load failed (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
                error: string
            }
        }
        reportDataManagementEventPropertyDefinitionsPageLoadSucceeded: (
            loadTime: number,
            resultsLength: number
        ) => {
            type: 'report data management event property definitions page load succeeded (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
                resultsLength: number
            }
        }
        reportDataManagementEventPropertyDefinitionsPageLoadFailed: (
            loadTime: number,
            error: string
        ) => {
            type: 'report data management event property definitions page load failed (lib.utils.eventUsageLogic)'
            payload: {
                loadTime: number
                error: string
            }
        }
        reportInsightOpenedFromRecentInsightList: () => {
            type: 'report insight opened from recent insight list (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportRecordingOpenedFromRecentRecordingList: () => {
            type: 'report recording opened from recent recording list (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportPersonOpenedFromNewlySeenPersonsList: () => {
            type: 'report person opened from newly seen persons list (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportTeamHasIngestedEvents: () => {
            type: 'report team has ingested events (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportIngestionSelectPlatformType: (platform: PlatformType) => {
            type: 'report ingestion select platform type (lib.utils.eventUsageLogic)'
            payload: {
                platform: PlatformType
            }
        }
        reportIngestionSelectFrameworkType: (framework: Framework) => {
            type: 'report ingestion select framework type (lib.utils.eventUsageLogic)'
            payload: {
                framework: string | null
            }
        }
        reportIngestionHelpClicked: (type: string) => {
            type: 'report ingestion help clicked (lib.utils.eventUsageLogic)'
            payload: {
                type: string
            }
        }
        reportIngestionTryWithBookmarkletClicked: () => {
            type: 'report ingestion try with bookmarklet clicked (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportIngestionContinueWithoutVerifying: () => {
            type: 'report ingestion continue without verifying (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportIngestionThirdPartyAboutClicked: (name: string) => {
            type: 'report ingestion third party about clicked (lib.utils.eventUsageLogic)'
            payload: {
                name: string
            }
        }
        reportIngestionThirdPartyConfigureClicked: (name: string) => {
            type: 'report ingestion third party configure clicked (lib.utils.eventUsageLogic)'
            payload: {
                name: string
            }
        }
        reportIngestionThirdPartyPluginInstalled: (name: string) => {
            type: 'report ingestion third party plugin installed (lib.utils.eventUsageLogic)'
            payload: {
                name: string
            }
        }
        reportFailedToCreateFeatureFlagWithCohort: (
            code: string,
            detail: string
        ) => {
            type: 'report failed to create feature flag with cohort (lib.utils.eventUsageLogic)'
            payload: {
                code: string
                detail: string
            }
        }
        reportInviteMembersButtonClicked: () => {
            type: 'report invite members button clicked (lib.utils.eventUsageLogic)'
            payload: {
                value: true
            }
        }
        reportIngestionSidebarButtonClicked: (name: string) => {
            type: 'report ingestion sidebar button clicked (lib.utils.eventUsageLogic)'
            payload: {
                name: string
            }
        }
    }
    actionKeys: {
        'report annotation viewed (lib.utils.eventUsageLogic)': 'reportAnnotationViewed'
        'report person detail viewed (lib.utils.eventUsageLogic)': 'reportPersonDetailViewed'
        'report insight created (lib.utils.eventUsageLogic)': 'reportInsightCreated'
        'report insight viewed (lib.utils.eventUsageLogic)': 'reportInsightViewed'
        'report persons modal viewed (lib.utils.eventUsageLogic)': 'reportPersonsModalViewed'
        'report cohort created from persons modal (lib.utils.eventUsageLogic)': 'reportCohortCreatedFromPersonsModal'
        'report bookmarklet dragged (lib.utils.eventUsageLogic)': 'reportBookmarkletDragged'
        'report ingestion bookmarklet collapsible (lib.utils.eventUsageLogic)': 'reportIngestionBookmarkletCollapsible'
        'report project creation submitted (lib.utils.eventUsageLogic)': 'reportProjectCreationSubmitted'
        'report demo warning dismissed (lib.utils.eventUsageLogic)': 'reportDemoWarningDismissed'
        'report onboarding step triggered (lib.utils.eventUsageLogic)': 'reportOnboardingStepTriggered'
        'report bulk invite attempted (lib.utils.eventUsageLogic)': 'reportBulkInviteAttempted'
        'report invite attempted (lib.utils.eventUsageLogic)': 'reportInviteAttempted'
        'report funnel calculated (lib.utils.eventUsageLogic)': 'reportFunnelCalculated'
        'report funnel step reordered (lib.utils.eventUsageLogic)': 'reportFunnelStepReordered'
        'report person property updated (lib.utils.eventUsageLogic)': 'reportPersonPropertyUpdated'
        'report dashboard viewed (lib.utils.eventUsageLogic)': 'reportDashboardViewed'
        'report dashboard mode toggled (lib.utils.eventUsageLogic)': 'reportDashboardModeToggled'
        'report dashboard refreshed (lib.utils.eventUsageLogic)': 'reportDashboardRefreshed'
        'report dashboard item refreshed (lib.utils.eventUsageLogic)': 'reportDashboardItemRefreshed'
        'report dashboard date range changed (lib.utils.eventUsageLogic)': 'reportDashboardDateRangeChanged'
        'report dashboard properties changed (lib.utils.eventUsageLogic)': 'reportDashboardPropertiesChanged'
        'report dashboard pin toggled (lib.utils.eventUsageLogic)': 'reportDashboardPinToggled'
        'report dashboard dropdown navigation (lib.utils.eventUsageLogic)': 'reportDashboardDropdownNavigation'
        'report dashboard front end update (lib.utils.eventUsageLogic)': 'reportDashboardFrontEndUpdate'
        'report dashboard share toggled (lib.utils.eventUsageLogic)': 'reportDashboardShareToggled'
        'report upgrade modal shown (lib.utils.eventUsageLogic)': 'reportUpgradeModalShown'
        'report ingestion landing seen (lib.utils.eventUsageLogic)': 'reportIngestionLandingSeen'
        'report timezone component viewed (lib.utils.eventUsageLogic)': 'reportTimezoneComponentViewed'
        'report test account filters updated (lib.utils.eventUsageLogic)': 'reportTestAccountFiltersUpdated'
        'report project home item clicked (lib.utils.eventUsageLogic)': 'reportProjectHomeItemClicked'
        'report project home seen (lib.utils.eventUsageLogic)': 'reportProjectHomeSeen'
        'report insight history item clicked (lib.utils.eventUsageLogic)': 'reportInsightHistoryItemClicked'
        'report event searched (lib.utils.eventUsageLogic)': 'reportEventSearched'
        'report insight filter updated (lib.utils.eventUsageLogic)': 'reportInsightFilterUpdated'
        'report insight filter removed (lib.utils.eventUsageLogic)': 'reportInsightFilterRemoved'
        'report insight filter added (lib.utils.eventUsageLogic)': 'reportInsightFilterAdded'
        'report insight filter set (lib.utils.eventUsageLogic)': 'reportInsightFilterSet'
        'report entity filter visibility set (lib.utils.eventUsageLogic)': 'reportEntityFilterVisibilitySet'
        'report property select opened (lib.utils.eventUsageLogic)': 'reportPropertySelectOpened'
        'report created dashboard from modal (lib.utils.eventUsageLogic)': 'reportCreatedDashboardFromModal'
        'report saved insight to dashboard (lib.utils.eventUsageLogic)': 'reportSavedInsightToDashboard'
        'report removed insight from dashboard (lib.utils.eventUsageLogic)': 'reportRemovedInsightFromDashboard'
        'report insights tab reset (lib.utils.eventUsageLogic)': 'reportInsightsTabReset'
        'report insights table calc toggled (lib.utils.eventUsageLogic)': 'reportInsightsTableCalcToggled'
        'report insight short url visited (lib.utils.eventUsageLogic)': 'reportInsightShortUrlVisited'
        'report saved insight tab changed (lib.utils.eventUsageLogic)': 'reportSavedInsightTabChanged'
        'report saved insight filter used (lib.utils.eventUsageLogic)': 'reportSavedInsightFilterUsed'
        'report saved insight layout changed (lib.utils.eventUsageLogic)': 'reportSavedInsightLayoutChanged'
        'report saved insight new insight clicked (lib.utils.eventUsageLogic)': 'reportSavedInsightNewInsightClicked'
        'report pay gate shown (lib.utils.eventUsageLogic)': 'reportPayGateShown'
        'report pay gate dismissed (lib.utils.eventUsageLogic)': 'reportPayGateDismissed'
        'report person merged (lib.utils.eventUsageLogic)': 'reportPersonMerged'
        'report person split (lib.utils.eventUsageLogic)': 'reportPersonSplit'
        'report recording (lib.utils.eventUsageLogic)': 'reportRecording'
        'report recording scroll to (lib.utils.eventUsageLogic)': 'reportRecordingScrollTo'
        'report help button viewed (lib.utils.eventUsageLogic)': 'reportHelpButtonViewed'
        'report help button used (lib.utils.eventUsageLogic)': 'reportHelpButtonUsed'
        'report correlation viewed (lib.utils.eventUsageLogic)': 'reportCorrelationViewed'
        'report correlation interaction (lib.utils.eventUsageLogic)': 'reportCorrelationInteraction'
        'report recording events fetched (lib.utils.eventUsageLogic)': 'reportRecordingEventsFetched'
        'report correlation analysis feedback (lib.utils.eventUsageLogic)': 'reportCorrelationAnalysisFeedback'
        'report correlation analysis detailed feedback (lib.utils.eventUsageLogic)': 'reportCorrelationAnalysisDetailedFeedback'
        'report recordings list fetched (lib.utils.eventUsageLogic)': 'reportRecordingsListFetched'
        'report recordings list filter added (lib.utils.eventUsageLogic)': 'reportRecordingsListFilterAdded'
        'report recording player seekbar event hovered (lib.utils.eventUsageLogic)': 'reportRecordingPlayerSeekbarEventHovered'
        'report recording player speed changed (lib.utils.eventUsageLogic)': 'reportRecordingPlayerSpeedChanged'
        'report recording player skip inactivity toggled (lib.utils.eventUsageLogic)': 'reportRecordingPlayerSkipInactivityToggled'
        'report recording console feedback (lib.utils.eventUsageLogic)': 'reportRecordingConsoleFeedback'
        'report recording console viewed (lib.utils.eventUsageLogic)': 'reportRecordingConsoleViewed'
        'report experiment archived (lib.utils.eventUsageLogic)': 'reportExperimentArchived'
        'report experiment created (lib.utils.eventUsageLogic)': 'reportExperimentCreated'
        'report experiment viewed (lib.utils.eventUsageLogic)': 'reportExperimentViewed'
        'report experiment launched (lib.utils.eventUsageLogic)': 'reportExperimentLaunched'
        'report experiment completed (lib.utils.eventUsageLogic)': 'reportExperimentCompleted'
        'report property group filter added (lib.utils.eventUsageLogic)': 'reportPropertyGroupFilterAdded'
        'report change outer property group filters type (lib.utils.eventUsageLogic)': 'reportChangeOuterPropertyGroupFiltersType'
        'report change inner property group filters type (lib.utils.eventUsageLogic)': 'reportChangeInnerPropertyGroupFiltersType'
        'report primary dashboard modal opened (lib.utils.eventUsageLogic)': 'reportPrimaryDashboardModalOpened'
        'report primary dashboard changed (lib.utils.eventUsageLogic)': 'reportPrimaryDashboardChanged'
        'report data management definition hovered (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionHovered'
        'report data management definition click view (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionClickView'
        'report data management definition click edit (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionClickEdit'
        'report data management definition save succeeded (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionSaveSucceeded'
        'report data management definition save failed (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionSaveFailed'
        'report data management definition cancel (lib.utils.eventUsageLogic)': 'reportDataManagementDefinitionCancel'
        'report data management event definitions page load succeeded (lib.utils.eventUsageLogic)': 'reportDataManagementEventDefinitionsPageLoadSucceeded'
        'report data management event definitions page load failed (lib.utils.eventUsageLogic)': 'reportDataManagementEventDefinitionsPageLoadFailed'
        'report data management event definitions page nested properties load succeeded (lib.utils.eventUsageLogic)': 'reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded'
        'report data management event definitions page nested properties load failed (lib.utils.eventUsageLogic)': 'reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed'
        'report data management event property definitions page load succeeded (lib.utils.eventUsageLogic)': 'reportDataManagementEventPropertyDefinitionsPageLoadSucceeded'
        'report data management event property definitions page load failed (lib.utils.eventUsageLogic)': 'reportDataManagementEventPropertyDefinitionsPageLoadFailed'
        'report insight opened from recent insight list (lib.utils.eventUsageLogic)': 'reportInsightOpenedFromRecentInsightList'
        'report recording opened from recent recording list (lib.utils.eventUsageLogic)': 'reportRecordingOpenedFromRecentRecordingList'
        'report person opened from newly seen persons list (lib.utils.eventUsageLogic)': 'reportPersonOpenedFromNewlySeenPersonsList'
        'report team has ingested events (lib.utils.eventUsageLogic)': 'reportTeamHasIngestedEvents'
        'report ingestion select platform type (lib.utils.eventUsageLogic)': 'reportIngestionSelectPlatformType'
        'report ingestion select framework type (lib.utils.eventUsageLogic)': 'reportIngestionSelectFrameworkType'
        'report ingestion help clicked (lib.utils.eventUsageLogic)': 'reportIngestionHelpClicked'
        'report ingestion try with bookmarklet clicked (lib.utils.eventUsageLogic)': 'reportIngestionTryWithBookmarkletClicked'
        'report ingestion continue without verifying (lib.utils.eventUsageLogic)': 'reportIngestionContinueWithoutVerifying'
        'report ingestion third party about clicked (lib.utils.eventUsageLogic)': 'reportIngestionThirdPartyAboutClicked'
        'report ingestion third party configure clicked (lib.utils.eventUsageLogic)': 'reportIngestionThirdPartyConfigureClicked'
        'report ingestion third party plugin installed (lib.utils.eventUsageLogic)': 'reportIngestionThirdPartyPluginInstalled'
        'report failed to create feature flag with cohort (lib.utils.eventUsageLogic)': 'reportFailedToCreateFeatureFlagWithCohort'
        'report invite members button clicked (lib.utils.eventUsageLogic)': 'reportInviteMembersButtonClicked'
        'report ingestion sidebar button clicked (lib.utils.eventUsageLogic)': 'reportIngestionSidebarButtonClicked'
    }
    actionTypes: {
        reportAnnotationViewed: 'report annotation viewed (lib.utils.eventUsageLogic)'
        reportPersonDetailViewed: 'report person detail viewed (lib.utils.eventUsageLogic)'
        reportInsightCreated: 'report insight created (lib.utils.eventUsageLogic)'
        reportInsightViewed: 'report insight viewed (lib.utils.eventUsageLogic)'
        reportPersonsModalViewed: 'report persons modal viewed (lib.utils.eventUsageLogic)'
        reportCohortCreatedFromPersonsModal: 'report cohort created from persons modal (lib.utils.eventUsageLogic)'
        reportBookmarkletDragged: 'report bookmarklet dragged (lib.utils.eventUsageLogic)'
        reportIngestionBookmarkletCollapsible: 'report ingestion bookmarklet collapsible (lib.utils.eventUsageLogic)'
        reportProjectCreationSubmitted: 'report project creation submitted (lib.utils.eventUsageLogic)'
        reportDemoWarningDismissed: 'report demo warning dismissed (lib.utils.eventUsageLogic)'
        reportOnboardingStepTriggered: 'report onboarding step triggered (lib.utils.eventUsageLogic)'
        reportBulkInviteAttempted: 'report bulk invite attempted (lib.utils.eventUsageLogic)'
        reportInviteAttempted: 'report invite attempted (lib.utils.eventUsageLogic)'
        reportFunnelCalculated: 'report funnel calculated (lib.utils.eventUsageLogic)'
        reportFunnelStepReordered: 'report funnel step reordered (lib.utils.eventUsageLogic)'
        reportPersonPropertyUpdated: 'report person property updated (lib.utils.eventUsageLogic)'
        reportDashboardViewed: 'report dashboard viewed (lib.utils.eventUsageLogic)'
        reportDashboardModeToggled: 'report dashboard mode toggled (lib.utils.eventUsageLogic)'
        reportDashboardRefreshed: 'report dashboard refreshed (lib.utils.eventUsageLogic)'
        reportDashboardItemRefreshed: 'report dashboard item refreshed (lib.utils.eventUsageLogic)'
        reportDashboardDateRangeChanged: 'report dashboard date range changed (lib.utils.eventUsageLogic)'
        reportDashboardPropertiesChanged: 'report dashboard properties changed (lib.utils.eventUsageLogic)'
        reportDashboardPinToggled: 'report dashboard pin toggled (lib.utils.eventUsageLogic)'
        reportDashboardDropdownNavigation: 'report dashboard dropdown navigation (lib.utils.eventUsageLogic)'
        reportDashboardFrontEndUpdate: 'report dashboard front end update (lib.utils.eventUsageLogic)'
        reportDashboardShareToggled: 'report dashboard share toggled (lib.utils.eventUsageLogic)'
        reportUpgradeModalShown: 'report upgrade modal shown (lib.utils.eventUsageLogic)'
        reportIngestionLandingSeen: 'report ingestion landing seen (lib.utils.eventUsageLogic)'
        reportTimezoneComponentViewed: 'report timezone component viewed (lib.utils.eventUsageLogic)'
        reportTestAccountFiltersUpdated: 'report test account filters updated (lib.utils.eventUsageLogic)'
        reportProjectHomeItemClicked: 'report project home item clicked (lib.utils.eventUsageLogic)'
        reportProjectHomeSeen: 'report project home seen (lib.utils.eventUsageLogic)'
        reportInsightHistoryItemClicked: 'report insight history item clicked (lib.utils.eventUsageLogic)'
        reportEventSearched: 'report event searched (lib.utils.eventUsageLogic)'
        reportInsightFilterUpdated: 'report insight filter updated (lib.utils.eventUsageLogic)'
        reportInsightFilterRemoved: 'report insight filter removed (lib.utils.eventUsageLogic)'
        reportInsightFilterAdded: 'report insight filter added (lib.utils.eventUsageLogic)'
        reportInsightFilterSet: 'report insight filter set (lib.utils.eventUsageLogic)'
        reportEntityFilterVisibilitySet: 'report entity filter visibility set (lib.utils.eventUsageLogic)'
        reportPropertySelectOpened: 'report property select opened (lib.utils.eventUsageLogic)'
        reportCreatedDashboardFromModal: 'report created dashboard from modal (lib.utils.eventUsageLogic)'
        reportSavedInsightToDashboard: 'report saved insight to dashboard (lib.utils.eventUsageLogic)'
        reportRemovedInsightFromDashboard: 'report removed insight from dashboard (lib.utils.eventUsageLogic)'
        reportInsightsTabReset: 'report insights tab reset (lib.utils.eventUsageLogic)'
        reportInsightsTableCalcToggled: 'report insights table calc toggled (lib.utils.eventUsageLogic)'
        reportInsightShortUrlVisited: 'report insight short url visited (lib.utils.eventUsageLogic)'
        reportSavedInsightTabChanged: 'report saved insight tab changed (lib.utils.eventUsageLogic)'
        reportSavedInsightFilterUsed: 'report saved insight filter used (lib.utils.eventUsageLogic)'
        reportSavedInsightLayoutChanged: 'report saved insight layout changed (lib.utils.eventUsageLogic)'
        reportSavedInsightNewInsightClicked: 'report saved insight new insight clicked (lib.utils.eventUsageLogic)'
        reportPayGateShown: 'report pay gate shown (lib.utils.eventUsageLogic)'
        reportPayGateDismissed: 'report pay gate dismissed (lib.utils.eventUsageLogic)'
        reportPersonMerged: 'report person merged (lib.utils.eventUsageLogic)'
        reportPersonSplit: 'report person split (lib.utils.eventUsageLogic)'
        reportRecording: 'report recording (lib.utils.eventUsageLogic)'
        reportRecordingScrollTo: 'report recording scroll to (lib.utils.eventUsageLogic)'
        reportHelpButtonViewed: 'report help button viewed (lib.utils.eventUsageLogic)'
        reportHelpButtonUsed: 'report help button used (lib.utils.eventUsageLogic)'
        reportCorrelationViewed: 'report correlation viewed (lib.utils.eventUsageLogic)'
        reportCorrelationInteraction: 'report correlation interaction (lib.utils.eventUsageLogic)'
        reportRecordingEventsFetched: 'report recording events fetched (lib.utils.eventUsageLogic)'
        reportCorrelationAnalysisFeedback: 'report correlation analysis feedback (lib.utils.eventUsageLogic)'
        reportCorrelationAnalysisDetailedFeedback: 'report correlation analysis detailed feedback (lib.utils.eventUsageLogic)'
        reportRecordingsListFetched: 'report recordings list fetched (lib.utils.eventUsageLogic)'
        reportRecordingsListFilterAdded: 'report recordings list filter added (lib.utils.eventUsageLogic)'
        reportRecordingPlayerSeekbarEventHovered: 'report recording player seekbar event hovered (lib.utils.eventUsageLogic)'
        reportRecordingPlayerSpeedChanged: 'report recording player speed changed (lib.utils.eventUsageLogic)'
        reportRecordingPlayerSkipInactivityToggled: 'report recording player skip inactivity toggled (lib.utils.eventUsageLogic)'
        reportRecordingConsoleFeedback: 'report recording console feedback (lib.utils.eventUsageLogic)'
        reportRecordingConsoleViewed: 'report recording console viewed (lib.utils.eventUsageLogic)'
        reportExperimentArchived: 'report experiment archived (lib.utils.eventUsageLogic)'
        reportExperimentCreated: 'report experiment created (lib.utils.eventUsageLogic)'
        reportExperimentViewed: 'report experiment viewed (lib.utils.eventUsageLogic)'
        reportExperimentLaunched: 'report experiment launched (lib.utils.eventUsageLogic)'
        reportExperimentCompleted: 'report experiment completed (lib.utils.eventUsageLogic)'
        reportPropertyGroupFilterAdded: 'report property group filter added (lib.utils.eventUsageLogic)'
        reportChangeOuterPropertyGroupFiltersType: 'report change outer property group filters type (lib.utils.eventUsageLogic)'
        reportChangeInnerPropertyGroupFiltersType: 'report change inner property group filters type (lib.utils.eventUsageLogic)'
        reportPrimaryDashboardModalOpened: 'report primary dashboard modal opened (lib.utils.eventUsageLogic)'
        reportPrimaryDashboardChanged: 'report primary dashboard changed (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionHovered: 'report data management definition hovered (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionClickView: 'report data management definition click view (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionClickEdit: 'report data management definition click edit (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionSaveSucceeded: 'report data management definition save succeeded (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionSaveFailed: 'report data management definition save failed (lib.utils.eventUsageLogic)'
        reportDataManagementDefinitionCancel: 'report data management definition cancel (lib.utils.eventUsageLogic)'
        reportDataManagementEventDefinitionsPageLoadSucceeded: 'report data management event definitions page load succeeded (lib.utils.eventUsageLogic)'
        reportDataManagementEventDefinitionsPageLoadFailed: 'report data management event definitions page load failed (lib.utils.eventUsageLogic)'
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded: 'report data management event definitions page nested properties load succeeded (lib.utils.eventUsageLogic)'
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed: 'report data management event definitions page nested properties load failed (lib.utils.eventUsageLogic)'
        reportDataManagementEventPropertyDefinitionsPageLoadSucceeded: 'report data management event property definitions page load succeeded (lib.utils.eventUsageLogic)'
        reportDataManagementEventPropertyDefinitionsPageLoadFailed: 'report data management event property definitions page load failed (lib.utils.eventUsageLogic)'
        reportInsightOpenedFromRecentInsightList: 'report insight opened from recent insight list (lib.utils.eventUsageLogic)'
        reportRecordingOpenedFromRecentRecordingList: 'report recording opened from recent recording list (lib.utils.eventUsageLogic)'
        reportPersonOpenedFromNewlySeenPersonsList: 'report person opened from newly seen persons list (lib.utils.eventUsageLogic)'
        reportTeamHasIngestedEvents: 'report team has ingested events (lib.utils.eventUsageLogic)'
        reportIngestionSelectPlatformType: 'report ingestion select platform type (lib.utils.eventUsageLogic)'
        reportIngestionSelectFrameworkType: 'report ingestion select framework type (lib.utils.eventUsageLogic)'
        reportIngestionHelpClicked: 'report ingestion help clicked (lib.utils.eventUsageLogic)'
        reportIngestionTryWithBookmarkletClicked: 'report ingestion try with bookmarklet clicked (lib.utils.eventUsageLogic)'
        reportIngestionContinueWithoutVerifying: 'report ingestion continue without verifying (lib.utils.eventUsageLogic)'
        reportIngestionThirdPartyAboutClicked: 'report ingestion third party about clicked (lib.utils.eventUsageLogic)'
        reportIngestionThirdPartyConfigureClicked: 'report ingestion third party configure clicked (lib.utils.eventUsageLogic)'
        reportIngestionThirdPartyPluginInstalled: 'report ingestion third party plugin installed (lib.utils.eventUsageLogic)'
        reportFailedToCreateFeatureFlagWithCohort: 'report failed to create feature flag with cohort (lib.utils.eventUsageLogic)'
        reportInviteMembersButtonClicked: 'report invite members button clicked (lib.utils.eventUsageLogic)'
        reportIngestionSidebarButtonClicked: 'report ingestion sidebar button clicked (lib.utils.eventUsageLogic)'
    }
    actions: {
        reportAnnotationViewed: (annotations: AnnotationType[] | null) => void
        reportPersonDetailViewed: (person: PersonType) => void
        reportInsightCreated: (insight: InsightType | null) => void
        reportInsightViewed: (
            insightModel: Partial<InsightModel>,
            filters: Partial<FilterType>,
            insightMode: ItemMode,
            isFirstLoad: boolean,
            fromDashboard: boolean,
            delay?: number,
            changedFilters?: Record<string, any>
        ) => void
        reportPersonsModalViewed: (params: PersonsModalParams, count: number, hasNext: boolean) => void
        reportCohortCreatedFromPersonsModal: (filters: Partial<FilterType>) => void
        reportBookmarkletDragged: () => void
        reportIngestionBookmarkletCollapsible: (activePanels: string[]) => void
        reportProjectCreationSubmitted: (projectCount: number, nameLength: number) => void
        reportDemoWarningDismissed: (key: string) => void
        reportOnboardingStepTriggered: (stepKey: string, extraArgs: Record<string, string | number | boolean>) => void
        reportBulkInviteAttempted: (inviteesCount: number, namesCount: number) => void
        reportInviteAttempted: (nameProvided: boolean, instanceEmailAvailable: boolean) => void
        reportFunnelCalculated: (
            eventCount: number,
            actionCount: number,
            interval: string,
            funnelVizType: string | undefined,
            success: boolean,
            error?: string
        ) => void
        reportFunnelStepReordered: () => void
        reportPersonPropertyUpdated: (
            action: 'added' | 'updated' | 'removed',
            totalProperties: number,
            oldPropertyType?: string,
            newPropertyType?: string
        ) => void
        reportDashboardViewed: (dashboard: DashboardType, hasShareToken: boolean, delay?: number) => void
        reportDashboardModeToggled: (mode: DashboardMode, source: DashboardEventSource | null) => void
        reportDashboardRefreshed: (lastRefreshed?: string | Dayjs | null) => void
        reportDashboardItemRefreshed: (dashboardItem: InsightModel) => void
        reportDashboardDateRangeChanged: (dateFrom?: string | Dayjs, dateTo?: string | Dayjs | null) => void
        reportDashboardPropertiesChanged: () => void
        reportDashboardPinToggled: (pinned: boolean, source: DashboardEventSource) => void
        reportDashboardDropdownNavigation: () => void
        reportDashboardFrontEndUpdate: (
            attribute: 'name' | 'description' | 'tags',
            originalLength: number,
            newLength: number
        ) => void
        reportDashboardShareToggled: (isShared: boolean) => void
        reportUpgradeModalShown: (featureName: string) => void
        reportIngestionLandingSeen: () => void
        reportTimezoneComponentViewed: (
            component: 'label' | 'indicator',
            project_timezone?: string,
            device_timezone?: string | null
        ) => void
        reportTestAccountFiltersUpdated: (filters: Record<string, any>[]) => void
        reportProjectHomeItemClicked: (
            module: string,
            item: string,
            extraProps?: Record<string, string | boolean | number | undefined>
        ) => void
        reportProjectHomeSeen: (teamHasData: boolean) => void
        reportInsightHistoryItemClicked: (itemType: string, displayLocation?: string) => void
        reportEventSearched: (searchTerm: string, extraProps?: Record<string, number>) => void
        reportInsightFilterUpdated: (index: number, name: string | null, type?: EntityType) => void
        reportInsightFilterRemoved: (index: number) => void
        reportInsightFilterAdded: (newLength: number, source: GraphSeriesAddedSource) => void
        reportInsightFilterSet: (
            filters: Array<{
                id: string | number | null
                type?: EntityType
            }>
        ) => void
        reportEntityFilterVisibilitySet: (index: number, visible: boolean) => void
        reportPropertySelectOpened: () => void
        reportCreatedDashboardFromModal: () => void
        reportSavedInsightToDashboard: () => void
        reportRemovedInsightFromDashboard: () => void
        reportInsightsTabReset: () => void
        reportInsightsTableCalcToggled: (mode: string) => void
        reportInsightShortUrlVisited: (valid: boolean, insight: InsightType | null) => void
        reportSavedInsightTabChanged: (tab: string) => void
        reportSavedInsightFilterUsed: (filterKeys: string[]) => void
        reportSavedInsightLayoutChanged: (layout: string) => void
        reportSavedInsightNewInsightClicked: (insightType: string) => void
        reportPayGateShown: (identifier: AvailableFeature) => void
        reportPayGateDismissed: (identifier: AvailableFeature) => void
        reportPersonMerged: (merge_count: number) => void
        reportPersonSplit: (merge_count: number) => void
        reportRecording: (
            recordingData: SessionPlayerData,
            source: RecordingWatchedSource,
            loadTime: number,
            type: SessionRecordingUsageType,
            delay?: number
        ) => void
        reportRecordingScrollTo: (rowIndex: number) => void
        reportHelpButtonViewed: () => void
        reportHelpButtonUsed: (help_type: HelpType) => void
        reportCorrelationViewed: (filters: Partial<FilterType>, delay?: number, propertiesTable?: boolean) => void
        reportCorrelationInteraction: (
            correlationType: FunnelCorrelation['result_type'],
            action: string,
            props?: Record<string, any>
        ) => void
        reportRecordingEventsFetched: (numEvents: number, loadTime: number) => void
        reportCorrelationAnalysisFeedback: (rating: number) => void
        reportCorrelationAnalysisDetailedFeedback: (rating: number, comments: string) => void
        reportRecordingsListFetched: (loadTime: number) => void
        reportRecordingsListFilterAdded: (filterType: SessionRecordingFilterType) => void
        reportRecordingPlayerSeekbarEventHovered: () => void
        reportRecordingPlayerSpeedChanged: (newSpeed: number) => void
        reportRecordingPlayerSkipInactivityToggled: (skipInactivity: boolean) => void
        reportRecordingConsoleFeedback: (logCount: number, response: string, question: string) => void
        reportRecordingConsoleViewed: (logCount: number) => void
        reportExperimentArchived: (experiment: Experiment) => void
        reportExperimentCreated: (experiment: Experiment) => void
        reportExperimentViewed: (experiment: Experiment) => void
        reportExperimentLaunched: (experiment: Experiment, launchDate: Dayjs) => void
        reportExperimentCompleted: (
            experiment: Experiment,
            endDate: Dayjs,
            duration: number,
            significant: boolean
        ) => void
        reportPropertyGroupFilterAdded: () => void
        reportChangeOuterPropertyGroupFiltersType: (type: FilterLogicalOperator, groupsLength: number) => void
        reportChangeInnerPropertyGroupFiltersType: (type: FilterLogicalOperator, filtersLength: number) => void
        reportPrimaryDashboardModalOpened: () => void
        reportPrimaryDashboardChanged: () => void
        reportDataManagementDefinitionHovered: (type: TaxonomicFilterGroupType) => void
        reportDataManagementDefinitionClickView: (type: TaxonomicFilterGroupType) => void
        reportDataManagementDefinitionClickEdit: (type: TaxonomicFilterGroupType) => void
        reportDataManagementDefinitionSaveSucceeded: (type: TaxonomicFilterGroupType, loadTime: number) => void
        reportDataManagementDefinitionSaveFailed: (
            type: TaxonomicFilterGroupType,
            loadTime: number,
            error: string
        ) => void
        reportDataManagementDefinitionCancel: (type: TaxonomicFilterGroupType) => void
        reportDataManagementEventDefinitionsPageLoadSucceeded: (loadTime: number, resultsLength: number) => void
        reportDataManagementEventDefinitionsPageLoadFailed: (loadTime: number, error: string) => void
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded: (loadTime: number) => void
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed: (loadTime: number, error: string) => void
        reportDataManagementEventPropertyDefinitionsPageLoadSucceeded: (loadTime: number, resultsLength: number) => void
        reportDataManagementEventPropertyDefinitionsPageLoadFailed: (loadTime: number, error: string) => void
        reportInsightOpenedFromRecentInsightList: () => void
        reportRecordingOpenedFromRecentRecordingList: () => void
        reportPersonOpenedFromNewlySeenPersonsList: () => void
        reportTeamHasIngestedEvents: () => void
        reportIngestionSelectPlatformType: (platform: PlatformType) => void
        reportIngestionSelectFrameworkType: (framework: Framework) => void
        reportIngestionHelpClicked: (type: string) => void
        reportIngestionTryWithBookmarkletClicked: () => void
        reportIngestionContinueWithoutVerifying: () => void
        reportIngestionThirdPartyAboutClicked: (name: string) => void
        reportIngestionThirdPartyConfigureClicked: (name: string) => void
        reportIngestionThirdPartyPluginInstalled: (name: string) => void
        reportFailedToCreateFeatureFlagWithCohort: (code: string, detail: string) => void
        reportInviteMembersButtonClicked: () => void
        reportIngestionSidebarButtonClicked: (name: string) => void
    }
    defaults: {}
    events: {}
    key: undefined
    listeners: {
        reportAnnotationViewed: ((
            action: {
                type: 'report annotation viewed (lib.utils.eventUsageLogic)'
                payload: {
                    annotations: AnnotationType[] | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonDetailViewed: ((
            action: {
                type: 'report person detail viewed (lib.utils.eventUsageLogic)'
                payload: {
                    person: PersonType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightCreated: ((
            action: {
                type: 'report insight created (lib.utils.eventUsageLogic)'
                payload: {
                    insight: InsightType | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightViewed: ((
            action: {
                type: 'report insight viewed (lib.utils.eventUsageLogic)'
                payload: {
                    insightModel: Partial<InsightModel>
                    filters: Partial<FilterType>
                    insightMode: ItemMode
                    isFirstLoad: boolean
                    fromDashboard: boolean
                    delay: number | undefined
                    changedFilters: Record<string, any> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonsModalViewed: ((
            action: {
                type: 'report persons modal viewed (lib.utils.eventUsageLogic)'
                payload: {
                    params: PersonsModalParams
                    count: number
                    hasNext: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCohortCreatedFromPersonsModal: ((
            action: {
                type: 'report cohort created from persons modal (lib.utils.eventUsageLogic)'
                payload: {
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardViewed: ((
            action: {
                type: 'report dashboard viewed (lib.utils.eventUsageLogic)'
                payload: {
                    dashboard: DashboardType
                    hasShareToken: boolean
                    delay: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportBookmarkletDragged: ((
            action: {
                type: 'report bookmarklet dragged (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionBookmarkletCollapsible: ((
            action: {
                type: 'report ingestion bookmarklet collapsible (lib.utils.eventUsageLogic)'
                payload: {
                    activePanels: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportProjectCreationSubmitted: ((
            action: {
                type: 'report project creation submitted (lib.utils.eventUsageLogic)'
                payload: {
                    projectCount: number
                    nameLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDemoWarningDismissed: ((
            action: {
                type: 'report demo warning dismissed (lib.utils.eventUsageLogic)'
                payload: {
                    key: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportOnboardingStepTriggered: ((
            action: {
                type: 'report onboarding step triggered (lib.utils.eventUsageLogic)'
                payload: {
                    stepKey: string
                    extraArgs: Record<string, string | number | boolean>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportBulkInviteAttempted: ((
            action: {
                type: 'report bulk invite attempted (lib.utils.eventUsageLogic)'
                payload: {
                    inviteesCount: number
                    namesCount: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInviteAttempted: ((
            action: {
                type: 'report invite attempted (lib.utils.eventUsageLogic)'
                payload: {
                    nameProvided: boolean
                    instanceEmailAvailable: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportFunnelCalculated: ((
            action: {
                type: 'report funnel calculated (lib.utils.eventUsageLogic)'
                payload: {
                    eventCount: number
                    actionCount: number
                    interval: string
                    funnelVizType: string | undefined
                    success: boolean
                    error: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportFunnelStepReordered: ((
            action: {
                type: 'report funnel step reordered (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonPropertyUpdated: ((
            action: {
                type: 'report person property updated (lib.utils.eventUsageLogic)'
                payload: {
                    action: 'added' | 'updated' | 'removed'
                    totalProperties: number
                    oldPropertyType: string | undefined
                    newPropertyType: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardModeToggled: ((
            action: {
                type: 'report dashboard mode toggled (lib.utils.eventUsageLogic)'
                payload: {
                    mode: DashboardMode
                    source: DashboardEventSource | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardRefreshed: ((
            action: {
                type: 'report dashboard refreshed (lib.utils.eventUsageLogic)'
                payload: {
                    lastRefreshed: string | Dayjs | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardDateRangeChanged: ((
            action: {
                type: 'report dashboard date range changed (lib.utils.eventUsageLogic)'
                payload: {
                    dateFrom: string | Dayjs | undefined
                    dateTo: string | Dayjs | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardPropertiesChanged: ((
            action: {
                type: 'report dashboard properties changed (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardPinToggled: ((
            action: {
                type: 'report dashboard pin toggled (lib.utils.eventUsageLogic)'
                payload: {
                    pinned: boolean
                    source: DashboardEventSource
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardDropdownNavigation: ((
            action: {
                type: 'report dashboard dropdown navigation (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardFrontEndUpdate: ((
            action: {
                type: 'report dashboard front end update (lib.utils.eventUsageLogic)'
                payload: {
                    attribute: 'name' | 'description' | 'tags'
                    originalLength: number
                    newLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardShareToggled: ((
            action: {
                type: 'report dashboard share toggled (lib.utils.eventUsageLogic)'
                payload: {
                    isShared: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportUpgradeModalShown: ((
            action: {
                type: 'report upgrade modal shown (lib.utils.eventUsageLogic)'
                payload: {
                    featureName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportTimezoneComponentViewed: ((
            action: {
                type: 'report timezone component viewed (lib.utils.eventUsageLogic)'
                payload: {
                    component: 'label' | 'indicator'
                    project_timezone: string | undefined
                    device_timezone: string | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportTestAccountFiltersUpdated: ((
            action: {
                type: 'report test account filters updated (lib.utils.eventUsageLogic)'
                payload: {
                    filters: Record<string, any>[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionLandingSeen: ((
            action: {
                type: 'report ingestion landing seen (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportProjectHomeItemClicked: ((
            action: {
                type: 'report project home item clicked (lib.utils.eventUsageLogic)'
                payload: {
                    module: string
                    item: string
                    extraProps: Record<string, string | number | boolean | undefined> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportProjectHomeSeen: ((
            action: {
                type: 'report project home seen (lib.utils.eventUsageLogic)'
                payload: {
                    teamHasData: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightHistoryItemClicked: ((
            action: {
                type: 'report insight history item clicked (lib.utils.eventUsageLogic)'
                payload: {
                    itemType: string
                    displayLocation: string | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportEventSearched: ((
            action: {
                type: 'report event searched (lib.utils.eventUsageLogic)'
                payload: {
                    searchTerm: string
                    extraProps: Record<string, number> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightFilterUpdated: ((
            action: {
                type: 'report insight filter updated (lib.utils.eventUsageLogic)'
                payload: {
                    type: EntityType | undefined
                    index: number
                    name: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightFilterRemoved: ((
            action: {
                type: 'report insight filter removed (lib.utils.eventUsageLogic)'
                payload: {
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightFilterAdded: ((
            action: {
                type: 'report insight filter added (lib.utils.eventUsageLogic)'
                payload: {
                    newLength: number
                    source: GraphSeriesAddedSource
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightFilterSet: ((
            action: {
                type: 'report insight filter set (lib.utils.eventUsageLogic)'
                payload: {
                    filters: { id: string | number | null; type?: EntityType | undefined }[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportEntityFilterVisibilitySet: ((
            action: {
                type: 'report entity filter visibility set (lib.utils.eventUsageLogic)'
                payload: {
                    index: number
                    visible: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPropertySelectOpened: ((
            action: {
                type: 'report property select opened (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCreatedDashboardFromModal: ((
            action: {
                type: 'report created dashboard from modal (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportSavedInsightToDashboard: ((
            action: {
                type: 'report saved insight to dashboard (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRemovedInsightFromDashboard: ((
            action: {
                type: 'report removed insight from dashboard (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightsTabReset: ((
            action: {
                type: 'report insights tab reset (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightsTableCalcToggled: ((
            action: {
                type: 'report insights table calc toggled (lib.utils.eventUsageLogic)'
                payload: {
                    mode: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightShortUrlVisited: ((
            action: {
                type: 'report insight short url visited (lib.utils.eventUsageLogic)'
                payload: {
                    valid: boolean
                    insight: InsightType | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportSavedInsightFilterUsed: ((
            action: {
                type: 'report saved insight filter used (lib.utils.eventUsageLogic)'
                payload: {
                    filterKeys: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportSavedInsightTabChanged: ((
            action: {
                type: 'report saved insight tab changed (lib.utils.eventUsageLogic)'
                payload: {
                    tab: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportSavedInsightLayoutChanged: ((
            action: {
                type: 'report saved insight layout changed (lib.utils.eventUsageLogic)'
                payload: {
                    layout: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportSavedInsightNewInsightClicked: ((
            action: {
                type: 'report saved insight new insight clicked (lib.utils.eventUsageLogic)'
                payload: {
                    insightType: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecording: ((
            action: {
                type: 'report recording (lib.utils.eventUsageLogic)'
                payload: {
                    recordingData: SessionPlayerData
                    source: RecordingWatchedSource
                    loadTime: number
                    type: SessionRecordingUsageType
                    delay: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingEventsFetched: ((
            action: {
                type: 'report recording events fetched (lib.utils.eventUsageLogic)'
                payload: {
                    numEvents: number
                    loadTime: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingScrollTo: ((
            action: {
                type: 'report recording scroll to (lib.utils.eventUsageLogic)'
                payload: {
                    rowIndex: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPayGateShown: ((
            action: {
                type: 'report pay gate shown (lib.utils.eventUsageLogic)'
                payload: {
                    identifier: AvailableFeature
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPayGateDismissed: ((
            action: {
                type: 'report pay gate dismissed (lib.utils.eventUsageLogic)'
                payload: {
                    identifier: AvailableFeature
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonMerged: ((
            action: {
                type: 'report person merged (lib.utils.eventUsageLogic)'
                payload: {
                    merge_count: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonSplit: ((
            action: {
                type: 'report person split (lib.utils.eventUsageLogic)'
                payload: {
                    merge_count: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportHelpButtonViewed: ((
            action: {
                type: 'report help button viewed (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportHelpButtonUsed: ((
            action: {
                type: 'report help button used (lib.utils.eventUsageLogic)'
                payload: {
                    help_type: HelpType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCorrelationAnalysisFeedback: ((
            action: {
                type: 'report correlation analysis feedback (lib.utils.eventUsageLogic)'
                payload: {
                    rating: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCorrelationAnalysisDetailedFeedback: ((
            action: {
                type: 'report correlation analysis detailed feedback (lib.utils.eventUsageLogic)'
                payload: {
                    rating: number
                    comments: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCorrelationInteraction: ((
            action: {
                type: 'report correlation interaction (lib.utils.eventUsageLogic)'
                payload: {
                    correlationType: FunnelCorrelationResultsType
                    action: string
                    props: Record<string, any> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportCorrelationViewed: ((
            action: {
                type: 'report correlation viewed (lib.utils.eventUsageLogic)'
                payload: {
                    filters: Partial<FilterType>
                    delay: number | undefined
                    propertiesTable: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingsListFilterAdded: ((
            action: {
                type: 'report recordings list filter added (lib.utils.eventUsageLogic)'
                payload: {
                    filterType: SessionRecordingFilterType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingsListFetched: ((
            action: {
                type: 'report recordings list fetched (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingPlayerSeekbarEventHovered: ((
            action: {
                type: 'report recording player seekbar event hovered (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingPlayerSpeedChanged: ((
            action: {
                type: 'report recording player speed changed (lib.utils.eventUsageLogic)'
                payload: {
                    newSpeed: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingPlayerSkipInactivityToggled: ((
            action: {
                type: 'report recording player skip inactivity toggled (lib.utils.eventUsageLogic)'
                payload: {
                    skipInactivity: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingConsoleFeedback: ((
            action: {
                type: 'report recording console feedback (lib.utils.eventUsageLogic)'
                payload: {
                    logCount: number
                    response: string
                    question: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingConsoleViewed: ((
            action: {
                type: 'report recording console viewed (lib.utils.eventUsageLogic)'
                payload: {
                    logCount: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportExperimentArchived: ((
            action: {
                type: 'report experiment archived (lib.utils.eventUsageLogic)'
                payload: {
                    experiment: Experiment
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportExperimentCreated: ((
            action: {
                type: 'report experiment created (lib.utils.eventUsageLogic)'
                payload: {
                    experiment: Experiment
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportExperimentViewed: ((
            action: {
                type: 'report experiment viewed (lib.utils.eventUsageLogic)'
                payload: {
                    experiment: Experiment
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportExperimentLaunched: ((
            action: {
                type: 'report experiment launched (lib.utils.eventUsageLogic)'
                payload: {
                    experiment: Experiment
                    launchDate: Dayjs
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportExperimentCompleted: ((
            action: {
                type: 'report experiment completed (lib.utils.eventUsageLogic)'
                payload: {
                    experiment: Experiment
                    endDate: Dayjs
                    duration: number
                    significant: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPropertyGroupFilterAdded: ((
            action: {
                type: 'report property group filter added (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportChangeOuterPropertyGroupFiltersType: ((
            action: {
                type: 'report change outer property group filters type (lib.utils.eventUsageLogic)'
                payload: {
                    type: FilterLogicalOperator
                    groupsLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportChangeInnerPropertyGroupFiltersType: ((
            action: {
                type: 'report change inner property group filters type (lib.utils.eventUsageLogic)'
                payload: {
                    type: FilterLogicalOperator
                    filtersLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPrimaryDashboardModalOpened: ((
            action: {
                type: 'report primary dashboard modal opened (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPrimaryDashboardChanged: ((
            action: {
                type: 'report primary dashboard changed (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionHovered: ((
            action: {
                type: 'report data management definition hovered (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionClickView: ((
            action: {
                type: 'report data management definition click view (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionClickEdit: ((
            action: {
                type: 'report data management definition click edit (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionSaveSucceeded: ((
            action: {
                type: 'report data management definition save succeeded (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                    loadTime: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionSaveFailed: ((
            action: {
                type: 'report data management definition save failed (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                    loadTime: number
                    error: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementDefinitionCancel: ((
            action: {
                type: 'report data management definition cancel (lib.utils.eventUsageLogic)'
                payload: {
                    type: TaxonomicFilterGroupType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventDefinitionsPageLoadSucceeded: ((
            action: {
                type: 'report data management event definitions page load succeeded (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                    resultsLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventDefinitionsPageLoadFailed: ((
            action: {
                type: 'report data management event definitions page load failed (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                    error: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded: ((
            action: {
                type: 'report data management event definitions page nested properties load succeeded (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed: ((
            action: {
                type: 'report data management event definitions page nested properties load failed (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                    error: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventPropertyDefinitionsPageLoadSucceeded: ((
            action: {
                type: 'report data management event property definitions page load succeeded (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                    resultsLength: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDataManagementEventPropertyDefinitionsPageLoadFailed: ((
            action: {
                type: 'report data management event property definitions page load failed (lib.utils.eventUsageLogic)'
                payload: {
                    loadTime: number
                    error: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightOpenedFromRecentInsightList: ((
            action: {
                type: 'report insight opened from recent insight list (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportRecordingOpenedFromRecentRecordingList: ((
            action: {
                type: 'report recording opened from recent recording list (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportPersonOpenedFromNewlySeenPersonsList: ((
            action: {
                type: 'report person opened from newly seen persons list (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportTeamHasIngestedEvents: ((
            action: {
                type: 'report team has ingested events (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionSelectPlatformType: ((
            action: {
                type: 'report ingestion select platform type (lib.utils.eventUsageLogic)'
                payload: {
                    platform: PlatformType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionSelectFrameworkType: ((
            action: {
                type: 'report ingestion select framework type (lib.utils.eventUsageLogic)'
                payload: {
                    framework: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionHelpClicked: ((
            action: {
                type: 'report ingestion help clicked (lib.utils.eventUsageLogic)'
                payload: {
                    type: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionTryWithBookmarkletClicked: ((
            action: {
                type: 'report ingestion try with bookmarklet clicked (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionContinueWithoutVerifying: ((
            action: {
                type: 'report ingestion continue without verifying (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionThirdPartyAboutClicked: ((
            action: {
                type: 'report ingestion third party about clicked (lib.utils.eventUsageLogic)'
                payload: {
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionThirdPartyConfigureClicked: ((
            action: {
                type: 'report ingestion third party configure clicked (lib.utils.eventUsageLogic)'
                payload: {
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionThirdPartyPluginInstalled: ((
            action: {
                type: 'report ingestion third party plugin installed (lib.utils.eventUsageLogic)'
                payload: {
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportFailedToCreateFeatureFlagWithCohort: ((
            action: {
                type: 'report failed to create feature flag with cohort (lib.utils.eventUsageLogic)'
                payload: {
                    code: string
                    detail: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInviteMembersButtonClicked: ((
            action: {
                type: 'report invite members button clicked (lib.utils.eventUsageLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportIngestionSidebarButtonClicked: ((
            action: {
                type: 'report ingestion sidebar button clicked (lib.utils.eventUsageLogic)'
                payload: {
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'utils', 'eventUsageLogic']
    pathString: 'lib.utils.eventUsageLogic'
    props: Record<string, unknown>
    reducer: (state: any, action: any, fullState: any) => {}
    reducers: {}
    selector: (state: any) => {}
    selectors: {
        realm: (state: any, props?: any) => Realm | null
        user: (state: any, props?: any) => UserType | null
    }
    sharedListeners: {}
    values: {
        realm: Realm | null
        user: UserType | null
    }
    _isKea: true
    _isKeaWithKey: false
}
