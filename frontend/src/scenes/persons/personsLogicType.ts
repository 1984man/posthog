// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonFilters, PersonLogicProps, PersonPaginatedResponse } from './personsLogic'
import type { Breadcrumb, CohortType, PersonType, PersonsTabType, TeamType } from '../../types'

export interface personsLogicType extends Logic {
    actionCreators: {
        reportPersonDetailViewed: (person: PersonType) => {
            type: 'report person detail viewed (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType
            }
        }
        setPerson: (person: PersonType | null) => {
            type: 'set person (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType | null
            }
        }
        loadPerson: (id: string) => {
            type: 'load person (scenes.persons.personsLogic.*)'
            payload: {
                id: string
            }
        }
        loadPersons: (url?: string | null) => {
            type: 'load persons (scenes.persons.personsLogic.*)'
            payload: {
                url: string | null
            }
        }
        setListFilters: (payload: PersonFilters) => {
            type: 'set list filters (scenes.persons.personsLogic.*)'
            payload: {
                payload: PersonFilters
            }
        }
        editProperty: (
            key: string,
            newValue?: string | number | boolean | null
        ) => {
            type: 'edit property (scenes.persons.personsLogic.*)'
            payload: {
                key: string
                newValue: string | number | boolean | null | undefined
            }
        }
        deleteProperty: (key: string) => {
            type: 'delete property (scenes.persons.personsLogic.*)'
            payload: {
                key: string
            }
        }
        navigateToCohort: (cohort: CohortType) => {
            type: 'navigate to cohort (scenes.persons.personsLogic.*)'
            payload: {
                cohort: CohortType
            }
        }
        navigateToTab: (tab: PersonsTabType) => {
            type: 'navigate to tab (scenes.persons.personsLogic.*)'
            payload: {
                tab: PersonsTabType
            }
        }
        setSplitMergeModalShown: (shown: boolean) => {
            type: 'set split merge modal shown (scenes.persons.personsLogic.*)'
            payload: {
                shown: boolean
            }
        }
        exportCsv: () => {
            type: 'export csv (scenes.persons.personsLogic.*)'
            payload: {
                value: true
            }
        }
        loadPersonsSuccess: (
            persons: PersonPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => {
            type: 'load persons success (scenes.persons.personsLogic.*)'
            payload: {
                persons: PersonPaginatedResponse
                payload?: {
                    url: string | null
                }
            }
        }
        loadPersonsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load persons failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                id: string
            }
        ) => {
            type: 'load person success (scenes.persons.personsLogic.*)'
            payload: {
                person: PersonType | null
                payload?: {
                    id: string
                }
            }
        }
        loadPersonFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load person failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadCohorts: () => {
            type: 'load cohorts (scenes.persons.personsLogic.*)'
            payload: any
        }
        loadCohortsSuccess: (
            cohorts: CohortType[] | null,
            payload?: any
        ) => {
            type: 'load cohorts success (scenes.persons.personsLogic.*)'
            payload: {
                cohorts: CohortType[] | null
                payload?: any
            }
        }
        loadCohortsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load cohorts failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deletePerson: () => {
            type: 'delete person (scenes.persons.personsLogic.*)'
            payload: any
        }
        deletePersonSuccess: (
            deletedPerson: boolean,
            payload?: any
        ) => {
            type: 'delete person success (scenes.persons.personsLogic.*)'
            payload: {
                deletedPerson: boolean
                payload?: any
            }
        }
        deletePersonFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete person failure (scenes.persons.personsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'report person detail viewed (scenes.persons.personsLogic.*)': 'reportPersonDetailViewed'
        'set person (scenes.persons.personsLogic.*)': 'setPerson'
        'load person (scenes.persons.personsLogic.*)': 'loadPerson'
        'load persons (scenes.persons.personsLogic.*)': 'loadPersons'
        'set list filters (scenes.persons.personsLogic.*)': 'setListFilters'
        'edit property (scenes.persons.personsLogic.*)': 'editProperty'
        'delete property (scenes.persons.personsLogic.*)': 'deleteProperty'
        'navigate to cohort (scenes.persons.personsLogic.*)': 'navigateToCohort'
        'navigate to tab (scenes.persons.personsLogic.*)': 'navigateToTab'
        'set split merge modal shown (scenes.persons.personsLogic.*)': 'setSplitMergeModalShown'
        'export csv (scenes.persons.personsLogic.*)': 'exportCsv'
        'load persons success (scenes.persons.personsLogic.*)': 'loadPersonsSuccess'
        'load persons failure (scenes.persons.personsLogic.*)': 'loadPersonsFailure'
        'load person success (scenes.persons.personsLogic.*)': 'loadPersonSuccess'
        'load person failure (scenes.persons.personsLogic.*)': 'loadPersonFailure'
        'load cohorts (scenes.persons.personsLogic.*)': 'loadCohorts'
        'load cohorts success (scenes.persons.personsLogic.*)': 'loadCohortsSuccess'
        'load cohorts failure (scenes.persons.personsLogic.*)': 'loadCohortsFailure'
        'delete person (scenes.persons.personsLogic.*)': 'deletePerson'
        'delete person success (scenes.persons.personsLogic.*)': 'deletePersonSuccess'
        'delete person failure (scenes.persons.personsLogic.*)': 'deletePersonFailure'
    }
    actionTypes: {
        reportPersonDetailViewed: 'report person detail viewed (scenes.persons.personsLogic.*)'
        setPerson: 'set person (scenes.persons.personsLogic.*)'
        loadPerson: 'load person (scenes.persons.personsLogic.*)'
        loadPersons: 'load persons (scenes.persons.personsLogic.*)'
        setListFilters: 'set list filters (scenes.persons.personsLogic.*)'
        editProperty: 'edit property (scenes.persons.personsLogic.*)'
        deleteProperty: 'delete property (scenes.persons.personsLogic.*)'
        navigateToCohort: 'navigate to cohort (scenes.persons.personsLogic.*)'
        navigateToTab: 'navigate to tab (scenes.persons.personsLogic.*)'
        setSplitMergeModalShown: 'set split merge modal shown (scenes.persons.personsLogic.*)'
        exportCsv: 'export csv (scenes.persons.personsLogic.*)'
        loadPersonsSuccess: 'load persons success (scenes.persons.personsLogic.*)'
        loadPersonsFailure: 'load persons failure (scenes.persons.personsLogic.*)'
        loadPersonSuccess: 'load person success (scenes.persons.personsLogic.*)'
        loadPersonFailure: 'load person failure (scenes.persons.personsLogic.*)'
        loadCohorts: 'load cohorts (scenes.persons.personsLogic.*)'
        loadCohortsSuccess: 'load cohorts success (scenes.persons.personsLogic.*)'
        loadCohortsFailure: 'load cohorts failure (scenes.persons.personsLogic.*)'
        deletePerson: 'delete person (scenes.persons.personsLogic.*)'
        deletePersonSuccess: 'delete person success (scenes.persons.personsLogic.*)'
        deletePersonFailure: 'delete person failure (scenes.persons.personsLogic.*)'
    }
    actions: {
        reportPersonDetailViewed: (person: PersonType) => void
        setPerson: (person: PersonType | null) => void
        loadPerson: (id: string) => void
        loadPersons: (url?: string | null) => void
        setListFilters: (payload: PersonFilters) => void
        editProperty: (key: string, newValue?: string | number | boolean | null) => void
        deleteProperty: (key: string) => void
        navigateToCohort: (cohort: CohortType) => void
        navigateToTab: (tab: PersonsTabType) => void
        setSplitMergeModalShown: (shown: boolean) => void
        exportCsv: () => void
        loadPersonsSuccess: (
            persons: PersonPaginatedResponse,
            payload?: {
                url: string | null
            }
        ) => void
        loadPersonsFailure: (error: string, errorObject?: any) => void
        loadPersonSuccess: (
            person: PersonType | null,
            payload?: {
                id: string
            }
        ) => void
        loadPersonFailure: (error: string, errorObject?: any) => void
        loadCohorts: () => void
        loadCohortsSuccess: (cohorts: CohortType[] | null, payload?: any) => void
        loadCohortsFailure: (error: string, errorObject?: any) => void
        deletePerson: () => void
        deletePersonSuccess: (deletedPerson: boolean, payload?: any) => void
        deletePersonFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        listFilters: PersonFilters
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: PersonPaginatedResponse
        person: PersonType | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
        deletedPerson: boolean
        deletedPersonLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        editProperty: ((
            action: {
                type: 'edit property (scenes.persons.personsLogic.*)'
                payload: {
                    key: string
                    newValue: string | number | boolean | null | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteProperty: ((
            action: {
                type: 'delete property (scenes.persons.personsLogic.*)'
                payload: {
                    key: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        navigateToCohort: ((
            action: {
                type: 'navigate to cohort (scenes.persons.personsLogic.*)'
                payload: {
                    cohort: CohortType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        exportCsv: ((
            action: {
                type: 'export csv (scenes.persons.personsLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'persons', 'personsLogic', '*']
    pathString: 'scenes.persons.personsLogic.*'
    props: PersonLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        listFilters: PersonFilters
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: PersonPaginatedResponse
        person: PersonType | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
        deletedPerson: boolean
        deletedPersonLoading: boolean
    }
    reducers: {
        listFilters: (state: PersonFilters, action: any, fullState: any) => PersonFilters
        activeTab: (state: PersonsTabType | null, action: any, fullState: any) => PersonsTabType | null
        splitMergeModalShown: (state: boolean, action: any, fullState: any) => boolean
        persons: (state: PersonPaginatedResponse, action: any, fullState: any) => PersonPaginatedResponse
        person: (state: PersonType | null, action: any, fullState: any) => PersonType | null
        personsLoading: (state: boolean, action: any, fullState: any) => boolean
        personLoading: (state: boolean, action: any, fullState: any) => boolean
        cohorts: (state: CohortType[] | null, action: any, fullState: any) => CohortType[] | null
        cohortsLoading: (state: boolean, action: any, fullState: any) => boolean
        deletedPerson: (state: boolean, action: any, fullState: any) => boolean
        deletedPersonLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        listFilters: PersonFilters
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: PersonPaginatedResponse
        person: PersonType | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
        deletedPerson: boolean
        deletedPersonLoading: boolean
    }
    selectors: {
        listFilters: (state: any, props?: any) => PersonFilters
        activeTab: (state: any, props?: any) => PersonsTabType | null
        splitMergeModalShown: (state: any, props?: any) => boolean
        persons: (state: any, props?: any) => PersonPaginatedResponse
        person: (state: any, props?: any) => PersonType | null
        personsLoading: (state: any, props?: any) => boolean
        personLoading: (state: any, props?: any) => boolean
        cohorts: (state: any, props?: any) => CohortType[] | null
        cohortsLoading: (state: any, props?: any) => boolean
        deletedPerson: (state: any, props?: any) => boolean
        deletedPersonLoading: (state: any, props?: any) => boolean
        currentTeam: (state: any, props?: any) => TeamType | null
        cohortId: (state: any, props?: any) => number | 'new' | undefined
        showSessionRecordings: (state: any, props?: any) => boolean
        currentTab: (state: any, props?: any) => PersonsTabType
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
        exportUrl: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        listFilters: PersonFilters
        activeTab: PersonsTabType | null
        splitMergeModalShown: boolean
        persons: PersonPaginatedResponse
        person: PersonType | null
        personsLoading: boolean
        personLoading: boolean
        cohorts: CohortType[] | null
        cohortsLoading: boolean
        deletedPerson: boolean
        deletedPersonLoading: boolean
        currentTeam: TeamType | null
        cohortId: number | 'new' | undefined
        showSessionRecordings: boolean
        currentTab: PersonsTabType
        breadcrumbs: Breadcrumb[]
        exportUrl: string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        cohortId: (arg: any) => number | 'new' | undefined
        showSessionRecordings: (
            currentTeam: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').TeamType | null
        ) => boolean
        currentTab: (activeTab: PersonsTabType | null, showSessionRecordings: boolean) => PersonsTabType
        breadcrumbs: (
            person: PersonType | null,
            location: {
                pathname: string
                search: string
                hash: string
            }
        ) => Breadcrumb[]
        exportUrl: (listFilters: PersonFilters, arg: any) => string
    }
}
