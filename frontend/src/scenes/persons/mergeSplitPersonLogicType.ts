// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActivityType, PersonIds, SplitPersonLogicProps } from './mergeSplitPersonLogic'
import type { PersonType } from '../../types'
import type { PersonFilters, PersonPaginatedResponse } from './personsLogic'

export interface mergeSplitPersonLogicType extends Logic {
    actionCreators: {
        setPerson: (person: PersonType | null) => {
            type: 'set person (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                person: PersonType | null
            }
        }
        loadPersons: (url?: string | null) => {
            type: 'load persons (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                url: string | null
            }
        }
        setListFilters: (payload: PersonFilters) => {
            type: 'set list filters (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                payload: PersonFilters
            }
        }
        setSplitMergeModalShown: (shown: boolean) => {
            type: 'set split merge modal shown (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                shown: boolean
            }
        }
        setActivity: (activity: ActivityType) => {
            type: 'set activity (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                activity: ActivityType
            }
        }
        setSelectedPersonsToMerge: (persons: PersonIds) => {
            type: 'set selected persons to merge (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                persons: PersonIds
            }
        }
        setSelectedPersonToAssignSplit: (id: string) => {
            type: 'set selected person to assign split (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                id: string
            }
        }
        cancel: () => {
            type: 'cancel (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                value: true
            }
        }
        execute: () => {
            type: 'execute (scenes.persons.mergeSplitPersonLogic.*)'
            payload: any
        }
        executeSuccess: (
            executed: boolean,
            payload?: any
        ) => {
            type: 'execute success (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                executed: boolean
                payload?: any
            }
        }
        executeFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'execute failure (scenes.persons.mergeSplitPersonLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set person (scenes.persons.mergeSplitPersonLogic.*)': 'setPerson'
        'load persons (scenes.persons.mergeSplitPersonLogic.*)': 'loadPersons'
        'set list filters (scenes.persons.mergeSplitPersonLogic.*)': 'setListFilters'
        'set split merge modal shown (scenes.persons.mergeSplitPersonLogic.*)': 'setSplitMergeModalShown'
        'set activity (scenes.persons.mergeSplitPersonLogic.*)': 'setActivity'
        'set selected persons to merge (scenes.persons.mergeSplitPersonLogic.*)': 'setSelectedPersonsToMerge'
        'set selected person to assign split (scenes.persons.mergeSplitPersonLogic.*)': 'setSelectedPersonToAssignSplit'
        'cancel (scenes.persons.mergeSplitPersonLogic.*)': 'cancel'
        'execute (scenes.persons.mergeSplitPersonLogic.*)': 'execute'
        'execute success (scenes.persons.mergeSplitPersonLogic.*)': 'executeSuccess'
        'execute failure (scenes.persons.mergeSplitPersonLogic.*)': 'executeFailure'
    }
    actionTypes: {
        setPerson: 'set person (scenes.persons.mergeSplitPersonLogic.*)'
        loadPersons: 'load persons (scenes.persons.mergeSplitPersonLogic.*)'
        setListFilters: 'set list filters (scenes.persons.mergeSplitPersonLogic.*)'
        setSplitMergeModalShown: 'set split merge modal shown (scenes.persons.mergeSplitPersonLogic.*)'
        setActivity: 'set activity (scenes.persons.mergeSplitPersonLogic.*)'
        setSelectedPersonsToMerge: 'set selected persons to merge (scenes.persons.mergeSplitPersonLogic.*)'
        setSelectedPersonToAssignSplit: 'set selected person to assign split (scenes.persons.mergeSplitPersonLogic.*)'
        cancel: 'cancel (scenes.persons.mergeSplitPersonLogic.*)'
        execute: 'execute (scenes.persons.mergeSplitPersonLogic.*)'
        executeSuccess: 'execute success (scenes.persons.mergeSplitPersonLogic.*)'
        executeFailure: 'execute failure (scenes.persons.mergeSplitPersonLogic.*)'
    }
    actions: {
        setPerson: (person: PersonType | null) => void
        loadPersons: (url?: string | null) => void
        setListFilters: (payload: PersonFilters) => void
        setSplitMergeModalShown: (shown: boolean) => void
        setActivity: (activity: ActivityType) => void
        setSelectedPersonsToMerge: (persons: PersonIds) => void
        setSelectedPersonToAssignSplit: (id: string) => void
        cancel: () => void
        execute: () => void
        executeSuccess: (executed: boolean, payload?: any) => void
        executeFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        activity: ActivityType
        person: PersonType
        selectedPersonsToMerge: PersonIds
        selectedPersonsToAssignSplit: null | string
        executed: boolean
        executedLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: number | 'new'
    listeners: {
        setListFilters: ((
            action: {
                type: 'set list filters (scenes.persons.mergeSplitPersonLogic.*)'
                payload: {
                    payload: PersonFilters
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        cancel: ((
            action: {
                type: 'cancel (scenes.persons.mergeSplitPersonLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'persons', 'mergeSplitPersonLogic', '*']
    pathString: 'scenes.persons.mergeSplitPersonLogic.*'
    props: SplitPersonLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        activity: ActivityType
        person: PersonType
        selectedPersonsToMerge: PersonIds
        selectedPersonsToAssignSplit: null | string
        executed: boolean
        executedLoading: boolean
    }
    reducers: {
        activity: (state: ActivityType, action: any, fullState: any) => ActivityType
        person: (state: PersonType, action: any, fullState: any) => PersonType
        selectedPersonsToMerge: (state: PersonIds, action: any, fullState: any) => PersonIds
        selectedPersonsToAssignSplit: (state: null | string, action: any, fullState: any) => null | string
        executed: (state: boolean, action: any, fullState: any) => boolean
        executedLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        activity: ActivityType
        person: PersonType
        selectedPersonsToMerge: PersonIds
        selectedPersonsToAssignSplit: null | string
        executed: boolean
        executedLoading: boolean
    }
    selectors: {
        activity: (state: any, props?: any) => ActivityType
        person: (state: any, props?: any) => PersonType
        selectedPersonsToMerge: (state: any, props?: any) => PersonIds
        selectedPersonsToAssignSplit: (state: any, props?: any) => null | string
        executed: (state: any, props?: any) => boolean
        executedLoading: (state: any, props?: any) => boolean
        persons: (state: any, props?: any) => PersonPaginatedResponse
    }
    sharedListeners: {}
    values: {
        activity: ActivityType
        person: PersonType
        selectedPersonsToMerge: PersonIds
        selectedPersonsToAssignSplit: null | string
        executed: boolean
        executedLoading: boolean
        persons: PersonPaginatedResponse
    }
    _isKea: true
    _isKeaWithKey: true
}
