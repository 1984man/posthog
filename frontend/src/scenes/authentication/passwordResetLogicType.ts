// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ResetResponseType, ResponseType, ValidatedTokenResponseType } from './passwordResetLogic'

export interface passwordResetLogicType extends Logic {
    actionCreators: {
        reset: ({ email }: { email: string }) => {
            type: 'reset (scenes.authentication.passwordResetLogic)'
            payload: {
                email: string
            }
        }
        resetSuccess: (
            resetResponse:
                | { success: true; email: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; email?: undefined },
            payload?: {
                email: string
            }
        ) => {
            type: 'reset success (scenes.authentication.passwordResetLogic)'
            payload: {
                resetResponse:
                    | { success: true; email: string; errorCode?: undefined; errorDetail?: undefined }
                    | { success: false; errorCode: any; errorDetail: any; email?: undefined }
                payload?: {
                    email: string
                }
            }
        }
        resetFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reset failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        validateResetToken: ({ uuid, token }: { uuid: string; token: string }) => {
            type: 'validate reset token (scenes.authentication.passwordResetLogic)'
            payload: {
                uuid: string
                token: string
            }
        }
        validateResetTokenSuccess: (
            validatedResetToken:
                | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined },
            payload?: {
                uuid: string
                token: string
            }
        ) => {
            type: 'validate reset token success (scenes.authentication.passwordResetLogic)'
            payload: {
                validatedResetToken:
                    | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                    | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined }
                payload?: {
                    uuid: string
                    token: string
                }
            }
        }
        validateResetTokenFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'validate reset token failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updatePassword: ({ password, passwordConfirm }: { password: string; passwordConfirm: string }) => {
            type: 'update password (scenes.authentication.passwordResetLogic)'
            payload: {
                password: string
                passwordConfirm: string
            }
        }
        updatePasswordSuccess: (
            newPasswordResponse:
                | { success: true; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any },
            payload?: {
                password: string
                passwordConfirm: string
            }
        ) => {
            type: 'update password success (scenes.authentication.passwordResetLogic)'
            payload: {
                newPasswordResponse:
                    | { success: true; errorCode?: undefined; errorDetail?: undefined }
                    | { success: false; errorCode: any; errorDetail: any }
                payload?: {
                    password: string
                    passwordConfirm: string
                }
            }
        }
        updatePasswordFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update password failure (scenes.authentication.passwordResetLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'reset (scenes.authentication.passwordResetLogic)': 'reset'
        'reset success (scenes.authentication.passwordResetLogic)': 'resetSuccess'
        'reset failure (scenes.authentication.passwordResetLogic)': 'resetFailure'
        'validate reset token (scenes.authentication.passwordResetLogic)': 'validateResetToken'
        'validate reset token success (scenes.authentication.passwordResetLogic)': 'validateResetTokenSuccess'
        'validate reset token failure (scenes.authentication.passwordResetLogic)': 'validateResetTokenFailure'
        'update password (scenes.authentication.passwordResetLogic)': 'updatePassword'
        'update password success (scenes.authentication.passwordResetLogic)': 'updatePasswordSuccess'
        'update password failure (scenes.authentication.passwordResetLogic)': 'updatePasswordFailure'
    }
    actionTypes: {
        reset: 'reset (scenes.authentication.passwordResetLogic)'
        resetSuccess: 'reset success (scenes.authentication.passwordResetLogic)'
        resetFailure: 'reset failure (scenes.authentication.passwordResetLogic)'
        validateResetToken: 'validate reset token (scenes.authentication.passwordResetLogic)'
        validateResetTokenSuccess: 'validate reset token success (scenes.authentication.passwordResetLogic)'
        validateResetTokenFailure: 'validate reset token failure (scenes.authentication.passwordResetLogic)'
        updatePassword: 'update password (scenes.authentication.passwordResetLogic)'
        updatePasswordSuccess: 'update password success (scenes.authentication.passwordResetLogic)'
        updatePasswordFailure: 'update password failure (scenes.authentication.passwordResetLogic)'
    }
    actions: {
        reset: ({ email }: { email: string }) => void
        resetSuccess: (
            resetResponse:
                | { success: true; email: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; email?: undefined },
            payload?: {
                email: string
            }
        ) => void
        resetFailure: (error: string, errorObject?: any) => void
        validateResetToken: ({ uuid, token }: { uuid: string; token: string }) => void
        validateResetTokenSuccess: (
            validatedResetToken:
                | { success: true; token: string; uuid: string; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any; token?: undefined; uuid?: undefined },
            payload?: {
                uuid: string
                token: string
            }
        ) => void
        validateResetTokenFailure: (error: string, errorObject?: any) => void
        updatePassword: ({ password, passwordConfirm }: { password: string; passwordConfirm: string }) => void
        updatePasswordSuccess: (
            newPasswordResponse:
                | { success: true; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any },
            payload?: {
                password: string
                passwordConfirm: string
            }
        ) => void
        updatePasswordFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        resetResponse: ResetResponseType | null
        resetResponseLoading: boolean
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        newPasswordResponse: ResponseType | null
        newPasswordResponseLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        updatePasswordSuccess: ((
            action: {
                type: 'update password success (scenes.authentication.passwordResetLogic)'
                payload: {
                    newPasswordResponse:
                        | { success: true; errorCode?: undefined; errorDetail?: undefined }
                        | { success: false; errorCode: any; errorDetail: any }
                    payload?: {
                        password: string
                        passwordConfirm: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'passwordResetLogic']
    pathString: 'scenes.authentication.passwordResetLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        resetResponse: ResetResponseType | null
        resetResponseLoading: boolean
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        newPasswordResponse: ResponseType | null
        newPasswordResponseLoading: boolean
    }
    reducers: {
        resetResponse: (state: ResetResponseType | null, action: any, fullState: any) => ResetResponseType | null
        resetResponseLoading: (state: boolean, action: any, fullState: any) => boolean
        validatedResetToken: (
            state: ValidatedTokenResponseType | null,
            action: any,
            fullState: any
        ) => ValidatedTokenResponseType | null
        validatedResetTokenLoading: (state: boolean, action: any, fullState: any) => boolean
        newPasswordResponse: (state: ResponseType | null, action: any, fullState: any) => ResponseType | null
        newPasswordResponseLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        resetResponse: ResetResponseType | null
        resetResponseLoading: boolean
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        newPasswordResponse: ResponseType | null
        newPasswordResponseLoading: boolean
    }
    selectors: {
        resetResponse: (state: any, props?: any) => ResetResponseType | null
        resetResponseLoading: (state: any, props?: any) => boolean
        validatedResetToken: (state: any, props?: any) => ValidatedTokenResponseType | null
        validatedResetTokenLoading: (state: any, props?: any) => boolean
        newPasswordResponse: (state: any, props?: any) => ResponseType | null
        newPasswordResponseLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        resetResponse: ResetResponseType | null
        resetResponseLoading: boolean
        validatedResetToken: ValidatedTokenResponseType | null
        validatedResetTokenLoading: boolean
        newPasswordResponse: ResponseType | null
        newPasswordResponseLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
