// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PreflightStatus } from '../../types'
import type { AuthenticateResponseType, PrecheckResponseType } from './loginLogic'

export interface loginLogicType extends Logic {
    actionCreators: {
        precheck: ({ email }: { email: string }) => {
            type: 'precheck (scenes.authentication.loginLogic)'
            payload: {
                email: string
            }
        }
        precheckSuccess: (
            precheckResponse: PrecheckResponseType,
            payload?: {
                email: string
            }
        ) => {
            type: 'precheck success (scenes.authentication.loginLogic)'
            payload: {
                precheckResponse: PrecheckResponseType
                payload?: {
                    email: string
                }
            }
        }
        precheckFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'precheck failure (scenes.authentication.loginLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        authenticate: ({ email, password }: { email: string; password: string }) => {
            type: 'authenticate (scenes.authentication.loginLogic)'
            payload: {
                email: string
                password: string
            }
        }
        authenticateSuccess: (
            authenticateResponse:
                | { success: true; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any },
            payload?: {
                email: string
                password: string
            }
        ) => {
            type: 'authenticate success (scenes.authentication.loginLogic)'
            payload: {
                authenticateResponse:
                    | { success: true; errorCode?: undefined; errorDetail?: undefined }
                    | { success: false; errorCode: any; errorDetail: any }
                payload?: {
                    email: string
                    password: string
                }
            }
        }
        authenticateFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'authenticate failure (scenes.authentication.loginLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'precheck (scenes.authentication.loginLogic)': 'precheck'
        'precheck success (scenes.authentication.loginLogic)': 'precheckSuccess'
        'precheck failure (scenes.authentication.loginLogic)': 'precheckFailure'
        'authenticate (scenes.authentication.loginLogic)': 'authenticate'
        'authenticate success (scenes.authentication.loginLogic)': 'authenticateSuccess'
        'authenticate failure (scenes.authentication.loginLogic)': 'authenticateFailure'
    }
    actionTypes: {
        precheck: 'precheck (scenes.authentication.loginLogic)'
        precheckSuccess: 'precheck success (scenes.authentication.loginLogic)'
        precheckFailure: 'precheck failure (scenes.authentication.loginLogic)'
        authenticate: 'authenticate (scenes.authentication.loginLogic)'
        authenticateSuccess: 'authenticate success (scenes.authentication.loginLogic)'
        authenticateFailure: 'authenticate failure (scenes.authentication.loginLogic)'
    }
    actions: {
        precheck: ({ email }: { email: string }) => void
        precheckSuccess: (
            precheckResponse: PrecheckResponseType,
            payload?: {
                email: string
            }
        ) => void
        precheckFailure: (error: string, errorObject?: any) => void
        authenticate: ({ email, password }: { email: string; password: string }) => void
        authenticateSuccess: (
            authenticateResponse:
                | { success: true; errorCode?: undefined; errorDetail?: undefined }
                | { success: false; errorCode: any; errorDetail: any },
            payload?: {
                email: string
                password: string
            }
        ) => void
        authenticateFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        precheckResponse: PrecheckResponseType
        precheckResponseLoading: boolean
        authenticateResponse: AuthenticateResponseType | null
        authenticateResponseLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        authenticateSuccess: ((
            action: {
                type: 'authenticate success (scenes.authentication.loginLogic)'
                payload: {
                    authenticateResponse:
                        | { success: true; errorCode?: undefined; errorDetail?: undefined }
                        | { success: false; errorCode: any; errorDetail: any }
                    payload?: {
                        email: string
                        password: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'loginLogic']
    pathString: 'scenes.authentication.loginLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        precheckResponse: PrecheckResponseType
        precheckResponseLoading: boolean
        authenticateResponse: AuthenticateResponseType | null
        authenticateResponseLoading: boolean
    }
    reducers: {
        precheckResponse: (state: PrecheckResponseType, action: any, fullState: any) => PrecheckResponseType
        precheckResponseLoading: (state: boolean, action: any, fullState: any) => boolean
        authenticateResponse: (
            state: AuthenticateResponseType | null,
            action: any,
            fullState: any
        ) => AuthenticateResponseType | null
        authenticateResponseLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        precheckResponse: PrecheckResponseType
        precheckResponseLoading: boolean
        authenticateResponse: AuthenticateResponseType | null
        authenticateResponseLoading: boolean
    }
    selectors: {
        precheckResponse: (state: any, props?: any) => PrecheckResponseType
        precheckResponseLoading: (state: any, props?: any) => boolean
        authenticateResponse: (state: any, props?: any) => AuthenticateResponseType | null
        authenticateResponseLoading: (state: any, props?: any) => boolean
        preflight: (state: any, props?: any) => PreflightStatus | null
    }
    sharedListeners: {}
    values: {
        precheckResponse: PrecheckResponseType
        precheckResponseLoading: boolean
        authenticateResponse: AuthenticateResponseType | null
        authenticateResponseLoading: boolean
        preflight: PreflightStatus | null
    }
    _isKea: true
    _isKeaWithKey: false
}
