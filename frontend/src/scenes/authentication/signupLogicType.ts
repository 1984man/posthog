// Generated by kea-typegen on Thu, 09 Jun 2022 19:49:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AccountResponse } from './signupLogic'

export interface signupLogicType extends Logic {
    actionCreators: {
        setInitialEmail: (email: string) => {
            type: 'set initial email (scenes.authentication.signupLogic)'
            payload: {
                email: string
            }
        }
        setFormSubmitted: (submitted: boolean) => {
            type: 'set form submitted (scenes.authentication.signupLogic)'
            payload: {
                submitted: boolean
            }
        }
        signup: (payload: any) => {
            type: 'signup (scenes.authentication.signupLogic)'
            payload: any
        }
        signupSuccess: (
            signupResponse: AccountResponse | null,
            payload?: any
        ) => {
            type: 'signup success (scenes.authentication.signupLogic)'
            payload: {
                signupResponse: AccountResponse | null
                payload?: any
            }
        }
        signupFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'signup failure (scenes.authentication.signupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set initial email (scenes.authentication.signupLogic)': 'setInitialEmail'
        'set form submitted (scenes.authentication.signupLogic)': 'setFormSubmitted'
        'signup (scenes.authentication.signupLogic)': 'signup'
        'signup success (scenes.authentication.signupLogic)': 'signupSuccess'
        'signup failure (scenes.authentication.signupLogic)': 'signupFailure'
    }
    actionTypes: {
        setInitialEmail: 'set initial email (scenes.authentication.signupLogic)'
        setFormSubmitted: 'set form submitted (scenes.authentication.signupLogic)'
        signup: 'signup (scenes.authentication.signupLogic)'
        signupSuccess: 'signup success (scenes.authentication.signupLogic)'
        signupFailure: 'signup failure (scenes.authentication.signupLogic)'
    }
    actions: {
        setInitialEmail: (email: string) => void
        setFormSubmitted: (submitted: boolean) => void
        signup: (payload: any) => void
        signupSuccess: (signupResponse: AccountResponse | null, payload?: any) => void
        signupFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        initialEmail: string
        formSubmitted: boolean
        signupResponse: AccountResponse | null
        signupResponseLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        signupSuccess: ((
            action: {
                type: 'signup success (scenes.authentication.signupLogic)'
                payload: {
                    signupResponse: AccountResponse | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'authentication', 'signupLogic']
    pathString: 'scenes.authentication.signupLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        initialEmail: string
        formSubmitted: boolean
        signupResponse: AccountResponse | null
        signupResponseLoading: boolean
    }
    reducers: {
        initialEmail: (state: string, action: any, fullState: any) => string
        formSubmitted: (state: boolean, action: any, fullState: any) => boolean
        signupResponse: (state: AccountResponse | null, action: any, fullState: any) => AccountResponse | null
        signupResponseLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        initialEmail: string
        formSubmitted: boolean
        signupResponse: AccountResponse | null
        signupResponseLoading: boolean
    }
    selectors: {
        initialEmail: (state: any, props?: any) => string
        formSubmitted: (state: any, props?: any) => boolean
        signupResponse: (state: any, props?: any) => AccountResponse | null
        signupResponseLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        initialEmail: string
        formSubmitted: boolean
        signupResponse: AccountResponse | null
        signupResponseLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
