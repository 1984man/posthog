// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { BillingType, PlanInterface } from '../../types'
import type { Scene } from '../sceneTypes'
import type { BillingAlertType } from './billingLogic'

export interface billingLogicType extends Logic {
    actionCreators: {
        registerInstrumentationProps: () => {
            type: 'register instrumentation props (scenes.billing.billingLogic)'
            payload: {
                value: true
            }
        }
        loadBilling: () => {
            type: 'load billing (scenes.billing.billingLogic)'
            payload: any
        }
        loadBillingSuccess: (
            billing: BillingType,
            payload?: any
        ) => {
            type: 'load billing success (scenes.billing.billingLogic)'
            payload: {
                billing: BillingType
                payload?: any
            }
        }
        loadBillingFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load billing failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setBillingLimit: (billing: BillingType) => {
            type: 'set billing limit (scenes.billing.billingLogic)'
            payload: BillingType
        }
        setBillingLimitSuccess: (
            billing: BillingType,
            payload?: BillingType
        ) => {
            type: 'set billing limit success (scenes.billing.billingLogic)'
            payload: {
                billing: BillingType
                payload?: BillingType
            }
        }
        setBillingLimitFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set billing limit failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPlans: () => {
            type: 'load plans (scenes.billing.billingLogic)'
            payload: any
        }
        loadPlansSuccess: (
            plans: PlanInterface[],
            payload?: any
        ) => {
            type: 'load plans success (scenes.billing.billingLogic)'
            payload: {
                plans: PlanInterface[]
                payload?: any
            }
        }
        loadPlansFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load plans failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        subscribe: (plan: any) => {
            type: 'subscribe (scenes.billing.billingLogic)'
            payload: any
        }
        subscribeSuccess: (
            billingSubscription: BillingType | null,
            payload?: any
        ) => {
            type: 'subscribe success (scenes.billing.billingLogic)'
            payload: {
                billingSubscription: BillingType | null
                payload?: any
            }
        }
        subscribeFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'subscribe failure (scenes.billing.billingLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'register instrumentation props (scenes.billing.billingLogic)': 'registerInstrumentationProps'
        'load billing (scenes.billing.billingLogic)': 'loadBilling'
        'load billing success (scenes.billing.billingLogic)': 'loadBillingSuccess'
        'load billing failure (scenes.billing.billingLogic)': 'loadBillingFailure'
        'set billing limit (scenes.billing.billingLogic)': 'setBillingLimit'
        'set billing limit success (scenes.billing.billingLogic)': 'setBillingLimitSuccess'
        'set billing limit failure (scenes.billing.billingLogic)': 'setBillingLimitFailure'
        'load plans (scenes.billing.billingLogic)': 'loadPlans'
        'load plans success (scenes.billing.billingLogic)': 'loadPlansSuccess'
        'load plans failure (scenes.billing.billingLogic)': 'loadPlansFailure'
        'subscribe (scenes.billing.billingLogic)': 'subscribe'
        'subscribe success (scenes.billing.billingLogic)': 'subscribeSuccess'
        'subscribe failure (scenes.billing.billingLogic)': 'subscribeFailure'
    }
    actionTypes: {
        registerInstrumentationProps: 'register instrumentation props (scenes.billing.billingLogic)'
        loadBilling: 'load billing (scenes.billing.billingLogic)'
        loadBillingSuccess: 'load billing success (scenes.billing.billingLogic)'
        loadBillingFailure: 'load billing failure (scenes.billing.billingLogic)'
        setBillingLimit: 'set billing limit (scenes.billing.billingLogic)'
        setBillingLimitSuccess: 'set billing limit success (scenes.billing.billingLogic)'
        setBillingLimitFailure: 'set billing limit failure (scenes.billing.billingLogic)'
        loadPlans: 'load plans (scenes.billing.billingLogic)'
        loadPlansSuccess: 'load plans success (scenes.billing.billingLogic)'
        loadPlansFailure: 'load plans failure (scenes.billing.billingLogic)'
        subscribe: 'subscribe (scenes.billing.billingLogic)'
        subscribeSuccess: 'subscribe success (scenes.billing.billingLogic)'
        subscribeFailure: 'subscribe failure (scenes.billing.billingLogic)'
    }
    actions: {
        registerInstrumentationProps: () => void
        loadBilling: () => void
        loadBillingSuccess: (billing: BillingType, payload?: any) => void
        loadBillingFailure: (error: string, errorObject?: any) => void
        setBillingLimit: (billing: BillingType) => void
        setBillingLimitSuccess: (billing: BillingType, payload?: BillingType) => void
        setBillingLimitFailure: (error: string, errorObject?: any) => void
        loadPlans: () => void
        loadPlansSuccess: (plans: PlanInterface[], payload?: any) => void
        loadPlansFailure: (error: string, errorObject?: any) => void
        subscribe: (plan: any) => void
        subscribeSuccess: (billingSubscription: BillingType | null, payload?: any) => void
        subscribeFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        billing: BillingType | null
        billingLoading: boolean
        plans: PlanInterface[]
        plansLoading: boolean
        billingSubscription: BillingType | null
        billingSubscriptionLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        subscribeSuccess: ((
            action: {
                type: 'subscribe success (scenes.billing.billingLogic)'
                payload: {
                    billingSubscription: BillingType | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        registerInstrumentationProps: ((
            action: {
                type: 'register instrumentation props (scenes.billing.billingLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'billing', 'billingLogic']
    pathString: 'scenes.billing.billingLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        billing: BillingType | null
        billingLoading: boolean
        plans: PlanInterface[]
        plansLoading: boolean
        billingSubscription: BillingType | null
        billingSubscriptionLoading: boolean
    }
    reducers: {
        billing: (state: BillingType | null, action: any, fullState: any) => BillingType | null
        billingLoading: (state: boolean, action: any, fullState: any) => boolean
        plans: (state: PlanInterface[], action: any, fullState: any) => PlanInterface[]
        plansLoading: (state: boolean, action: any, fullState: any) => boolean
        billingSubscription: (state: BillingType | null, action: any, fullState: any) => BillingType | null
        billingSubscriptionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        billing: BillingType | null
        billingLoading: boolean
        plans: PlanInterface[]
        plansLoading: boolean
        billingSubscription: BillingType | null
        billingSubscriptionLoading: boolean
    }
    selectors: {
        billing: (state: any, props?: any) => BillingType | null
        billingLoading: (state: any, props?: any) => boolean
        plans: (state: any, props?: any) => PlanInterface[]
        plansLoading: (state: any, props?: any) => boolean
        billingSubscription: (state: any, props?: any) => BillingType | null
        billingSubscriptionLoading: (state: any, props?: any) => boolean
        eventAllocation: (state: any, props?: any) => number | null
        percentage: (state: any, props?: any) => number | null
        strokeColor: (state: any, props?: any) => string | Record<string, string>
        alertToShow: (state: any, props?: any) => BillingAlertType | undefined
    }
    sharedListeners: {}
    values: {
        billing: BillingType | null
        billingLoading: boolean
        plans: PlanInterface[]
        plansLoading: boolean
        billingSubscription: BillingType | null
        billingSubscriptionLoading: boolean
        eventAllocation: number | null
        percentage: number | null
        strokeColor: string | Record<string, string>
        alertToShow: BillingAlertType | undefined
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        eventAllocation: (billing: BillingType | null) => number | null
        percentage: (eventAllocation: number | null, billing: BillingType | null) => number | null
        strokeColor: (percentage: number | null) => string | Record<string, string>
        alertToShow: (
            eventAllocation: number | null,
            percentage: number | null,
            billing: BillingType | null,
            scene: Scene | null
        ) => BillingAlertType | undefined
    }
}
