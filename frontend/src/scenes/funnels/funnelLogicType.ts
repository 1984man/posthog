// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AnyPropertyFilter, AvailableFeature, BinCountValue, Breakdown, BreakdownKeyType, BreakdownType, ChartDisplayType, EntityType, EventType, FilterType, FlattenedFunnelStep, FlattenedFunnelStepByBreakdown, FunnelAPIResponse, FunnelConversionWindowTimeUnit, FunnelCorrelation, FunnelCorrelationResultsType, FunnelCorrelationType, FunnelPathType, FunnelStep, FunnelStepRangeEntityFilter, FunnelStepReference, FunnelStepWithConversionMetrics, FunnelStepWithNestedBreakdown, FunnelTimeConversionMetrics, FunnelVizType, FunnelsTimeConversionBins, InsightLogicProps, InsightModel, InsightType, IntervalType, PathType, PersonProperty, PropertyGroupFilter, RetentionType, StepOrderValue, TeamType } from '../../types'
import type { openPersonsModelProps } from './funnelLogic'
import type { Scene } from '../sceneTypes'
import type { FunnelLayout, ShownAsValue } from '../../lib/constants'

export interface funnelLogicType extends Logic {
    actionCreators: {
        loadResults: (refresh?: any) => {
            type: 'load results (scenes.funnels.funnelLogic.*)'
            payload: {
                refresh: any
                queryId: string
            }
        }
        toggleVisibility: (index: number) => {
            type: 'toggle visibility (scenes.funnels.funnelLogic.*)'
            payload: {
                index: number
            }
        }
        setHiddenById: (entry: Record<string, boolean | undefined>) => {
            type: 'set hidden by id (scenes.funnels.funnelLogic.*)'
            payload: {
                entry: Record<string, boolean | undefined>
            }
        }
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load results success (scenes.funnels.funnelLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        clearFunnel: () => {
            type: 'clear funnel (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        setFilters: (
            filters: Partial<FilterType>,
            refresh?: boolean,
            mergeWithExisting?: boolean
        ) => {
            type: 'set filters (scenes.funnels.funnelLogic.*)'
            payload: {
                filters: Partial<FilterType>
                refresh: boolean
                mergeWithExisting: boolean
            }
        }
        setEventExclusionFilters: (filters: Partial<FilterType>) => {
            type: 'set event exclusion filters (scenes.funnels.funnelLogic.*)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        setOneEventExclusionFilter: (
            eventFilter: FunnelStepRangeEntityFilter,
            index: number
        ) => {
            type: 'set one event exclusion filter (scenes.funnels.funnelLogic.*)'
            payload: {
                eventFilter: FunnelStepRangeEntityFilter
                index: number
            }
        }
        saveFunnelInsight: (name: string) => {
            type: 'save funnel insight (scenes.funnels.funnelLogic.*)'
            payload: {
                name: string
            }
        }
        openPersonsModalForStep: ({ step, converted }: openPersonsModelProps) => {
            type: 'open persons modal for step (scenes.funnels.funnelLogic.*)'
            payload: {
                step: FunnelStep
                converted: boolean
            }
        }
        openPersonsModalForSeries: ({
            step,
            series,
            converted,
        }: {
            step: FunnelStep
            series: Omit<FunnelStepWithConversionMetrics, 'nested_breakdown'>
            converted: boolean
        }) => {
            type: 'open persons modal for series (scenes.funnels.funnelLogic.*)'
            payload: {
                step: FunnelStep
                series: Omit<FunnelStepWithConversionMetrics, 'nested_breakdown'>
                converted: boolean
            }
        }
        openCorrelationPersonsModal: (
            correlation: FunnelCorrelation,
            success: boolean
        ) => {
            type: 'open correlation persons modal (scenes.funnels.funnelLogic.*)'
            payload: {
                correlation: FunnelCorrelation
                success: boolean
            }
        }
        setStepReference: (stepReference: FunnelStepReference) => {
            type: 'set step reference (scenes.funnels.funnelLogic.*)'
            payload: {
                stepReference: FunnelStepReference
            }
        }
        changeStepRange: (
            funnel_from_step?: number,
            funnel_to_step?: number
        ) => {
            type: 'change step range (scenes.funnels.funnelLogic.*)'
            payload: {
                funnel_from_step: number | undefined
                funnel_to_step: number | undefined
            }
        }
        setIsGroupingOutliers: (isGroupingOutliers: any) => {
            type: 'set is grouping outliers (scenes.funnels.funnelLogic.*)'
            payload: {
                isGroupingOutliers: any
            }
        }
        setBinCount: (binCount: BinCountValue) => {
            type: 'set bin count (scenes.funnels.funnelLogic.*)'
            payload: {
                binCount: BinCountValue
            }
        }
        toggleVisibilityByBreakdown: (breakdownValue?: BreakdownKeyType) => {
            type: 'toggle visibility by breakdown (scenes.funnels.funnelLogic.*)'
            payload: {
                breakdownValue: BreakdownKeyType | undefined
            }
        }
        toggleAdvancedMode: () => {
            type: 'toggle advanced mode (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        setCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set correlation types (scenes.funnels.funnelLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => {
            type: 'set property correlation types (scenes.funnels.funnelLogic.*)'
            payload: {
                types: FunnelCorrelationType[]
            }
        }
        setCorrelationDetailedFeedback: (comment: string) => {
            type: 'set correlation detailed feedback (scenes.funnels.funnelLogic.*)'
            payload: {
                comment: string
            }
        }
        setCorrelationFeedbackRating: (rating: number) => {
            type: 'set correlation feedback rating (scenes.funnels.funnelLogic.*)'
            payload: {
                rating: number
            }
        }
        setCorrelationDetailedFeedbackVisible: (visible: boolean) => {
            type: 'set correlation detailed feedback visible (scenes.funnels.funnelLogic.*)'
            payload: {
                visible: boolean
            }
        }
        sendCorrelationAnalysisFeedback: () => {
            type: 'send correlation analysis feedback (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        hideSkewWarning: () => {
            type: 'hide skew warning (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        hideCorrelationAnalysisFeedback: () => {
            type: 'hide correlation analysis feedback (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        setFunnelCorrelationDetails: (payload: FunnelCorrelation | null) => {
            type: 'set funnel correlation details (scenes.funnels.funnelLogic.*)'
            payload: {
                payload: FunnelCorrelation | null
            }
        }
        setPropertyNames: (propertyNames: string[]) => {
            type: 'set property names (scenes.funnels.funnelLogic.*)'
            payload: {
                propertyNames: string[]
            }
        }
        excludePropertyFromProject: (propertyName: string) => {
            type: 'exclude property from project (scenes.funnels.funnelLogic.*)'
            payload: {
                propertyName: string
            }
        }
        excludeEventFromProject: (eventName: string) => {
            type: 'exclude event from project (scenes.funnels.funnelLogic.*)'
            payload: {
                eventName: string
            }
        }
        excludeEventPropertyFromProject: (
            eventName: string,
            propertyName: string
        ) => {
            type: 'exclude event property from project (scenes.funnels.funnelLogic.*)'
            payload: {
                eventName: string
                propertyName: string
            }
        }
        addNestedTableExpandedKey: (expandKey: string) => {
            type: 'add nested table expanded key (scenes.funnels.funnelLogic.*)'
            payload: {
                expandKey: string
            }
        }
        removeNestedTableExpandedKey: (expandKey: string) => {
            type: 'remove nested table expanded key (scenes.funnels.funnelLogic.*)'
            payload: {
                expandKey: string
            }
        }
        showTooltip: (
            origin: [number, number, number],
            stepIndex: number,
            series: FunnelStepWithConversionMetrics
        ) => {
            type: 'show tooltip (scenes.funnels.funnelLogic.*)'
            payload: {
                origin: [number, number, number]
                stepIndex: number
                series: FunnelStepWithConversionMetrics
            }
        }
        hideTooltip: () => {
            type: 'hide tooltip (scenes.funnels.funnelLogic.*)'
            payload: {
                value: true
            }
        }
        loadPeople: (steps: any) => {
            type: 'load people (scenes.funnels.funnelLogic.*)'
            payload: any
        }
        loadPeopleSuccess: (
            people: any[],
            payload?: any
        ) => {
            type: 'load people success (scenes.funnels.funnelLogic.*)'
            payload: {
                people: any[]
                payload?: any
            }
        }
        loadPeopleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load people failure (scenes.funnels.funnelLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadCorrelations: (_: any) => {
            type: 'load correlations (scenes.funnels.funnelLogic.*)'
            payload: any
        }
        loadCorrelationsSuccess: (
            correlations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Events
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: any
        ) => {
            type: 'load correlations success (scenes.funnels.funnelLogic.*)'
            payload: {
                correlations: {
                    events: {
                        result_type: FunnelCorrelationResultsType.Events
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                        correlation_type: FunnelCorrelationType
                    }[]
                }
                payload?: any
            }
        }
        loadCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load correlations failure (scenes.funnels.funnelLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPropertyCorrelations: (_: any) => {
            type: 'load property correlations (scenes.funnels.funnelLogic.*)'
            payload: any
        }
        loadPropertyCorrelationsSuccess: (
            propertyCorrelations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Properties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: any
        ) => {
            type: 'load property correlations success (scenes.funnels.funnelLogic.*)'
            payload: {
                propertyCorrelations: {
                    events: {
                        result_type: FunnelCorrelationResultsType.Properties
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                        correlation_type: FunnelCorrelationType
                    }[]
                }
                payload?: any
            }
        }
        loadPropertyCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load property correlations failure (scenes.funnels.funnelLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadEventWithPropertyCorrelations: (eventName: string) => {
            type: 'load event with property correlations (scenes.funnels.funnelLogic.*)'
            payload: string
        }
        loadEventWithPropertyCorrelationsSuccess: (
            eventWithPropertyCorrelations: {
                [x: string]: {
                    result_type: FunnelCorrelationResultsType.EventWithProperties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: string
        ) => {
            type: 'load event with property correlations success (scenes.funnels.funnelLogic.*)'
            payload: {
                eventWithPropertyCorrelations: {
                    [x: string]: {
                        result_type: FunnelCorrelationResultsType.EventWithProperties
                        event: Pick<EventType, 'properties' | 'event' | 'elements'>
                        odds_ratio: number
                        success_count: number
                        success_people_url: string
                        failure_count: number
                        failure_people_url: string
                        correlation_type: FunnelCorrelationType
                    }[]
                }
                payload?: string
            }
        }
        loadEventWithPropertyCorrelationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event with property correlations failure (scenes.funnels.funnelLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load results (scenes.funnels.funnelLogic.*)': 'loadResults'
        'toggle visibility (scenes.funnels.funnelLogic.*)': 'toggleVisibility'
        'set hidden by id (scenes.funnels.funnelLogic.*)': 'setHiddenById'
        'load results success (scenes.funnels.funnelLogic.*)': 'loadResultsSuccess'
        'clear funnel (scenes.funnels.funnelLogic.*)': 'clearFunnel'
        'set filters (scenes.funnels.funnelLogic.*)': 'setFilters'
        'set event exclusion filters (scenes.funnels.funnelLogic.*)': 'setEventExclusionFilters'
        'set one event exclusion filter (scenes.funnels.funnelLogic.*)': 'setOneEventExclusionFilter'
        'save funnel insight (scenes.funnels.funnelLogic.*)': 'saveFunnelInsight'
        'open persons modal for step (scenes.funnels.funnelLogic.*)': 'openPersonsModalForStep'
        'open persons modal for series (scenes.funnels.funnelLogic.*)': 'openPersonsModalForSeries'
        'open correlation persons modal (scenes.funnels.funnelLogic.*)': 'openCorrelationPersonsModal'
        'set step reference (scenes.funnels.funnelLogic.*)': 'setStepReference'
        'change step range (scenes.funnels.funnelLogic.*)': 'changeStepRange'
        'set is grouping outliers (scenes.funnels.funnelLogic.*)': 'setIsGroupingOutliers'
        'set bin count (scenes.funnels.funnelLogic.*)': 'setBinCount'
        'toggle visibility by breakdown (scenes.funnels.funnelLogic.*)': 'toggleVisibilityByBreakdown'
        'toggle advanced mode (scenes.funnels.funnelLogic.*)': 'toggleAdvancedMode'
        'set correlation types (scenes.funnels.funnelLogic.*)': 'setCorrelationTypes'
        'set property correlation types (scenes.funnels.funnelLogic.*)': 'setPropertyCorrelationTypes'
        'set correlation detailed feedback (scenes.funnels.funnelLogic.*)': 'setCorrelationDetailedFeedback'
        'set correlation feedback rating (scenes.funnels.funnelLogic.*)': 'setCorrelationFeedbackRating'
        'set correlation detailed feedback visible (scenes.funnels.funnelLogic.*)': 'setCorrelationDetailedFeedbackVisible'
        'send correlation analysis feedback (scenes.funnels.funnelLogic.*)': 'sendCorrelationAnalysisFeedback'
        'hide skew warning (scenes.funnels.funnelLogic.*)': 'hideSkewWarning'
        'hide correlation analysis feedback (scenes.funnels.funnelLogic.*)': 'hideCorrelationAnalysisFeedback'
        'set funnel correlation details (scenes.funnels.funnelLogic.*)': 'setFunnelCorrelationDetails'
        'set property names (scenes.funnels.funnelLogic.*)': 'setPropertyNames'
        'exclude property from project (scenes.funnels.funnelLogic.*)': 'excludePropertyFromProject'
        'exclude event from project (scenes.funnels.funnelLogic.*)': 'excludeEventFromProject'
        'exclude event property from project (scenes.funnels.funnelLogic.*)': 'excludeEventPropertyFromProject'
        'add nested table expanded key (scenes.funnels.funnelLogic.*)': 'addNestedTableExpandedKey'
        'remove nested table expanded key (scenes.funnels.funnelLogic.*)': 'removeNestedTableExpandedKey'
        'show tooltip (scenes.funnels.funnelLogic.*)': 'showTooltip'
        'hide tooltip (scenes.funnels.funnelLogic.*)': 'hideTooltip'
        'load people (scenes.funnels.funnelLogic.*)': 'loadPeople'
        'load people success (scenes.funnels.funnelLogic.*)': 'loadPeopleSuccess'
        'load people failure (scenes.funnels.funnelLogic.*)': 'loadPeopleFailure'
        'load correlations (scenes.funnels.funnelLogic.*)': 'loadCorrelations'
        'load correlations success (scenes.funnels.funnelLogic.*)': 'loadCorrelationsSuccess'
        'load correlations failure (scenes.funnels.funnelLogic.*)': 'loadCorrelationsFailure'
        'load property correlations (scenes.funnels.funnelLogic.*)': 'loadPropertyCorrelations'
        'load property correlations success (scenes.funnels.funnelLogic.*)': 'loadPropertyCorrelationsSuccess'
        'load property correlations failure (scenes.funnels.funnelLogic.*)': 'loadPropertyCorrelationsFailure'
        'load event with property correlations (scenes.funnels.funnelLogic.*)': 'loadEventWithPropertyCorrelations'
        'load event with property correlations success (scenes.funnels.funnelLogic.*)': 'loadEventWithPropertyCorrelationsSuccess'
        'load event with property correlations failure (scenes.funnels.funnelLogic.*)': 'loadEventWithPropertyCorrelationsFailure'
    }
    actionTypes: {
        loadResults: 'load results (scenes.funnels.funnelLogic.*)'
        toggleVisibility: 'toggle visibility (scenes.funnels.funnelLogic.*)'
        setHiddenById: 'set hidden by id (scenes.funnels.funnelLogic.*)'
        loadResultsSuccess: 'load results success (scenes.funnels.funnelLogic.*)'
        clearFunnel: 'clear funnel (scenes.funnels.funnelLogic.*)'
        setFilters: 'set filters (scenes.funnels.funnelLogic.*)'
        setEventExclusionFilters: 'set event exclusion filters (scenes.funnels.funnelLogic.*)'
        setOneEventExclusionFilter: 'set one event exclusion filter (scenes.funnels.funnelLogic.*)'
        saveFunnelInsight: 'save funnel insight (scenes.funnels.funnelLogic.*)'
        openPersonsModalForStep: 'open persons modal for step (scenes.funnels.funnelLogic.*)'
        openPersonsModalForSeries: 'open persons modal for series (scenes.funnels.funnelLogic.*)'
        openCorrelationPersonsModal: 'open correlation persons modal (scenes.funnels.funnelLogic.*)'
        setStepReference: 'set step reference (scenes.funnels.funnelLogic.*)'
        changeStepRange: 'change step range (scenes.funnels.funnelLogic.*)'
        setIsGroupingOutliers: 'set is grouping outliers (scenes.funnels.funnelLogic.*)'
        setBinCount: 'set bin count (scenes.funnels.funnelLogic.*)'
        toggleVisibilityByBreakdown: 'toggle visibility by breakdown (scenes.funnels.funnelLogic.*)'
        toggleAdvancedMode: 'toggle advanced mode (scenes.funnels.funnelLogic.*)'
        setCorrelationTypes: 'set correlation types (scenes.funnels.funnelLogic.*)'
        setPropertyCorrelationTypes: 'set property correlation types (scenes.funnels.funnelLogic.*)'
        setCorrelationDetailedFeedback: 'set correlation detailed feedback (scenes.funnels.funnelLogic.*)'
        setCorrelationFeedbackRating: 'set correlation feedback rating (scenes.funnels.funnelLogic.*)'
        setCorrelationDetailedFeedbackVisible: 'set correlation detailed feedback visible (scenes.funnels.funnelLogic.*)'
        sendCorrelationAnalysisFeedback: 'send correlation analysis feedback (scenes.funnels.funnelLogic.*)'
        hideSkewWarning: 'hide skew warning (scenes.funnels.funnelLogic.*)'
        hideCorrelationAnalysisFeedback: 'hide correlation analysis feedback (scenes.funnels.funnelLogic.*)'
        setFunnelCorrelationDetails: 'set funnel correlation details (scenes.funnels.funnelLogic.*)'
        setPropertyNames: 'set property names (scenes.funnels.funnelLogic.*)'
        excludePropertyFromProject: 'exclude property from project (scenes.funnels.funnelLogic.*)'
        excludeEventFromProject: 'exclude event from project (scenes.funnels.funnelLogic.*)'
        excludeEventPropertyFromProject: 'exclude event property from project (scenes.funnels.funnelLogic.*)'
        addNestedTableExpandedKey: 'add nested table expanded key (scenes.funnels.funnelLogic.*)'
        removeNestedTableExpandedKey: 'remove nested table expanded key (scenes.funnels.funnelLogic.*)'
        showTooltip: 'show tooltip (scenes.funnels.funnelLogic.*)'
        hideTooltip: 'hide tooltip (scenes.funnels.funnelLogic.*)'
        loadPeople: 'load people (scenes.funnels.funnelLogic.*)'
        loadPeopleSuccess: 'load people success (scenes.funnels.funnelLogic.*)'
        loadPeopleFailure: 'load people failure (scenes.funnels.funnelLogic.*)'
        loadCorrelations: 'load correlations (scenes.funnels.funnelLogic.*)'
        loadCorrelationsSuccess: 'load correlations success (scenes.funnels.funnelLogic.*)'
        loadCorrelationsFailure: 'load correlations failure (scenes.funnels.funnelLogic.*)'
        loadPropertyCorrelations: 'load property correlations (scenes.funnels.funnelLogic.*)'
        loadPropertyCorrelationsSuccess: 'load property correlations success (scenes.funnels.funnelLogic.*)'
        loadPropertyCorrelationsFailure: 'load property correlations failure (scenes.funnels.funnelLogic.*)'
        loadEventWithPropertyCorrelations: 'load event with property correlations (scenes.funnels.funnelLogic.*)'
        loadEventWithPropertyCorrelationsSuccess: 'load event with property correlations success (scenes.funnels.funnelLogic.*)'
        loadEventWithPropertyCorrelationsFailure: 'load event with property correlations failure (scenes.funnels.funnelLogic.*)'
    }
    actions: {
        loadResults: (refresh?: any) => void
        toggleVisibility: (index: number) => void
        setHiddenById: (entry: Record<string, boolean | undefined>) => void
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        clearFunnel: () => void
        setFilters: (filters: Partial<FilterType>, refresh?: boolean, mergeWithExisting?: boolean) => void
        setEventExclusionFilters: (filters: Partial<FilterType>) => void
        setOneEventExclusionFilter: (eventFilter: FunnelStepRangeEntityFilter, index: number) => void
        saveFunnelInsight: (name: string) => void
        openPersonsModalForStep: ({ step, converted }: openPersonsModelProps) => void
        openPersonsModalForSeries: ({
            step,
            series,
            converted,
        }: {
            step: FunnelStep
            series: Omit<FunnelStepWithConversionMetrics, 'nested_breakdown'>
            converted: boolean
        }) => void
        openCorrelationPersonsModal: (correlation: FunnelCorrelation, success: boolean) => void
        setStepReference: (stepReference: FunnelStepReference) => void
        changeStepRange: (funnel_from_step?: number, funnel_to_step?: number) => void
        setIsGroupingOutliers: (isGroupingOutliers: any) => void
        setBinCount: (binCount: BinCountValue) => void
        toggleVisibilityByBreakdown: (breakdownValue?: BreakdownKeyType) => void
        toggleAdvancedMode: () => void
        setCorrelationTypes: (types: FunnelCorrelationType[]) => void
        setPropertyCorrelationTypes: (types: FunnelCorrelationType[]) => void
        setCorrelationDetailedFeedback: (comment: string) => void
        setCorrelationFeedbackRating: (rating: number) => void
        setCorrelationDetailedFeedbackVisible: (visible: boolean) => void
        sendCorrelationAnalysisFeedback: () => void
        hideSkewWarning: () => void
        hideCorrelationAnalysisFeedback: () => void
        setFunnelCorrelationDetails: (payload: FunnelCorrelation | null) => void
        setPropertyNames: (propertyNames: string[]) => void
        excludePropertyFromProject: (propertyName: string) => void
        excludeEventFromProject: (eventName: string) => void
        excludeEventPropertyFromProject: (eventName: string, propertyName: string) => void
        addNestedTableExpandedKey: (expandKey: string) => void
        removeNestedTableExpandedKey: (expandKey: string) => void
        showTooltip: (
            origin: [number, number, number],
            stepIndex: number,
            series: FunnelStepWithConversionMetrics
        ) => void
        hideTooltip: () => void
        loadPeople: (steps: any) => void
        loadPeopleSuccess: (people: any[], payload?: any) => void
        loadPeopleFailure: (error: string, errorObject?: any) => void
        loadCorrelations: (_: any) => void
        loadCorrelationsSuccess: (
            correlations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Events
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: any
        ) => void
        loadCorrelationsFailure: (error: string, errorObject?: any) => void
        loadPropertyCorrelations: (_: any) => void
        loadPropertyCorrelationsSuccess: (
            propertyCorrelations: {
                events: {
                    result_type: FunnelCorrelationResultsType.Properties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: any
        ) => void
        loadPropertyCorrelationsFailure: (error: string, errorObject?: any) => void
        loadEventWithPropertyCorrelations: (eventName: string) => void
        loadEventWithPropertyCorrelationsSuccess: (
            eventWithPropertyCorrelations: {
                [x: string]: {
                    result_type: FunnelCorrelationResultsType.EventWithProperties
                    event: Pick<EventType, 'properties' | 'event' | 'elements'>
                    odds_ratio: number
                    success_count: number
                    success_people_url: string
                    failure_count: number
                    failure_people_url: string
                    correlation_type: FunnelCorrelationType
                }[]
            },
            payload?: string
        ) => void
        loadEventWithPropertyCorrelationsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        __ignore: FunnelCorrelationResultsType | null
        people: any[]
        peopleLoading: boolean
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        stepReference: FunnelStepReference
        isGroupingOutliers: boolean
        error: any
        correlationTypes: FunnelCorrelationType[]
        propertyCorrelationTypes: FunnelCorrelationType[]
        skewWarningHidden: boolean
        correlationFeedbackHidden: boolean
        correlationDetailedFeedbackVisible: boolean
        correlationFeedbackRating: number
        correlationDetailedFeedback: string
        propertyNames: string[]
        nestedTableExpandedKeys: string[]
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
        funnelCorrelationDetails: null | FunnelCorrelation
        isTooltipShown: boolean
        currentTooltip: [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: [number, number, number] | null
    }
    events: {}
    key: string | number
    listeners: {
        loadResultsSuccess: ((
            action: {
                type: 'load results success (scenes.funnels.funnelLogic.*)'
                payload: {
                    insight: Partial<InsightModel>
                    payload?: {
                        refresh: any
                        queryId: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleVisibilityByBreakdown: ((
            action: {
                type: 'toggle visibility by breakdown (scenes.funnels.funnelLogic.*)'
                payload: {
                    breakdownValue: BreakdownKeyType | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFilters: ((
            action: {
                type: 'set filters (scenes.funnels.funnelLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                    refresh: boolean
                    mergeWithExisting: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setEventExclusionFilters: ((
            action: {
                type: 'set event exclusion filters (scenes.funnels.funnelLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setOneEventExclusionFilter: ((
            action: {
                type: 'set one event exclusion filter (scenes.funnels.funnelLogic.*)'
                payload: {
                    eventFilter: FunnelStepRangeEntityFilter
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        clearFunnel: ((
            action: {
                type: 'clear funnel (scenes.funnels.funnelLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openPersonsModalForStep: ((
            action: {
                type: 'open persons modal for step (scenes.funnels.funnelLogic.*)'
                payload: {
                    step: FunnelStep
                    converted: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openPersonsModalForSeries: ((
            action: {
                type: 'open persons modal for series (scenes.funnels.funnelLogic.*)'
                payload: {
                    step: FunnelStep
                    series: Omit<FunnelStepWithConversionMetrics, 'nested_breakdown'>
                    converted: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openCorrelationPersonsModal: ((
            action: {
                type: 'open correlation persons modal (scenes.funnels.funnelLogic.*)'
                payload: {
                    correlation: FunnelCorrelation
                    success: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        changeStepRange: ((
            action: {
                type: 'change step range (scenes.funnels.funnelLogic.*)'
                payload: {
                    funnel_from_step: number | undefined
                    funnel_to_step: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setBinCount: ((
            action: {
                type: 'set bin count (scenes.funnels.funnelLogic.*)'
                payload: {
                    binCount: BinCountValue
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleAdvancedMode: ((
            action: {
                type: 'toggle advanced mode (scenes.funnels.funnelLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludeEventPropertyFromProject: ((
            action: {
                type: 'exclude event property from project (scenes.funnels.funnelLogic.*)'
                payload: {
                    eventName: string
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludeEventFromProject: ((
            action: {
                type: 'exclude event from project (scenes.funnels.funnelLogic.*)'
                payload: {
                    eventName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        excludePropertyFromProject: ((
            action: {
                type: 'exclude property from project (scenes.funnels.funnelLogic.*)'
                payload: {
                    propertyName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        hideSkewWarning: ((
            action: {
                type: 'hide skew warning (scenes.funnels.funnelLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setCorrelationTypes: ((
            action: {
                type: 'set correlation types (scenes.funnels.funnelLogic.*)'
                payload: {
                    types: FunnelCorrelationType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyCorrelationTypes: ((
            action: {
                type: 'set property correlation types (scenes.funnels.funnelLogic.*)'
                payload: {
                    types: FunnelCorrelationType[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPropertyNames: ((
            action: {
                type: 'set property names (scenes.funnels.funnelLogic.*)'
                payload: {
                    propertyNames: string[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        sendCorrelationAnalysisFeedback: ((
            action: {
                type: 'send correlation analysis feedback (scenes.funnels.funnelLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setCorrelationFeedbackRating: ((
            action: {
                type: 'set correlation feedback rating (scenes.funnels.funnelLogic.*)'
                payload: {
                    rating: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)': ((
            action: {
                type: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
                payload: {
                    visible: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'funnels', 'funnelLogic', '*']
    pathString: 'scenes.funnels.funnelLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        __ignore: FunnelCorrelationResultsType | null
        people: any[]
        peopleLoading: boolean
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        stepReference: FunnelStepReference
        isGroupingOutliers: boolean
        error: any
        correlationTypes: FunnelCorrelationType[]
        propertyCorrelationTypes: FunnelCorrelationType[]
        skewWarningHidden: boolean
        correlationFeedbackHidden: boolean
        correlationDetailedFeedbackVisible: boolean
        correlationFeedbackRating: number
        correlationDetailedFeedback: string
        propertyNames: string[]
        nestedTableExpandedKeys: string[]
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
        funnelCorrelationDetails: null | FunnelCorrelation
        isTooltipShown: boolean
        currentTooltip: [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: [number, number, number] | null
    }
    reducers: {
        __ignore: (
            state: FunnelCorrelationResultsType | null,
            action: any,
            fullState: any
        ) => FunnelCorrelationResultsType | null
        people: (state: any[], action: any, fullState: any) => any[]
        peopleLoading: (state: boolean, action: any, fullState: any) => boolean
        correlations: (
            state: Record<'events', FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<'events', FunnelCorrelation[]>
        correlationsLoading: (state: boolean, action: any, fullState: any) => boolean
        propertyCorrelations: (
            state: Record<'events', FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: (state: boolean, action: any, fullState: any) => boolean
        eventWithPropertyCorrelations: (
            state: Record<string, FunnelCorrelation[]>,
            action: any,
            fullState: any
        ) => Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: (state: boolean, action: any, fullState: any) => boolean
        stepReference: (state: FunnelStepReference, action: any, fullState: any) => FunnelStepReference
        isGroupingOutliers: (state: boolean, action: any, fullState: any) => boolean
        error: (state: any, action: any, fullState: any) => any
        correlationTypes: (state: FunnelCorrelationType[], action: any, fullState: any) => FunnelCorrelationType[]
        propertyCorrelationTypes: (
            state: FunnelCorrelationType[],
            action: any,
            fullState: any
        ) => FunnelCorrelationType[]
        skewWarningHidden: (state: boolean, action: any, fullState: any) => boolean
        correlationFeedbackHidden: (state: boolean, action: any, fullState: any) => boolean
        correlationDetailedFeedbackVisible: (state: boolean, action: any, fullState: any) => boolean
        correlationFeedbackRating: (state: number, action: any, fullState: any) => number
        correlationDetailedFeedback: (state: string, action: any, fullState: any) => string
        propertyNames: (state: string[], action: any, fullState: any) => string[]
        nestedTableExpandedKeys: (state: string[], action: any, fullState: any) => string[]
        shouldReportCorrelationViewed: (state: boolean, action: any, fullState: any) => boolean
        shouldReportPropertyCorrelationViewed: (state: boolean, action: any, fullState: any) => boolean
        funnelCorrelationDetails: (
            state: null | FunnelCorrelation,
            action: any,
            fullState: any
        ) => null | FunnelCorrelation
        isTooltipShown: (state: boolean, action: any, fullState: any) => boolean
        currentTooltip: (
            state: [number, FunnelStepWithConversionMetrics] | null,
            action: any,
            fullState: any
        ) => [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: (
            state: [number, number, number] | null,
            action: any,
            fullState: any
        ) => [number, number, number] | null
    }
    selector: (state: any) => {
        __ignore: FunnelCorrelationResultsType | null
        people: any[]
        peopleLoading: boolean
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        stepReference: FunnelStepReference
        isGroupingOutliers: boolean
        error: any
        correlationTypes: FunnelCorrelationType[]
        propertyCorrelationTypes: FunnelCorrelationType[]
        skewWarningHidden: boolean
        correlationFeedbackHidden: boolean
        correlationDetailedFeedbackVisible: boolean
        correlationFeedbackRating: number
        correlationDetailedFeedback: string
        propertyNames: string[]
        nestedTableExpandedKeys: string[]
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
        funnelCorrelationDetails: null | FunnelCorrelation
        isTooltipShown: boolean
        currentTooltip: [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: [number, number, number] | null
    }
    selectors: {
        __ignore: (state: any, props?: any) => FunnelCorrelationResultsType | null
        people: (state: any, props?: any) => any[]
        peopleLoading: (state: any, props?: any) => boolean
        correlations: (state: any, props?: any) => Record<'events', FunnelCorrelation[]>
        correlationsLoading: (state: any, props?: any) => boolean
        propertyCorrelations: (state: any, props?: any) => Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: (state: any, props?: any) => boolean
        eventWithPropertyCorrelations: (state: any, props?: any) => Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: (state: any, props?: any) => boolean
        stepReference: (state: any, props?: any) => FunnelStepReference
        isGroupingOutliers: (state: any, props?: any) => boolean
        error: (state: any, props?: any) => any
        correlationTypes: (state: any, props?: any) => FunnelCorrelationType[]
        propertyCorrelationTypes: (state: any, props?: any) => FunnelCorrelationType[]
        skewWarningHidden: (state: any, props?: any) => boolean
        correlationFeedbackHidden: (state: any, props?: any) => boolean
        correlationDetailedFeedbackVisible: (state: any, props?: any) => boolean
        correlationFeedbackRating: (state: any, props?: any) => number
        correlationDetailedFeedback: (state: any, props?: any) => string
        propertyNames: (state: any, props?: any) => string[]
        nestedTableExpandedKeys: (state: any, props?: any) => string[]
        shouldReportCorrelationViewed: (state: any, props?: any) => boolean
        shouldReportPropertyCorrelationViewed: (state: any, props?: any) => boolean
        funnelCorrelationDetails: (state: any, props?: any) => null | FunnelCorrelation
        isTooltipShown: (state: any, props?: any) => boolean
        currentTooltip: (state: any, props?: any) => [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: (state: any, props?: any) => [number, number, number] | null
        insight: (state: any, props?: any) => Partial<InsightModel>
        insightLoading: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => Partial<FilterType>
        isViewedOnDashboard: (state: any, props?: any) => boolean
        hiddenLegendKeys: (state: any, props?: any) => Record<string, boolean | undefined>
        currentTeam: (state: any, props?: any) => TeamType | null
        currentTeamId: (state: any, props?: any) => number | null
        personProperties: (state: any, props?: any) => Array<PersonProperty>
        hasAvailableFeature: (state: any, props?: any) => (feature: AvailableFeature) => boolean
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        groupProperties: (state: any, props?: any) => (groupTypeIndex: number) => PersonProperty[]
        loadedFilters: (state: any, props?: any) => Partial<FilterType>
        results: (state: any, props?: any) => FunnelAPIResponse
        conversionWindow: (
            state: any,
            props?: any
        ) => { funnel_window_interval: number; funnel_window_interval_unit: FunnelConversionWindowTimeUnit }
        timeConversionResults: (state: any, props?: any) => FunnelsTimeConversionBins | null
        peopleSorted: (state: any, props?: any) => any[] | null
        isStepsEmpty: (state: any, props?: any) => boolean
        propertiesForUrl: (state: any, props?: any) => Partial<FilterType>
        isValidFunnel: (state: any, props?: any) => boolean | string[] | undefined
        filtersDirty: (state: any, props?: any) => boolean
        barGraphLayout: (state: any, props?: any) => FunnelLayout
        histogramGraphData: (
            state: any,
            props?: any
        ) => { id: number; bin0: number; bin1: number; count: number; label: string }[]
        areFiltersValid: (state: any, props?: any) => boolean
        numberOfSeries: (state: any, props?: any) => number
        conversionMetrics: (state: any, props?: any) => FunnelTimeConversionMetrics
        isSkewed: (state: any, props?: any) => boolean
        apiParams: (
            state: any,
            props?: any
        ) => {
            insight?: InsightType | undefined
            display?: ChartDisplayType | undefined
            interval?: IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?: AnyPropertyFilter[] | PropertyGroupFilter | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?: BreakdownType | null | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?: ShownAsValue | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?: RetentionType | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: PathType | undefined
            include_event_types?: PathType[] | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?: FunnelPathType | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }
        filterSteps: (state: any, props?: any) => Record<string, any>[]
        eventCount: (state: any, props?: any) => number
        actionCount: (state: any, props?: any) => number
        interval: (state: any, props?: any) => '' | IntervalType
        steps: (state: any, props?: any) => FunnelStepWithNestedBreakdown[]
        stepsWithCount: (state: any, props?: any) => FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: (state: any, props?: any) => FunnelStepWithConversionMetrics[]
        visibleStepsWithConversionMetrics: (state: any, props?: any) => FunnelStepWithConversionMetrics[]
        flattenedSteps: (state: any, props?: any) => FlattenedFunnelStep[]
        flattenedStepsByBreakdown: (state: any, props?: any) => FlattenedFunnelStepByBreakdown[]
        flattenedBreakdowns: (state: any, props?: any) => FlattenedFunnelStepByBreakdown[]
        numericBinCount: (state: any, props?: any) => number
        exclusionDefaultStepRange: (state: any, props?: any) => Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: (state: any, props?: any) => FilterType
        areExclusionFiltersValid: (state: any, props?: any) => boolean
        correlationValues: (state: any, props?: any) => FunnelCorrelation[]
        propertyCorrelationValues: (state: any, props?: any) => FunnelCorrelation[]
        eventWithPropertyCorrelationsValues: (state: any, props?: any) => Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (state: any, props?: any) => (eventName: string) => boolean
        parseDisplayNameForCorrelation: (
            state: any,
            props?: any
        ) => (record: FunnelCorrelation) => {
            first_value: string
            second_value?: string
        }
        correlationPropKey: (state: any, props?: any) => string
        isPropertyExcludedFromProject: (state: any, props?: any) => (propertyName: string) => boolean
        isEventExcluded: (state: any, props?: any) => (eventName: string) => boolean
        isEventPropertyExcluded: (state: any, props?: any) => (propertyName: string) => boolean
        excludedPropertyNames: (state: any, props?: any) => string[]
        excludedEventNames: (state: any, props?: any) => string[]
        excludedEventPropertyNames: (state: any, props?: any) => string[]
        inversePropertyNames: (state: any, props?: any) => (excludedPersonProperties: string[]) => string[]
        correlationAnalysisAvailable: (state: any, props?: any) => boolean
        allProperties: (state: any, props?: any) => string[]
        aggregationTargetLabel: (
            state: any,
            props?: any
        ) => {
            singular: string
            plural: string
        }
        correlationMatrixAndScore: (
            state: any,
            props?: any
        ) => {
            truePositive: number
            falsePositive: number
            trueNegative: number
            falseNegative: number
            correlationScore: number
            correlationScoreStrength: 'weak' | 'moderate' | 'strong' | null
        }
        advancedOptionsUsedCount: (state: any, props?: any) => number
        isModalActive: (state: any, props?: any) => boolean
        incompletenessOffsetFromEnd: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        __ignore: FunnelCorrelationResultsType | null
        people: any[]
        peopleLoading: boolean
        correlations: Record<'events', FunnelCorrelation[]>
        correlationsLoading: boolean
        propertyCorrelations: Record<'events', FunnelCorrelation[]>
        propertyCorrelationsLoading: boolean
        eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>
        eventWithPropertyCorrelationsLoading: boolean
        stepReference: FunnelStepReference
        isGroupingOutliers: boolean
        error: any
        correlationTypes: FunnelCorrelationType[]
        propertyCorrelationTypes: FunnelCorrelationType[]
        skewWarningHidden: boolean
        correlationFeedbackHidden: boolean
        correlationDetailedFeedbackVisible: boolean
        correlationFeedbackRating: number
        correlationDetailedFeedback: string
        propertyNames: string[]
        nestedTableExpandedKeys: string[]
        shouldReportCorrelationViewed: boolean
        shouldReportPropertyCorrelationViewed: boolean
        funnelCorrelationDetails: null | FunnelCorrelation
        isTooltipShown: boolean
        currentTooltip: [number, FunnelStepWithConversionMetrics] | null
        tooltipOrigin: [number, number, number] | null
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        isViewedOnDashboard: boolean
        hiddenLegendKeys: Record<string, boolean | undefined>
        currentTeam: TeamType | null
        currentTeamId: number | null
        personProperties: Array<PersonProperty>
        hasAvailableFeature: (feature: AvailableFeature) => boolean
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        groupProperties: (groupTypeIndex: number) => PersonProperty[]
        loadedFilters: Partial<FilterType>
        results: FunnelAPIResponse
        conversionWindow: {
            funnel_window_interval: number
            funnel_window_interval_unit: FunnelConversionWindowTimeUnit
        }
        timeConversionResults: FunnelsTimeConversionBins | null
        peopleSorted: any[] | null
        isStepsEmpty: boolean
        propertiesForUrl: Partial<FilterType>
        isValidFunnel: boolean | string[] | undefined
        filtersDirty: boolean
        barGraphLayout: FunnelLayout
        histogramGraphData: { id: number; bin0: number; bin1: number; count: number; label: string }[]
        areFiltersValid: boolean
        numberOfSeries: number
        conversionMetrics: FunnelTimeConversionMetrics
        isSkewed: boolean
        apiParams: {
            insight?: InsightType | undefined
            display?: ChartDisplayType | undefined
            interval?: IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?: AnyPropertyFilter[] | PropertyGroupFilter | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?: BreakdownType | null | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?: ShownAsValue | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?: RetentionType | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: PathType | undefined
            include_event_types?: PathType[] | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?: FunnelPathType | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }
        filterSteps: Record<string, any>[]
        eventCount: number
        actionCount: number
        interval: '' | IntervalType
        steps: FunnelStepWithNestedBreakdown[]
        stepsWithCount: FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: FunnelStepWithConversionMetrics[]
        visibleStepsWithConversionMetrics: FunnelStepWithConversionMetrics[]
        flattenedSteps: FlattenedFunnelStep[]
        flattenedStepsByBreakdown: FlattenedFunnelStepByBreakdown[]
        flattenedBreakdowns: FlattenedFunnelStepByBreakdown[]
        numericBinCount: number
        exclusionDefaultStepRange: Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: FilterType
        areExclusionFiltersValid: boolean
        correlationValues: FunnelCorrelation[]
        propertyCorrelationValues: FunnelCorrelation[]
        eventWithPropertyCorrelationsValues: Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (eventName: string) => boolean
        parseDisplayNameForCorrelation: (record: FunnelCorrelation) => {
            first_value: string
            second_value?: string
        }
        correlationPropKey: string
        isPropertyExcludedFromProject: (propertyName: string) => boolean
        isEventExcluded: (eventName: string) => boolean
        isEventPropertyExcluded: (propertyName: string) => boolean
        excludedPropertyNames: string[]
        excludedEventNames: string[]
        excludedEventPropertyNames: string[]
        inversePropertyNames: (excludedPersonProperties: string[]) => string[]
        correlationAnalysisAvailable: boolean
        allProperties: string[]
        aggregationTargetLabel: {
            singular: string
            plural: string
        }
        correlationMatrixAndScore: {
            truePositive: number
            falsePositive: number
            trueNegative: number
            falseNegative: number
            correlationScore: number
            correlationScoreStrength: 'weak' | 'moderate' | 'strong' | null
        }
        advancedOptionsUsedCount: number
        isModalActive: boolean
        incompletenessOffsetFromEnd: number
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        loadedFilters: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => Partial<FilterType>
        results: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => FunnelAPIResponse
        conversionWindow: (filters: Partial<FilterType>) => {
            funnel_window_interval: number
            funnel_window_interval_unit: FunnelConversionWindowTimeUnit
        }
        timeConversionResults: (
            results: FunnelAPIResponse,
            filters: Partial<FilterType>
        ) => FunnelsTimeConversionBins | null
        peopleSorted: (stepsWithCount: FunnelStepWithNestedBreakdown[], people: any[]) => any[] | null
        isStepsEmpty: (filters: Partial<FilterType>) => boolean
        propertiesForUrl: (filters: Partial<FilterType>) => Partial<FilterType>
        isValidFunnel: (
            filters: Partial<FilterType>,
            stepsWithCount: FunnelStepWithNestedBreakdown[],
            histogramGraphData: { id: number; bin0: number; bin1: number; count: number; label: string }[]
        ) => boolean | string[] | undefined
        filtersDirty: (filters: Partial<FilterType>, loadedFilters: Partial<FilterType>) => boolean
        barGraphLayout: (filters: Partial<FilterType>) => FunnelLayout
        histogramGraphData: (
            timeConversionResults: FunnelsTimeConversionBins | null
        ) => { id: number; bin0: number; bin1: number; count: number; label: string }[]
        areFiltersValid: (numberOfSeries: number) => boolean
        numberOfSeries: (filters: Partial<FilterType>) => number
        conversionMetrics: (
            stepsWithCount: FunnelStepWithNestedBreakdown[],
            loadedFilters: Partial<FilterType>,
            timeConversionResults: FunnelsTimeConversionBins | null
        ) => FunnelTimeConversionMetrics
        isSkewed: (conversionMetrics: FunnelTimeConversionMetrics, skewWarningHidden: boolean) => boolean
        apiParams: (filters: Partial<FilterType>) => {
            insight?: InsightType | undefined
            display?: ChartDisplayType | undefined
            interval?: IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?: AnyPropertyFilter[] | PropertyGroupFilter | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?: BreakdownType | null | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?: ShownAsValue | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?: RetentionType | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: PathType | undefined
            include_event_types?: PathType[] | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?: FunnelPathType | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }
        filterSteps: (apiParams: {
            insight?: InsightType | undefined
            display?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ChartDisplayType | undefined
            interval?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').AnyPropertyFilter[]
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PropertyGroupFilter
                | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').BreakdownType
                | null
                | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/constants').ShownAsValue
                | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').RetentionType
                | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType | undefined
            include_event_types?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType[]
                | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FunnelPathType
                | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }) => Record<string, any>[]
        eventCount: (apiParams: {
            insight?: InsightType | undefined
            display?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ChartDisplayType | undefined
            interval?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').AnyPropertyFilter[]
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PropertyGroupFilter
                | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').BreakdownType
                | null
                | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/constants').ShownAsValue
                | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').RetentionType
                | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType | undefined
            include_event_types?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType[]
                | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FunnelPathType
                | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }) => number
        actionCount: (apiParams: {
            insight?: InsightType | undefined
            display?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ChartDisplayType | undefined
            interval?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').AnyPropertyFilter[]
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PropertyGroupFilter
                | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').BreakdownType
                | null
                | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/constants').ShownAsValue
                | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').RetentionType
                | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType | undefined
            include_event_types?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType[]
                | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FunnelPathType
                | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }) => number
        interval: (apiParams: {
            insight?: InsightType | undefined
            display?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ChartDisplayType | undefined
            interval?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').IntervalType | undefined
            smoothing_intervals?: number | undefined
            date_from?: string | null | undefined
            date_to?: string | null | undefined
            properties?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').AnyPropertyFilter[]
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PropertyGroupFilter
                | undefined
            events?: Record<string, any>[] | undefined
            event?: string | undefined
            actions?: Record<string, any>[] | undefined
            breakdown_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').BreakdownType
                | null
                | undefined
            breakdown?: BreakdownKeyType | undefined
            breakdowns?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').Breakdown[] | undefined
            breakdown_value?: string | number | undefined
            breakdown_group_type_index?: number | null | undefined
            shown_as?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/constants').ShownAsValue
                | undefined
            session?: string | undefined
            period?: string | undefined
            retention_type?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').RetentionType
                | undefined
            retention_reference?: 'total' | 'previous' | undefined
            total_intervals?: number | undefined
            new_entity?: Record<string, any>[] | undefined
            returning_entity?: Record<string, any> | undefined
            target_entity?: Record<string, any> | undefined
            path_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType | undefined
            include_event_types?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType[]
                | undefined
            start_point?: string | undefined
            end_point?: string | undefined
            path_groupings?: string[] | undefined
            stickiness_days?: number | undefined
            type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_id?: string | number | undefined
            entity_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
            entity_math?: string | undefined
            people_day?: any
            people_action?: any
            formula?: any
            filter_test_accounts?: boolean | undefined
            from_dashboard?: number | boolean | undefined
            layout?: FunnelLayout | undefined
            funnel_step?: number | undefined
            entrance_period_start?: string | undefined
            drop_off?: boolean | undefined
            funnel_viz_type?: FunnelVizType | undefined
            funnel_from_step?: number | undefined
            funnel_to_step?: number | undefined
            funnel_step_breakdown?: string | number | number[] | null | undefined
            compare?: boolean | undefined
            bin_count?: BinCountValue | undefined
            funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
            funnel_window_interval?: number | undefined
            funnel_order_type?: StepOrderValue | undefined
            exclusions?: FunnelStepRangeEntityFilter[] | undefined
            exclude_events?: string[] | undefined
            step_limit?: number | undefined
            path_start_key?: string | undefined
            path_end_key?: string | undefined
            path_dropoff_key?: string | undefined
            path_replacements?: boolean | undefined
            local_path_cleaning_filters?: Record<string, any>[] | undefined
            funnel_filter?: Record<string, any> | undefined
            funnel_paths?:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FunnelPathType
                | undefined
            edge_limit?: number | undefined
            min_edge_weight?: number | undefined
            max_edge_weight?: number | undefined
            funnel_correlation_person_entity?: Record<string, any> | undefined
            funnel_correlation_person_converted?: 'true' | 'false' | undefined
            funnel_custom_steps?: number[] | undefined
            aggregation_group_type_index?: number | undefined
            funnel_advanced?: boolean | undefined
            show_legend?: boolean | undefined
            hidden_legend_keys?: Record<string, boolean | undefined> | undefined
        }) => '' | IntervalType
        steps: (
            filters: Partial<FilterType>,
            results: FunnelAPIResponse,
            apiParams: {
                insight?: InsightType | undefined
                display?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').ChartDisplayType
                    | undefined
                interval?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').IntervalType | undefined
                smoothing_intervals?: number | undefined
                date_from?: string | null | undefined
                date_to?: string | null | undefined
                properties?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').AnyPropertyFilter[]
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PropertyGroupFilter
                    | undefined
                events?: Record<string, any>[] | undefined
                event?: string | undefined
                actions?: Record<string, any>[] | undefined
                breakdown_type?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').BreakdownType
                    | null
                    | undefined
                breakdown?: BreakdownKeyType | undefined
                breakdowns?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').Breakdown[] | undefined
                breakdown_value?: string | number | undefined
                breakdown_group_type_index?: number | null | undefined
                shown_as?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/lib/constants').ShownAsValue
                    | undefined
                session?: string | undefined
                period?: string | undefined
                retention_type?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').RetentionType
                    | undefined
                retention_reference?: 'total' | 'previous' | undefined
                total_intervals?: number | undefined
                new_entity?: Record<string, any>[] | undefined
                returning_entity?: Record<string, any> | undefined
                target_entity?: Record<string, any> | undefined
                path_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType | undefined
                include_event_types?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PathType[]
                    | undefined
                start_point?: string | undefined
                end_point?: string | undefined
                path_groupings?: string[] | undefined
                stickiness_days?: number | undefined
                type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
                entity_id?: string | number | undefined
                entity_type?: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').EntityType | undefined
                entity_math?: string | undefined
                people_day?: any
                people_action?: any
                formula?: any
                filter_test_accounts?: boolean | undefined
                from_dashboard?: number | boolean | undefined
                layout?: FunnelLayout | undefined
                funnel_step?: number | undefined
                entrance_period_start?: string | undefined
                drop_off?: boolean | undefined
                funnel_viz_type?: FunnelVizType | undefined
                funnel_from_step?: number | undefined
                funnel_to_step?: number | undefined
                funnel_step_breakdown?: string | number | number[] | null | undefined
                compare?: boolean | undefined
                bin_count?: BinCountValue | undefined
                funnel_window_interval_unit?: FunnelConversionWindowTimeUnit | undefined
                funnel_window_interval?: number | undefined
                funnel_order_type?: StepOrderValue | undefined
                exclusions?: FunnelStepRangeEntityFilter[] | undefined
                exclude_events?: string[] | undefined
                step_limit?: number | undefined
                path_start_key?: string | undefined
                path_end_key?: string | undefined
                path_dropoff_key?: string | undefined
                path_replacements?: boolean | undefined
                local_path_cleaning_filters?: Record<string, any>[] | undefined
                funnel_filter?: Record<string, any> | undefined
                funnel_paths?:
                    | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').FunnelPathType
                    | undefined
                edge_limit?: number | undefined
                min_edge_weight?: number | undefined
                max_edge_weight?: number | undefined
                funnel_correlation_person_entity?: Record<string, any> | undefined
                funnel_correlation_person_converted?: 'true' | 'false' | undefined
                funnel_custom_steps?: number[] | undefined
                aggregation_group_type_index?: number | undefined
                funnel_advanced?: boolean | undefined
                show_legend?: boolean | undefined
                hidden_legend_keys?: Record<string, boolean | undefined> | undefined
            }
        ) => FunnelStepWithNestedBreakdown[]
        stepsWithCount: (steps: FunnelStepWithNestedBreakdown[]) => FunnelStepWithNestedBreakdown[]
        stepsWithConversionMetrics: (
            steps: FunnelStepWithNestedBreakdown[],
            stepReference: FunnelStepReference
        ) => FunnelStepWithConversionMetrics[]
        visibleStepsWithConversionMetrics: (
            stepsWithConversionMetrics: FunnelStepWithConversionMetrics[],
            hiddenLegendKeys: Record<string, boolean | undefined>,
            flattenedStepsByBreakdown: FlattenedFunnelStepByBreakdown[]
        ) => FunnelStepWithConversionMetrics[]
        flattenedSteps: (stepsWithConversionMetrics: FunnelStepWithConversionMetrics[]) => FlattenedFunnelStep[]
        flattenedStepsByBreakdown: (
            stepsWithConversionMetrics: FunnelStepWithConversionMetrics[],
            barGraphLayout: FunnelLayout
        ) => FlattenedFunnelStepByBreakdown[]
        flattenedBreakdowns: (
            flattenedStepsByBreakdown: FlattenedFunnelStepByBreakdown[]
        ) => FlattenedFunnelStepByBreakdown[]
        numericBinCount: (
            filters: Partial<FilterType>,
            timeConversionResults: FunnelsTimeConversionBins | null
        ) => number
        exclusionDefaultStepRange: (
            numberOfSeries: number,
            areFiltersValid: boolean
        ) => Omit<FunnelStepRangeEntityFilter, 'id' | 'name'>
        exclusionFilters: (filters: Partial<FilterType>) => FilterType
        areExclusionFiltersValid: (error: any) => boolean
        correlationValues: (
            correlations: Record<'events', FunnelCorrelation[]>,
            correlationTypes: FunnelCorrelationType[],
            excludedEventNames: string[]
        ) => FunnelCorrelation[]
        propertyCorrelationValues: (
            propertyCorrelations: Record<'events', FunnelCorrelation[]>,
            propertyCorrelationTypes: FunnelCorrelationType[],
            excludedPropertyNames: string[]
        ) => FunnelCorrelation[]
        eventWithPropertyCorrelationsValues: (
            eventWithPropertyCorrelations: Record<string, FunnelCorrelation[]>,
            correlationTypes: FunnelCorrelationType[],
            excludedEventPropertyNames: string[]
        ) => Record<string, FunnelCorrelation[]>
        eventHasPropertyCorrelations: (
            eventWithPropertyCorrelationsValues: Record<string, FunnelCorrelation[]>
        ) => (eventName: string) => boolean
        correlationPropKey: (arg: any) => string
        isPropertyExcludedFromProject: (excludedPropertyNames: string[]) => (propertyName: string) => boolean
        isEventExcluded: (excludedEventNames: string[]) => (eventName: string) => boolean
        isEventPropertyExcluded: (excludedEventPropertyNames: string[]) => (propertyName: string) => boolean
        excludedPropertyNames: (currentTeam: TeamType | null) => string[]
        excludedEventNames: (currentTeam: TeamType | null) => string[]
        excludedEventPropertyNames: (currentTeam: TeamType | null) => string[]
        inversePropertyNames: (
            filters: Partial<FilterType>,
            personProperties: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PersonProperty[],
            groupProperties: (
                groupTypeIndex: number
            ) => import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PersonProperty[]
        ) => (excludedPersonProperties: string[]) => string[]
        correlationAnalysisAvailable: (hasAvailableFeature: (feature: AvailableFeature) => boolean) => boolean
        allProperties: (
            inversePropertyNames: (excludedPersonProperties: string[]) => string[],
            excludedPropertyNames: string[]
        ) => string[]
        aggregationTargetLabel: (
            filters: Partial<FilterType>,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            }
        ) => {
            singular: string
            plural: string
        }
        correlationMatrixAndScore: (
            funnelCorrelationDetails: FunnelCorrelation | null,
            steps: FunnelStepWithNestedBreakdown[]
        ) => {
            truePositive: number
            falsePositive: number
            trueNegative: number
            falseNegative: number
            correlationScore: number
            correlationScoreStrength: 'weak' | 'moderate' | 'strong' | null
        }
        advancedOptionsUsedCount: (filters: Partial<FilterType>, stepReference: FunnelStepReference) => number
        isModalActive: (isViewedOnDashboard: boolean) => boolean
        incompletenessOffsetFromEnd: (
            steps: FunnelStepWithNestedBreakdown[],
            conversionWindow: {
                funnel_window_interval: number
                funnel_window_interval_unit: FunnelConversionWindowTimeUnit
            }
        ) => number
    }
    __keaTypeGenInternalReducerActions: {
        'start query (scenes.insights.insightLogic.*)': (queryId: string) => {
            type: 'start query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
            }
        }
        'end query (scenes.insights.insightLogic.*)': (
            queryId: string,
            view: InsightType,
            lastRefresh: string | null,
            exception?: Record<string, any>
        ) => {
            type: 'end query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
                view: InsightType
                lastRefresh: string | null
                exception: Record<string, any> | undefined
            }
        }
        'abort query (scenes.insights.insightLogic.*)': (
            queryId: string,
            view: InsightType,
            scene: Scene | null,
            exception?: Record<string, any>
        ) => {
            type: 'abort query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
                view: InsightType
                scene: Scene | null
                exception: Record<string, any> | undefined
            }
        }
        'report correlation viewed (lib.utils.eventUsageLogic)': (
            filters: Partial<FilterType>,
            delay?: number,
            propertiesTable?: boolean
        ) => {
            type: 'report correlation viewed (lib.utils.eventUsageLogic)'
            payload: {
                filters: Partial<FilterType>
                delay: number | undefined
                propertiesTable: boolean | undefined
            }
        }
        'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)': (visible: boolean) => {
            type: 'set visible (lib.components.VisibilitySensor.visibilitySensorLogic.*)'
            payload: {
                visible: boolean
            }
        }
    }
}
