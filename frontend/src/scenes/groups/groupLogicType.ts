// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Breadcrumb, Group, GroupType } from '../../types'

export interface groupLogicType extends Logic {
    actionCreators: {
        setGroup: (
            groupTypeIndex: number,
            groupKey: string
        ) => {
            type: 'set group (groups.groupLogic)'
            payload: {
                groupTypeIndex: number
                groupKey: string
            }
        }
        loadGroup: () => {
            type: 'load group (groups.groupLogic)'
            payload: any
        }
        loadGroupSuccess: (
            groupData: Group | null,
            payload?: any
        ) => {
            type: 'load group success (groups.groupLogic)'
            payload: {
                groupData: Group | null
                payload?: any
            }
        }
        loadGroupFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load group failure (groups.groupLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set group (groups.groupLogic)': 'setGroup'
        'load group (groups.groupLogic)': 'loadGroup'
        'load group success (groups.groupLogic)': 'loadGroupSuccess'
        'load group failure (groups.groupLogic)': 'loadGroupFailure'
    }
    actionTypes: {
        setGroup: 'set group (groups.groupLogic)'
        loadGroup: 'load group (groups.groupLogic)'
        loadGroupSuccess: 'load group success (groups.groupLogic)'
        loadGroupFailure: 'load group failure (groups.groupLogic)'
    }
    actions: {
        setGroup: (groupTypeIndex: number, groupKey: string) => void
        loadGroup: () => void
        loadGroupSuccess: (groupData: Group | null, payload?: any) => void
        loadGroupFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['groups', 'groupLogic']
    pathString: 'groups.groupLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
    }
    reducers: {
        groupData: (state: Group | null, action: any, fullState: any) => Group | null
        groupDataLoading: (state: boolean, action: any, fullState: any) => boolean
        groupTypeIndex: (state: number, action: any, fullState: any) => number
        groupKey: (state: string, action: any, fullState: any) => string
    }
    selector: (state: any) => {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
    }
    selectors: {
        groupData: (state: any, props?: any) => Group | null
        groupDataLoading: (state: any, props?: any) => boolean
        groupTypeIndex: (state: any, props?: any) => number
        groupKey: (state: any, props?: any) => string
        currentTeamId: (state: any, props?: any) => number | null
        groupTypes: (state: any, props?: any) => Array<GroupType>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        groupTypeName: (state: any, props?: any) => string
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        groupData: Group | null
        groupDataLoading: boolean
        groupTypeIndex: number
        groupKey: string
        currentTeamId: number | null
        groupTypes: Array<GroupType>
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        groupTypeName: string
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        groupTypeName: (
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            },
            groupTypeIndex: number
        ) => string
        breadcrumbs: (
            groupTypeName: string,
            groupTypeIndex: number,
            groupKey: string,
            groupData: Group | null
        ) => Breadcrumb[]
    }
}
