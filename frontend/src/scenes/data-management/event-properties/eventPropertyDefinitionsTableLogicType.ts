// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventPropertyDefinitionsTableLogicProps, Filters } from './eventPropertyDefinitionsTableLogic'
import type { PropertyDefinition } from '../../../types'
import type { PropertyDefinitionsPaginatedResponse } from '../events/eventDefinitionsTableLogic'

export interface eventPropertyDefinitionsTableLogicType extends Logic {
    actionCreators: {
        loadEventPropertyDefinitions: (
            url?: string | null,
            orderIdsFirst?: string[]
        ) => {
            type: 'load event property definitions (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                url: string | null
                orderIdsFirst: string[]
            }
        }
        setFilters: (filters: Partial<Filters>) => {
            type: 'set filters (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                filters: Partial<Filters>
            }
        }
        setHoveredDefinition: (definitionKey: string | null) => {
            type: 'set hovered definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                definitionKey: string | null
            }
        }
        setOpenedDefinition: (id: string | null) => {
            type: 'set opened definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                id: string | null
            }
        }
        setLocalEventPropertyDefinition: (definition: PropertyDefinition) => {
            type: 'set local event property definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                definition: PropertyDefinition
            }
        }
        loadEventPropertyDefinitionsSuccess: (
            eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
                orderIdsFirst: string[]
            }
        ) => {
            type: 'load event property definitions success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
                payload?: {
                    url: string | null
                    orderIdsFirst: string[]
                }
            }
        }
        loadEventPropertyDefinitionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event property definitions failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setLocalEventPropertyDefinitionSuccess: (
            eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                definition: PropertyDefinition
            }
        ) => {
            type: 'set local event property definition success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
                payload?: {
                    definition: PropertyDefinition
                }
            }
        }
        setLocalEventPropertyDefinitionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set local event property definition failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load event property definitions (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'loadEventPropertyDefinitions'
        'set filters (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setFilters'
        'set hovered definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setHoveredDefinition'
        'set opened definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setOpenedDefinition'
        'set local event property definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setLocalEventPropertyDefinition'
        'load event property definitions success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'loadEventPropertyDefinitionsSuccess'
        'load event property definitions failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'loadEventPropertyDefinitionsFailure'
        'set local event property definition success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setLocalEventPropertyDefinitionSuccess'
        'set local event property definition failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)': 'setLocalEventPropertyDefinitionFailure'
    }
    actionTypes: {
        loadEventPropertyDefinitions: 'load event property definitions (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setFilters: 'set filters (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setHoveredDefinition: 'set hovered definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setOpenedDefinition: 'set opened definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setLocalEventPropertyDefinition: 'set local event property definition (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        loadEventPropertyDefinitionsSuccess: 'load event property definitions success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        loadEventPropertyDefinitionsFailure: 'load event property definitions failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setLocalEventPropertyDefinitionSuccess: 'set local event property definition success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
        setLocalEventPropertyDefinitionFailure: 'set local event property definition failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
    }
    actions: {
        loadEventPropertyDefinitions: (url?: string | null, orderIdsFirst?: string[]) => void
        setFilters: (filters: Partial<Filters>) => void
        setHoveredDefinition: (definitionKey: string | null) => void
        setOpenedDefinition: (id: string | null) => void
        setLocalEventPropertyDefinition: (definition: PropertyDefinition) => void
        loadEventPropertyDefinitionsSuccess: (
            eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                url: string | null
                orderIdsFirst: string[]
            }
        ) => void
        loadEventPropertyDefinitionsFailure: (error: string, errorObject?: any) => void
        setLocalEventPropertyDefinitionSuccess: (
            eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse,
            payload?: {
                definition: PropertyDefinition
            }
        ) => void
        setLocalEventPropertyDefinitionFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        filters: Filters
        hoveredDefinition: string | null
        openedDefinitionId: string | null
        eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: boolean
    }
    events: {}
    key: string
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
                payload: {
                    filters: Partial<Filters>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadEventPropertyDefinitionsSuccess: ((
            action: {
                type: 'load event property definitions success (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
                payload: {
                    eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
                    payload?: {
                        url: string | null
                        orderIdsFirst: string[]
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadEventPropertyDefinitionsFailure: ((
            action: {
                type: 'load event property definitions failure (scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic)'
                payload: {
                    error: string
                    errorObject?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'data-management', 'event-properties', 'eventPropertyDefinitionsTableLogic']
    pathString: 'scenes.data-management.event-properties.eventPropertyDefinitionsTableLogic'
    props: EventPropertyDefinitionsTableLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        filters: Filters
        hoveredDefinition: string | null
        openedDefinitionId: string | null
        eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: boolean
    }
    reducers: {
        filters: (state: Filters, action: any, fullState: any) => Filters
        hoveredDefinition: (state: string | null, action: any, fullState: any) => string | null
        openedDefinitionId: (state: string | null, action: any, fullState: any) => string | null
        eventPropertyDefinitions: (
            state: PropertyDefinitionsPaginatedResponse,
            action: any,
            fullState: any
        ) => PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        filters: Filters
        hoveredDefinition: string | null
        openedDefinitionId: string | null
        eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: boolean
    }
    selectors: {
        filters: (state: any, props?: any) => Filters
        hoveredDefinition: (state: any, props?: any) => string | null
        openedDefinitionId: (state: any, props?: any) => string | null
        eventPropertyDefinitions: (state: any, props?: any) => PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        filters: Filters
        hoveredDefinition: string | null
        openedDefinitionId: string | null
        eventPropertyDefinitions: PropertyDefinitionsPaginatedResponse
        eventPropertyDefinitionsLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
