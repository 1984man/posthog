// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionFilter, FilterType, InsightLogicProps, InsightModel, TrendResult } from '../../types'
import type { LoadPeopleFromUrlProps, PersonsModalParams } from './personsModalLogic'
import type { IndexedTrendResult } from './types'

export interface trendsLogicType extends Logic {
    actionCreators: {
        toggleVisibility: (index: number) => {
            type: 'toggle visibility (scenes.trends.trendsLogic.*)'
            payload: {
                index: number
            }
        }
        setHiddenById: (entry: Record<string, boolean | undefined>) => {
            type: 'set hidden by id (scenes.trends.trendsLogic.*)'
            payload: {
                entry: Record<string, boolean | undefined>
            }
        }
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load results success (scenes.trends.trendsLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        loadPeople: (peopleParams: PersonsModalParams) => {
            type: 'load people (scenes.trends.trendsLogic.*)'
            payload: {
                peopleParams: PersonsModalParams
            }
        }
        loadPeopleFromUrl: (props: LoadPeopleFromUrlProps) => {
            type: 'load people from url (scenes.trends.trendsLogic.*)'
            payload: LoadPeopleFromUrlProps
        }
        setFilters: (
            filters: Partial<FilterType>,
            mergeFilters?: any
        ) => {
            type: 'set filters (scenes.trends.trendsLogic.*)'
            payload: {
                filters: Partial<FilterType>
                mergeFilters: any
            }
        }
        setDisplay: (display: any) => {
            type: 'set display (scenes.trends.trendsLogic.*)'
            payload: {
                display: any
            }
        }
        loadMoreBreakdownValues: () => {
            type: 'load more breakdown values (scenes.trends.trendsLogic.*)'
            payload: {
                value: true
            }
        }
        setBreakdownValuesLoading: (loading: boolean) => {
            type: 'set breakdown values loading (scenes.trends.trendsLogic.*)'
            payload: {
                loading: boolean
            }
        }
        toggleLifecycle: (lifecycleName: string) => {
            type: 'toggle lifecycle (scenes.trends.trendsLogic.*)'
            payload: {
                lifecycleName: string
            }
        }
        setTargetAction: (action: ActionFilter) => {
            type: 'set target action (scenes.trends.trendsLogic.*)'
            payload: {
                action: ActionFilter
            }
        }
    }
    actionKeys: {
        'toggle visibility (scenes.trends.trendsLogic.*)': 'toggleVisibility'
        'set hidden by id (scenes.trends.trendsLogic.*)': 'setHiddenById'
        'load results success (scenes.trends.trendsLogic.*)': 'loadResultsSuccess'
        'load people (scenes.trends.trendsLogic.*)': 'loadPeople'
        'load people from url (scenes.trends.trendsLogic.*)': 'loadPeopleFromUrl'
        'set filters (scenes.trends.trendsLogic.*)': 'setFilters'
        'set display (scenes.trends.trendsLogic.*)': 'setDisplay'
        'load more breakdown values (scenes.trends.trendsLogic.*)': 'loadMoreBreakdownValues'
        'set breakdown values loading (scenes.trends.trendsLogic.*)': 'setBreakdownValuesLoading'
        'toggle lifecycle (scenes.trends.trendsLogic.*)': 'toggleLifecycle'
        'set target action (scenes.trends.trendsLogic.*)': 'setTargetAction'
    }
    actionTypes: {
        toggleVisibility: 'toggle visibility (scenes.trends.trendsLogic.*)'
        setHiddenById: 'set hidden by id (scenes.trends.trendsLogic.*)'
        loadResultsSuccess: 'load results success (scenes.trends.trendsLogic.*)'
        loadPeople: 'load people (scenes.trends.trendsLogic.*)'
        loadPeopleFromUrl: 'load people from url (scenes.trends.trendsLogic.*)'
        setFilters: 'set filters (scenes.trends.trendsLogic.*)'
        setDisplay: 'set display (scenes.trends.trendsLogic.*)'
        loadMoreBreakdownValues: 'load more breakdown values (scenes.trends.trendsLogic.*)'
        setBreakdownValuesLoading: 'set breakdown values loading (scenes.trends.trendsLogic.*)'
        toggleLifecycle: 'toggle lifecycle (scenes.trends.trendsLogic.*)'
        setTargetAction: 'set target action (scenes.trends.trendsLogic.*)'
    }
    actions: {
        toggleVisibility: (index: number) => void
        setHiddenById: (entry: Record<string, boolean | undefined>) => void
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        loadPeople: (peopleParams: PersonsModalParams) => void
        loadPeopleFromUrl: (props: LoadPeopleFromUrlProps) => void
        setFilters: (filters: Partial<FilterType>, mergeFilters?: any) => void
        setDisplay: (display: any) => void
        loadMoreBreakdownValues: () => void
        setBreakdownValuesLoading: (loading: boolean) => void
        toggleLifecycle: (lifecycleName: string) => void
        setTargetAction: (action: ActionFilter) => void
    }
    defaults: {
        toggledLifecycles: string[]
        targetAction: ActionFilter
        breakdownValuesLoading: boolean
    }
    events: {}
    key: string | number
    listeners: {
        loadPeople: ((
            action: {
                type: 'load people (scenes.trends.trendsLogic.*)'
                payload: {
                    peopleParams: PersonsModalParams
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadPeopleFromUrl: ((
            action: {
                type: 'load people from url (scenes.trends.trendsLogic.*)'
                payload: LoadPeopleFromUrlProps
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFilters: ((
            action: {
                type: 'set filters (scenes.trends.trendsLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                    mergeFilters: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDisplay: ((
            action: {
                type: 'set display (scenes.trends.trendsLogic.*)'
                payload: {
                    display: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadMoreBreakdownValues: ((
            action: {
                type: 'load more breakdown values (scenes.trends.trendsLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'trends', 'trendsLogic', '*']
    pathString: 'scenes.trends.trendsLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        toggledLifecycles: string[]
        targetAction: ActionFilter
        breakdownValuesLoading: boolean
    }
    reducers: {
        toggledLifecycles: (state: string[], action: any, fullState: any) => string[]
        targetAction: (state: ActionFilter, action: any, fullState: any) => ActionFilter
        breakdownValuesLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        toggledLifecycles: string[]
        targetAction: ActionFilter
        breakdownValuesLoading: boolean
    }
    selectors: {
        toggledLifecycles: (state: any, props?: any) => string[]
        targetAction: (state: any, props?: any) => ActionFilter
        breakdownValuesLoading: (state: any, props?: any) => boolean
        insight: (state: any, props?: any) => Partial<InsightModel>
        insightLoading: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => Partial<FilterType>
        hiddenLegendKeys: (state: any, props?: any) => Record<string, boolean | undefined>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        loadedFilters: (state: any, props?: any) => Partial<FilterType>
        results: (state: any, props?: any) => TrendResult[]
        loadMoreBreakdownUrl: (state: any, props?: any) => string | null | undefined
        resultsLoading: (state: any, props?: any) => boolean
        numberOfSeries: (state: any, props?: any) => number
        indexedResults: (state: any, props?: any) => IndexedTrendResult[]
        showModalActions: (state: any, props?: any) => boolean
        aggregationTargetLabel: (
            state: any,
            props?: any
        ) => {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: (state: any, props?: any) => number
        labelGroupType: (state: any, props?: any) => 'people' | 'none' | number
    }
    sharedListeners: {}
    values: {
        toggledLifecycles: string[]
        targetAction: ActionFilter
        breakdownValuesLoading: boolean
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        hiddenLegendKeys: Record<string, boolean | undefined>
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        loadedFilters: Partial<FilterType>
        results: TrendResult[]
        loadMoreBreakdownUrl: string | null | undefined
        resultsLoading: boolean
        numberOfSeries: number
        indexedResults: IndexedTrendResult[]
        showModalActions: boolean
        aggregationTargetLabel: {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: number
        labelGroupType: 'people' | 'none' | number
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        loadedFilters: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => Partial<FilterType>
        results: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => TrendResult[]
        loadMoreBreakdownUrl: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => string | null | undefined
        resultsLoading: (insightLoading: boolean) => boolean
        numberOfSeries: (filters: Partial<FilterType>) => number
        indexedResults: (
            filters: Partial<FilterType>,
            results: TrendResult[],
            toggledLifecycles: string[]
        ) => IndexedTrendResult[]
        showModalActions: (filters: Partial<FilterType>) => boolean
        aggregationTargetLabel: (
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            },
            targetAction: ActionFilter
        ) => {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: (
            filters: Partial<FilterType>,
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => number
        labelGroupType: (filters: Partial<FilterType>) => 'people' | 'none' | number
    }
}
