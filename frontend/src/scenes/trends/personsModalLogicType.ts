// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:26 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { LoadPeopleFromUrlProps, PersonsModalParams } from './personsModalLogic'
import type { TrendActors } from './types'
import type { ActionFilter, FilterType, GraphDataset, GroupType } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'

export interface personsModalLogicType extends Logic {
    actionCreators: {
        setSearchTerm: (term: string) => {
            type: 'set search term (scenes.trends.personsModalLogic)'
            payload: {
                term: string
            }
        }
        setCohortModalVisible: (visible: boolean) => {
            type: 'set cohort modal visible (scenes.trends.personsModalLogic)'
            payload: {
                visible: boolean
            }
        }
        loadPeople: (peopleParams: PersonsModalParams) => {
            type: 'load people (scenes.trends.personsModalLogic)'
            payload: {
                peopleParams: PersonsModalParams
            }
        }
        setUrl: (props: LoadPeopleFromUrlProps) => {
            type: 'set url (scenes.trends.personsModalLogic)'
            payload: {
                props: LoadPeopleFromUrlProps
            }
        }
        loadPeopleFromUrl: (props: LoadPeopleFromUrlProps) => {
            type: 'load people from url (scenes.trends.personsModalLogic)'
            payload: LoadPeopleFromUrlProps
        }
        switchToDataPoint: (seriesId: number) => {
            type: 'switch to data point (scenes.trends.personsModalLogic)'
            payload: {
                seriesId: number
            }
        }
        loadMorePeople: () => {
            type: 'load more people (scenes.trends.personsModalLogic)'
            payload: {
                value: true
            }
        }
        hidePeople: () => {
            type: 'hide people (scenes.trends.personsModalLogic)'
            payload: {
                value: true
            }
        }
        saveCohortWithUrl: (cohortName: string) => {
            type: 'save cohort with url (scenes.trends.personsModalLogic)'
            payload: {
                cohortName: string
            }
        }
        setPersonsModalFilters: (
            searchTerm: string,
            people: TrendActors,
            filters: Partial<FilterType>
        ) => {
            type: 'set persons modal filters (scenes.trends.personsModalLogic)'
            payload: {
                searchTerm: string
                people: TrendActors
                filters: Partial<FilterType>
            }
        }
        saveFirstLoadedActors: (people: TrendActors) => {
            type: 'save first loaded actors (scenes.trends.personsModalLogic)'
            payload: {
                people: TrendActors
            }
        }
        setFirstLoadedActors: (firstLoadedPeople: TrendActors | null) => {
            type: 'set first loaded actors (scenes.trends.personsModalLogic)'
            payload: {
                firstLoadedPeople: TrendActors | null
            }
        }
        openRecordingModal: (sessionRecordingId: string) => {
            type: 'open recording modal (scenes.trends.personsModalLogic)'
            payload: {
                sessionRecordingId: string
            }
        }
        closeRecordingModal: () => {
            type: 'close recording modal (scenes.trends.personsModalLogic)'
            payload: boolean
        }
        reportCohortCreatedFromPersonsModal: (filters: Partial<FilterType>) => {
            type: 'report cohort created from persons modal (scenes.trends.personsModalLogic)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        loadPeopleSuccess: (
            people: TrendActors,
            payload?: {
                peopleParams: PersonsModalParams
            }
        ) => {
            type: 'load people success (scenes.trends.personsModalLogic)'
            payload: {
                people: TrendActors
                payload?: {
                    peopleParams: PersonsModalParams
                }
            }
        }
        loadPeopleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load people failure (scenes.trends.personsModalLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadPeopleFromUrlSuccess: (
            people: {
                people: any
                count: any
                label: string
                funnelStep: number | undefined
                breakdown_value: string | number
                day: string | number
                action: ActionFilter | undefined
                next: any
                pathsDropoff: boolean | undefined
                crossDataset: GraphDataset[] | undefined
                seriesId: number | undefined
            },
            payload?: LoadPeopleFromUrlProps
        ) => {
            type: 'load people from url success (scenes.trends.personsModalLogic)'
            payload: {
                people: {
                    people: any
                    count: any
                    label: string
                    funnelStep: number | undefined
                    breakdown_value: string | number
                    day: string | number
                    action: ActionFilter | undefined
                    next: any
                    pathsDropoff: boolean | undefined
                    crossDataset: GraphDataset[] | undefined
                    seriesId: number | undefined
                }
                payload?: LoadPeopleFromUrlProps
            }
        }
        loadPeopleFromUrlFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load people from url failure (scenes.trends.personsModalLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadMorePeopleSuccess: (
            people: {
                people: any[]
                count: any
                action: ActionFilter | undefined
                label: string
                day: string | number
                breakdown_value: string | number | undefined
                next: any
                funnelStep: number | undefined
                crossDataset: GraphDataset[] | undefined
                seriesId: number | undefined
            } | null,
            payload?: {
                value: true
            }
        ) => {
            type: 'load more people success (scenes.trends.personsModalLogic)'
            payload: {
                people: {
                    people: any[]
                    count: any
                    action: ActionFilter | undefined
                    label: string
                    day: string | number
                    breakdown_value: string | number | undefined
                    next: any
                    funnelStep: number | undefined
                    crossDataset: GraphDataset[] | undefined
                    seriesId: number | undefined
                } | null
                payload?: {
                    value: true
                }
            }
        }
        loadMorePeopleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load more people failure (scenes.trends.personsModalLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set search term (scenes.trends.personsModalLogic)': 'setSearchTerm'
        'set cohort modal visible (scenes.trends.personsModalLogic)': 'setCohortModalVisible'
        'load people (scenes.trends.personsModalLogic)': 'loadPeople'
        'set url (scenes.trends.personsModalLogic)': 'setUrl'
        'load people from url (scenes.trends.personsModalLogic)': 'loadPeopleFromUrl'
        'switch to data point (scenes.trends.personsModalLogic)': 'switchToDataPoint'
        'load more people (scenes.trends.personsModalLogic)': 'loadMorePeople'
        'hide people (scenes.trends.personsModalLogic)': 'hidePeople'
        'save cohort with url (scenes.trends.personsModalLogic)': 'saveCohortWithUrl'
        'set persons modal filters (scenes.trends.personsModalLogic)': 'setPersonsModalFilters'
        'save first loaded actors (scenes.trends.personsModalLogic)': 'saveFirstLoadedActors'
        'set first loaded actors (scenes.trends.personsModalLogic)': 'setFirstLoadedActors'
        'open recording modal (scenes.trends.personsModalLogic)': 'openRecordingModal'
        'close recording modal (scenes.trends.personsModalLogic)': 'closeRecordingModal'
        'report cohort created from persons modal (scenes.trends.personsModalLogic)': 'reportCohortCreatedFromPersonsModal'
        'load people success (scenes.trends.personsModalLogic)': 'loadPeopleSuccess'
        'load people failure (scenes.trends.personsModalLogic)': 'loadPeopleFailure'
        'load people from url success (scenes.trends.personsModalLogic)': 'loadPeopleFromUrlSuccess'
        'load people from url failure (scenes.trends.personsModalLogic)': 'loadPeopleFromUrlFailure'
        'load more people success (scenes.trends.personsModalLogic)': 'loadMorePeopleSuccess'
        'load more people failure (scenes.trends.personsModalLogic)': 'loadMorePeopleFailure'
    }
    actionTypes: {
        setSearchTerm: 'set search term (scenes.trends.personsModalLogic)'
        setCohortModalVisible: 'set cohort modal visible (scenes.trends.personsModalLogic)'
        loadPeople: 'load people (scenes.trends.personsModalLogic)'
        setUrl: 'set url (scenes.trends.personsModalLogic)'
        loadPeopleFromUrl: 'load people from url (scenes.trends.personsModalLogic)'
        switchToDataPoint: 'switch to data point (scenes.trends.personsModalLogic)'
        loadMorePeople: 'load more people (scenes.trends.personsModalLogic)'
        hidePeople: 'hide people (scenes.trends.personsModalLogic)'
        saveCohortWithUrl: 'save cohort with url (scenes.trends.personsModalLogic)'
        setPersonsModalFilters: 'set persons modal filters (scenes.trends.personsModalLogic)'
        saveFirstLoadedActors: 'save first loaded actors (scenes.trends.personsModalLogic)'
        setFirstLoadedActors: 'set first loaded actors (scenes.trends.personsModalLogic)'
        openRecordingModal: 'open recording modal (scenes.trends.personsModalLogic)'
        closeRecordingModal: 'close recording modal (scenes.trends.personsModalLogic)'
        reportCohortCreatedFromPersonsModal: 'report cohort created from persons modal (scenes.trends.personsModalLogic)'
        loadPeopleSuccess: 'load people success (scenes.trends.personsModalLogic)'
        loadPeopleFailure: 'load people failure (scenes.trends.personsModalLogic)'
        loadPeopleFromUrlSuccess: 'load people from url success (scenes.trends.personsModalLogic)'
        loadPeopleFromUrlFailure: 'load people from url failure (scenes.trends.personsModalLogic)'
        loadMorePeopleSuccess: 'load more people success (scenes.trends.personsModalLogic)'
        loadMorePeopleFailure: 'load more people failure (scenes.trends.personsModalLogic)'
    }
    actions: {
        setSearchTerm: (term: string) => void
        setCohortModalVisible: (visible: boolean) => void
        loadPeople: (peopleParams: PersonsModalParams) => void
        setUrl: (props: LoadPeopleFromUrlProps) => void
        loadPeopleFromUrl: (props: LoadPeopleFromUrlProps) => void
        switchToDataPoint: (seriesId: number) => void
        loadMorePeople: () => void
        hidePeople: () => void
        saveCohortWithUrl: (cohortName: string) => void
        setPersonsModalFilters: (searchTerm: string, people: TrendActors, filters: Partial<FilterType>) => void
        saveFirstLoadedActors: (people: TrendActors) => void
        setFirstLoadedActors: (firstLoadedPeople: TrendActors | null) => void
        openRecordingModal: (sessionRecordingId: string) => void
        closeRecordingModal: () => void
        reportCohortCreatedFromPersonsModal: (filters: Partial<FilterType>) => void
        loadPeopleSuccess: (
            people: TrendActors,
            payload?: {
                peopleParams: PersonsModalParams
            }
        ) => void
        loadPeopleFailure: (error: string, errorObject?: any) => void
        loadPeopleFromUrlSuccess: (
            people: {
                people: any
                count: any
                label: string
                funnelStep: number | undefined
                breakdown_value: string | number
                day: string | number
                action: ActionFilter | undefined
                next: any
                pathsDropoff: boolean | undefined
                crossDataset: GraphDataset[] | undefined
                seriesId: number | undefined
            },
            payload?: LoadPeopleFromUrlProps
        ) => void
        loadPeopleFromUrlFailure: (error: string, errorObject?: any) => void
        loadMorePeopleSuccess: (
            people: {
                people: any[]
                count: any
                action: ActionFilter | undefined
                label: string
                day: string | number
                breakdown_value: string | number | undefined
                next: any
                funnelStep: number | undefined
                crossDataset: GraphDataset[] | undefined
                seriesId: number | undefined
            } | null,
            payload?: {
                value: true
            }
        ) => void
        loadMorePeopleFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        sessionRecordingId: null | string
        searchTerm: string
        cohortModalVisible: boolean
        people: TrendActors | null
        firstLoadedPeople: TrendActors | null
        loadingMorePeople: boolean
        showingPeople: boolean
        peopleParams: PersonsModalParams | null
        peopleUrlParams: LoadPeopleFromUrlProps | null
        peopleLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        saveCohortWithUrl: ((
            action: {
                type: 'save cohort with url (scenes.trends.personsModalLogic)'
                payload: {
                    cohortName: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPersonsModalFilters: ((
            action: {
                type: 'set persons modal filters (scenes.trends.personsModalLogic)'
                payload: {
                    searchTerm: string
                    people: TrendActors
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        switchToDataPoint: ((
            action: {
                type: 'switch to data point (scenes.trends.personsModalLogic)'
                payload: {
                    seriesId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'trends', 'personsModalLogic']
    pathString: 'scenes.trends.personsModalLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        sessionRecordingId: null | string
        searchTerm: string
        cohortModalVisible: boolean
        people: TrendActors | null
        firstLoadedPeople: TrendActors | null
        loadingMorePeople: boolean
        showingPeople: boolean
        peopleParams: PersonsModalParams | null
        peopleUrlParams: LoadPeopleFromUrlProps | null
        peopleLoading: boolean
    }
    reducers: {
        sessionRecordingId: (state: null | string, action: any, fullState: any) => null | string
        searchTerm: (state: string, action: any, fullState: any) => string
        cohortModalVisible: (state: boolean, action: any, fullState: any) => boolean
        people: (state: TrendActors | null, action: any, fullState: any) => TrendActors | null
        firstLoadedPeople: (state: TrendActors | null, action: any, fullState: any) => TrendActors | null
        loadingMorePeople: (state: boolean, action: any, fullState: any) => boolean
        showingPeople: (state: boolean, action: any, fullState: any) => boolean
        peopleParams: (state: PersonsModalParams | null, action: any, fullState: any) => PersonsModalParams | null
        peopleUrlParams: (
            state: LoadPeopleFromUrlProps | null,
            action: any,
            fullState: any
        ) => LoadPeopleFromUrlProps | null
        peopleLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        sessionRecordingId: null | string
        searchTerm: string
        cohortModalVisible: boolean
        people: TrendActors | null
        firstLoadedPeople: TrendActors | null
        loadingMorePeople: boolean
        showingPeople: boolean
        peopleParams: PersonsModalParams | null
        peopleUrlParams: LoadPeopleFromUrlProps | null
        peopleLoading: boolean
    }
    selectors: {
        sessionRecordingId: (state: any, props?: any) => null | string
        searchTerm: (state: any, props?: any) => string
        cohortModalVisible: (state: any, props?: any) => boolean
        people: (state: any, props?: any) => TrendActors | null
        firstLoadedPeople: (state: any, props?: any) => TrendActors | null
        loadingMorePeople: (state: any, props?: any) => boolean
        showingPeople: (state: any, props?: any) => boolean
        peopleParams: (state: any, props?: any) => PersonsModalParams | null
        peopleUrlParams: (state: any, props?: any) => LoadPeopleFromUrlProps | null
        peopleLoading: (state: any, props?: any) => boolean
        groupTypes: (state: any, props?: any) => Array<GroupType>
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        isInitialLoad: (state: any, props?: any) => boolean
        isGroupType: (state: any, props?: any) => boolean | undefined
        actorLabel: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        sessionRecordingId: null | string
        searchTerm: string
        cohortModalVisible: boolean
        people: TrendActors | null
        firstLoadedPeople: TrendActors | null
        loadingMorePeople: boolean
        showingPeople: boolean
        peopleParams: PersonsModalParams | null
        peopleUrlParams: LoadPeopleFromUrlProps | null
        peopleLoading: boolean
        groupTypes: Array<GroupType>
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        featureFlags: FeatureFlagsSet
        isInitialLoad: boolean
        isGroupType: boolean | undefined
        actorLabel: string
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        isInitialLoad: (peopleLoading: boolean, loadingMorePeople: boolean) => boolean
        isGroupType: (people: TrendActors | null) => boolean | undefined
        actorLabel: (
            people: TrendActors | null,
            isGroupType: boolean | undefined,
            groupTypes: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').GroupType[],
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            }
        ) => string
    }
}
