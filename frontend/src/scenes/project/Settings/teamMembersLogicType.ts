// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AvailableFeature, BaseMemberType, ExplicitTeamMemberType, FusedTeamMemberType, OrganizationMemberType, UserBasicType, UserType } from '../../../types'
import type { TeamMembershipLevel } from '../../../lib/constants'

export interface teamMembersLogicType extends Logic {
    actionCreators: {
        changeUserAccessLevel: (
            user: UserBasicType,
            newLevel: TeamMembershipLevel
        ) => {
            type: 'change user access level (scenes.project.Settings.teamMembersLogic)'
            payload: {
                user: UserBasicType
                newLevel: TeamMembershipLevel
            }
        }
        loadMembers: () => {
            type: 'load members (scenes.project.Settings.teamMembersLogic)'
            payload: any
        }
        loadMembersSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: any
        ) => {
            type: 'load members success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: any
            }
        }
        loadMembersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load members failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addMembers: ({ userUuids, level }: { userUuids: string[]; level: TeamMembershipLevel }) => {
            type: 'add members (scenes.project.Settings.teamMembersLogic)'
            payload: {
                userUuids: string[]
                level: TeamMembershipLevel
            }
        }
        addMembersSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                userUuids: string[]
                level: TeamMembershipLevel
            }
        ) => {
            type: 'add members success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: {
                    userUuids: string[]
                    level: TeamMembershipLevel
                }
            }
        }
        addMembersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add members failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        removeMember: ({ member }: { member: BaseMemberType }) => {
            type: 'remove member (scenes.project.Settings.teamMembersLogic)'
            payload: {
                member: BaseMemberType
            }
        }
        removeMemberSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                member: BaseMemberType
            }
        ) => {
            type: 'remove member success (scenes.project.Settings.teamMembersLogic)'
            payload: {
                explicitMembers: ExplicitTeamMemberType[]
                payload?: {
                    member: BaseMemberType
                }
            }
        }
        removeMemberFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'remove member failure (scenes.project.Settings.teamMembersLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'change user access level (scenes.project.Settings.teamMembersLogic)': 'changeUserAccessLevel'
        'load members (scenes.project.Settings.teamMembersLogic)': 'loadMembers'
        'load members success (scenes.project.Settings.teamMembersLogic)': 'loadMembersSuccess'
        'load members failure (scenes.project.Settings.teamMembersLogic)': 'loadMembersFailure'
        'add members (scenes.project.Settings.teamMembersLogic)': 'addMembers'
        'add members success (scenes.project.Settings.teamMembersLogic)': 'addMembersSuccess'
        'add members failure (scenes.project.Settings.teamMembersLogic)': 'addMembersFailure'
        'remove member (scenes.project.Settings.teamMembersLogic)': 'removeMember'
        'remove member success (scenes.project.Settings.teamMembersLogic)': 'removeMemberSuccess'
        'remove member failure (scenes.project.Settings.teamMembersLogic)': 'removeMemberFailure'
    }
    actionTypes: {
        changeUserAccessLevel: 'change user access level (scenes.project.Settings.teamMembersLogic)'
        loadMembers: 'load members (scenes.project.Settings.teamMembersLogic)'
        loadMembersSuccess: 'load members success (scenes.project.Settings.teamMembersLogic)'
        loadMembersFailure: 'load members failure (scenes.project.Settings.teamMembersLogic)'
        addMembers: 'add members (scenes.project.Settings.teamMembersLogic)'
        addMembersSuccess: 'add members success (scenes.project.Settings.teamMembersLogic)'
        addMembersFailure: 'add members failure (scenes.project.Settings.teamMembersLogic)'
        removeMember: 'remove member (scenes.project.Settings.teamMembersLogic)'
        removeMemberSuccess: 'remove member success (scenes.project.Settings.teamMembersLogic)'
        removeMemberFailure: 'remove member failure (scenes.project.Settings.teamMembersLogic)'
    }
    actions: {
        changeUserAccessLevel: (user: UserBasicType, newLevel: TeamMembershipLevel) => void
        loadMembers: () => void
        loadMembersSuccess: (explicitMembers: ExplicitTeamMemberType[], payload?: any) => void
        loadMembersFailure: (error: string, errorObject?: any) => void
        addMembers: ({ userUuids, level }: { userUuids: string[]; level: TeamMembershipLevel }) => void
        addMembersSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                userUuids: string[]
                level: TeamMembershipLevel
            }
        ) => void
        addMembersFailure: (error: string, errorObject?: any) => void
        removeMember: ({ member }: { member: BaseMemberType }) => void
        removeMemberSuccess: (
            explicitMembers: ExplicitTeamMemberType[],
            payload?: {
                member: BaseMemberType
            }
        ) => void
        removeMemberFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        changeUserAccessLevel: ((
            action: {
                type: 'change user access level (scenes.project.Settings.teamMembersLogic)'
                payload: {
                    user: UserBasicType
                    newLevel: TeamMembershipLevel
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'project', 'Settings', 'teamMembersLogic']
    pathString: 'scenes.project.Settings.teamMembersLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
    }
    reducers: {
        explicitMembers: (state: ExplicitTeamMemberType[], action: any, fullState: any) => ExplicitTeamMemberType[]
        explicitMembersLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
    }
    selectors: {
        explicitMembers: (state: any, props?: any) => ExplicitTeamMemberType[]
        explicitMembersLoading: (state: any, props?: any) => boolean
        allMembers: (state: any, props?: any) => FusedTeamMemberType[]
        allMembersLoading: (state: any, props?: any) => boolean
        admins: (state: any, props?: any) => FusedTeamMemberType[]
        plainMembers: (state: any, props?: any) => FusedTeamMemberType[]
        addableMembers: (state: any, props?: any) => FusedTeamMemberType[]
    }
    sharedListeners: {}
    values: {
        explicitMembers: ExplicitTeamMemberType[]
        explicitMembersLoading: boolean
        allMembers: FusedTeamMemberType[]
        allMembersLoading: boolean
        admins: FusedTeamMemberType[]
        plainMembers: FusedTeamMemberType[]
        addableMembers: FusedTeamMemberType[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        allMembers: (
            currentTeam: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').TeamType | null,
            hasAvailableFeature: (feature: AvailableFeature) => boolean,
            explicitMembers: ExplicitTeamMemberType[],
            members: OrganizationMemberType[]
        ) => FusedTeamMemberType[]
        allMembersLoading: (explicitMembersLoading: boolean, membersLoading: boolean) => boolean
        admins: (allMembers: FusedTeamMemberType[]) => FusedTeamMemberType[]
        plainMembers: (allMembers: FusedTeamMemberType[]) => FusedTeamMemberType[]
        addableMembers: (
            explicitMembers: ExplicitTeamMemberType[],
            members: OrganizationMemberType[],
            user: UserType | null
        ) => FusedTeamMemberType[]
    }
}
