// Generated by kea-typegen on Thu, 09 Jun 2022 19:49:56 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NewDashboardForm } from './newDashboardLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'

export interface newDashboardLogicType extends Logic {
    actionCreators: {
        showNewDashboardModal: () => {
            type: 'show new dashboard modal (scenes.dashboard.newDashboardLogic)'
            payload: {
                value: true
            }
        }
        hideNewDashboardModal: () => {
            type: 'hide new dashboard modal (scenes.dashboard.newDashboardLogic)'
            payload: {
                value: true
            }
        }
        addDashboard: (form: Partial<NewDashboardForm>) => {
            type: 'add dashboard (scenes.dashboard.newDashboardLogic)'
            payload: {
                form: Partial<NewDashboardForm>
            }
        }
        setNewDashboardValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set new dashboard value (scenes.dashboard.newDashboardLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setNewDashboardValues: (values: DeepPartial<NewDashboardForm>) => {
            type: 'set new dashboard values (scenes.dashboard.newDashboardLogic)'
            payload: {
                values: DeepPartial<NewDashboardForm>
            }
        }
        setNewDashboardManualErrors: (errors: Record<string, any>) => {
            type: 'set new dashboard manual errors (scenes.dashboard.newDashboardLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchNewDashboardField: (key: string) => {
            type: 'touch new dashboard field (scenes.dashboard.newDashboardLogic)'
            payload: {
                key: string
            }
        }
        resetNewDashboard: (values?: NewDashboardForm) => {
            type: 'reset new dashboard (scenes.dashboard.newDashboardLogic)'
            payload: {
                values?: NewDashboardForm
            }
        }
        submitNewDashboard: () => {
            type: 'submit new dashboard (scenes.dashboard.newDashboardLogic)'
            payload: {
                value: boolean
            }
        }
        submitNewDashboardRequest: (newDashboard: NewDashboardForm) => {
            type: 'submit new dashboard request (scenes.dashboard.newDashboardLogic)'
            payload: {
                newDashboard: NewDashboardForm
            }
        }
        submitNewDashboardSuccess: (newDashboard: NewDashboardForm) => {
            type: 'submit new dashboard success (scenes.dashboard.newDashboardLogic)'
            payload: {
                newDashboard: NewDashboardForm
            }
        }
        submitNewDashboardFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit new dashboard failure (scenes.dashboard.newDashboardLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
    }
    actionKeys: {
        'show new dashboard modal (scenes.dashboard.newDashboardLogic)': 'showNewDashboardModal'
        'hide new dashboard modal (scenes.dashboard.newDashboardLogic)': 'hideNewDashboardModal'
        'add dashboard (scenes.dashboard.newDashboardLogic)': 'addDashboard'
        'set new dashboard value (scenes.dashboard.newDashboardLogic)': 'setNewDashboardValue'
        'set new dashboard values (scenes.dashboard.newDashboardLogic)': 'setNewDashboardValues'
        'set new dashboard manual errors (scenes.dashboard.newDashboardLogic)': 'setNewDashboardManualErrors'
        'touch new dashboard field (scenes.dashboard.newDashboardLogic)': 'touchNewDashboardField'
        'reset new dashboard (scenes.dashboard.newDashboardLogic)': 'resetNewDashboard'
        'submit new dashboard (scenes.dashboard.newDashboardLogic)': 'submitNewDashboard'
        'submit new dashboard request (scenes.dashboard.newDashboardLogic)': 'submitNewDashboardRequest'
        'submit new dashboard success (scenes.dashboard.newDashboardLogic)': 'submitNewDashboardSuccess'
        'submit new dashboard failure (scenes.dashboard.newDashboardLogic)': 'submitNewDashboardFailure'
    }
    actionTypes: {
        showNewDashboardModal: 'show new dashboard modal (scenes.dashboard.newDashboardLogic)'
        hideNewDashboardModal: 'hide new dashboard modal (scenes.dashboard.newDashboardLogic)'
        addDashboard: 'add dashboard (scenes.dashboard.newDashboardLogic)'
        setNewDashboardValue: 'set new dashboard value (scenes.dashboard.newDashboardLogic)'
        setNewDashboardValues: 'set new dashboard values (scenes.dashboard.newDashboardLogic)'
        setNewDashboardManualErrors: 'set new dashboard manual errors (scenes.dashboard.newDashboardLogic)'
        touchNewDashboardField: 'touch new dashboard field (scenes.dashboard.newDashboardLogic)'
        resetNewDashboard: 'reset new dashboard (scenes.dashboard.newDashboardLogic)'
        submitNewDashboard: 'submit new dashboard (scenes.dashboard.newDashboardLogic)'
        submitNewDashboardRequest: 'submit new dashboard request (scenes.dashboard.newDashboardLogic)'
        submitNewDashboardSuccess: 'submit new dashboard success (scenes.dashboard.newDashboardLogic)'
        submitNewDashboardFailure: 'submit new dashboard failure (scenes.dashboard.newDashboardLogic)'
    }
    actions: {
        showNewDashboardModal: () => void
        hideNewDashboardModal: () => void
        addDashboard: (form: Partial<NewDashboardForm>) => void
        setNewDashboardValue: (key: FieldName, value: any) => void
        setNewDashboardValues: (values: DeepPartial<NewDashboardForm>) => void
        setNewDashboardManualErrors: (errors: Record<string, any>) => void
        touchNewDashboardField: (key: string) => void
        resetNewDashboard: (values?: NewDashboardForm) => void
        submitNewDashboard: () => void
        submitNewDashboardRequest: (newDashboard: NewDashboardForm) => void
        submitNewDashboardSuccess: (newDashboard: NewDashboardForm) => void
        submitNewDashboardFailure: (error: Error, errors: Record<string, any>) => void
    }
    defaults: {
        newDashboardModalVisible: boolean
        newDashboard: NewDashboardForm
        isNewDashboardSubmitting: boolean
        showNewDashboardErrors: boolean
        newDashboardChanged: boolean
        newDashboardTouches: Record<string, boolean>
        newDashboardManualErrors: Record<string, any>
    }
    events: {}
    key: undefined
    listeners: {
        addDashboard: ((
            action: {
                type: 'add dashboard (scenes.dashboard.newDashboardLogic)'
                payload: {
                    form: Partial<NewDashboardForm>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        showNewDashboardModal: ((
            action: {
                type: 'show new dashboard modal (scenes.dashboard.newDashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'newDashboardLogic']
    pathString: 'scenes.dashboard.newDashboardLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        newDashboardModalVisible: boolean
        newDashboard: NewDashboardForm
        isNewDashboardSubmitting: boolean
        showNewDashboardErrors: boolean
        newDashboardChanged: boolean
        newDashboardTouches: Record<string, boolean>
        newDashboardManualErrors: Record<string, any>
    }
    reducers: {
        newDashboardModalVisible: (state: boolean, action: any, fullState: any) => boolean
        newDashboard: (state: NewDashboardForm, action: any, fullState: any) => NewDashboardForm
        isNewDashboardSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showNewDashboardErrors: (state: boolean, action: any, fullState: any) => boolean
        newDashboardChanged: (state: boolean, action: any, fullState: any) => boolean
        newDashboardTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        newDashboardManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
    }
    selector: (state: any) => {
        newDashboardModalVisible: boolean
        newDashboard: NewDashboardForm
        isNewDashboardSubmitting: boolean
        showNewDashboardErrors: boolean
        newDashboardChanged: boolean
        newDashboardTouches: Record<string, boolean>
        newDashboardManualErrors: Record<string, any>
    }
    selectors: {
        newDashboardModalVisible: (state: any, props?: any) => boolean
        newDashboard: (state: any, props?: any) => NewDashboardForm
        isNewDashboardSubmitting: (state: any, props?: any) => boolean
        showNewDashboardErrors: (state: any, props?: any) => boolean
        newDashboardChanged: (state: any, props?: any) => boolean
        newDashboardTouches: (state: any, props?: any) => Record<string, boolean>
        newDashboardManualErrors: (state: any, props?: any) => Record<string, any>
        newDashboardTouched: (state: any, props?: any) => boolean
        newDashboardValidationErrors: (state: any, props?: any) => DeepPartialMap<NewDashboardForm, ValidationErrorType>
        newDashboardAllErrors: (state: any, props?: any) => Record<string, any>
        newDashboardHasErrors: (state: any, props?: any) => boolean
        newDashboardErrors: (state: any, props?: any) => DeepPartialMap<NewDashboardForm, ValidationErrorType>
        isNewDashboardValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        newDashboardModalVisible: boolean
        newDashboard: NewDashboardForm
        isNewDashboardSubmitting: boolean
        showNewDashboardErrors: boolean
        newDashboardChanged: boolean
        newDashboardTouches: Record<string, boolean>
        newDashboardManualErrors: Record<string, any>
        newDashboardTouched: boolean
        newDashboardValidationErrors: DeepPartialMap<NewDashboardForm, ValidationErrorType>
        newDashboardAllErrors: Record<string, any>
        newDashboardHasErrors: boolean
        newDashboardErrors: DeepPartialMap<NewDashboardForm, ValidationErrorType>
        isNewDashboardValid: boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
