// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DashboardLogicProps } from './dashboardLogic'
import type { AnyPropertyFilter, Breadcrumb, DashboardLayoutSize, DashboardMode, DashboardType, FilterType, InsightModel, InsightShortId } from '../../types'
import type { DashboardEventSource } from '../../lib/utils/eventUsageLogic'
import type { Layout, Layouts } from '../../../../node_modules/@types/react-grid-layout/index.d'
import type { Dayjs } from '../../../../node_modules/dayjs/index.d'

export interface dashboardLogicType extends Logic {
    actionCreators: {
        setReceivedErrorsFromAPI: (receivedErrors: boolean) => {
            type: 'set received errors from a p i (scenes.dashboard.dashboardLogic)'
            payload: {
                receivedErrors: boolean
            }
        }
        loadDashboardItems: ({ refresh }?: { refresh?: boolean }) => {
            type: 'load dashboard items (scenes.dashboard.dashboardLogic)'
            payload: {
                refresh: boolean | undefined
            }
        }
        triggerDashboardUpdate: (payload: any) => {
            type: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
            payload: {
                payload: any
            }
        }
        setIsSharedDashboard: (
            id: number,
            isShared: boolean
        ) => {
            type: 'set is shared dashboard (scenes.dashboard.dashboardLogic)'
            payload: {
                id: number
                isShared: boolean
            }
        }
        setDashboardMode: (
            mode: DashboardMode | null,
            source: DashboardEventSource | null
        ) => {
            type: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
            payload: {
                mode: DashboardMode | null
                source: DashboardEventSource | null
            }
        }
        updateLayouts: (layouts: Layouts) => {
            type: 'update layouts (scenes.dashboard.dashboardLogic)'
            payload: {
                layouts: Layouts
            }
        }
        updateContainerWidth: (
            containerWidth: number,
            columns: number
        ) => {
            type: 'update container width (scenes.dashboard.dashboardLogic)'
            payload: {
                containerWidth: number
                columns: number
            }
        }
        saveLayouts: () => {
            type: 'save layouts (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        updateItemColor: (
            insightNumericId: number,
            color: string | null
        ) => {
            type: 'update item color (scenes.dashboard.dashboardLogic)'
            payload: {
                insightNumericId: number
                color: string | null
            }
        }
        removeItem: (insight: Partial<InsightModel>) => {
            type: 'remove item (scenes.dashboard.dashboardLogic)'
            payload: {
                insight: Partial<InsightModel>
            }
        }
        refreshAllDashboardItems: (items?: InsightModel[]) => {
            type: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
            payload: {
                items: InsightModel[] | undefined
            }
        }
        refreshAllDashboardItemsManual: () => {
            type: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        resetInterval: () => {
            type: 'reset interval (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        updateAndRefreshDashboard: () => {
            type: 'update and refresh dashboard (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        setDates: (
            dateFrom: string,
            dateTo: string | null,
            reloadDashboard?: any
        ) => {
            type: 'set dates (scenes.dashboard.dashboardLogic)'
            payload: {
                dateFrom: string
                dateTo: string | null
                reloadDashboard: any
            }
        }
        setProperties: (properties: AnyPropertyFilter[]) => {
            type: 'set properties (scenes.dashboard.dashboardLogic)'
            payload: {
                properties: AnyPropertyFilter[]
            }
        }
        setAutoRefresh: (
            enabled: boolean,
            interval: number
        ) => {
            type: 'set auto refresh (scenes.dashboard.dashboardLogic)'
            payload: {
                enabled: boolean
                interval: number
            }
        }
        setRefreshStatus: (
            shortId: InsightShortId,
            loading?: any
        ) => {
            type: 'set refresh status (scenes.dashboard.dashboardLogic)'
            payload: {
                shortId: InsightShortId
                loading: any
            }
        }
        setRefreshStatuses: (
            shortIds: InsightShortId[],
            loading?: any
        ) => {
            type: 'set refresh statuses (scenes.dashboard.dashboardLogic)'
            payload: {
                shortIds: InsightShortId[]
                loading: any
            }
        }
        setRefreshError: (shortId: InsightShortId) => {
            type: 'set refresh error (scenes.dashboard.dashboardLogic)'
            payload: {
                shortId: InsightShortId
            }
        }
        reportDashboardViewed: () => {
            type: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
            payload: {
                value: true
            }
        }
        setShouldReportOnAPILoad: (shouldReport: boolean) => {
            type: 'set should report on a p i load (scenes.dashboard.dashboardLogic)'
            payload: {
                shouldReport: boolean
            }
        }
        loadDashboardItemsSuccess: (
            allItems: DashboardType | null,
            payload?: {
                refresh: boolean | undefined
            }
        ) => {
            type: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
            payload: {
                allItems: DashboardType | null
                payload?: {
                    refresh: boolean | undefined
                }
            }
        }
        loadDashboardItemsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load dashboard items failure (scenes.dashboard.dashboardLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set received errors from a p i (scenes.dashboard.dashboardLogic)': 'setReceivedErrorsFromAPI'
        'load dashboard items (scenes.dashboard.dashboardLogic)': 'loadDashboardItems'
        'trigger dashboard update (scenes.dashboard.dashboardLogic)': 'triggerDashboardUpdate'
        'set is shared dashboard (scenes.dashboard.dashboardLogic)': 'setIsSharedDashboard'
        'set dashboard mode (scenes.dashboard.dashboardLogic)': 'setDashboardMode'
        'update layouts (scenes.dashboard.dashboardLogic)': 'updateLayouts'
        'update container width (scenes.dashboard.dashboardLogic)': 'updateContainerWidth'
        'save layouts (scenes.dashboard.dashboardLogic)': 'saveLayouts'
        'update item color (scenes.dashboard.dashboardLogic)': 'updateItemColor'
        'remove item (scenes.dashboard.dashboardLogic)': 'removeItem'
        'refresh all dashboard items (scenes.dashboard.dashboardLogic)': 'refreshAllDashboardItems'
        'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)': 'refreshAllDashboardItemsManual'
        'reset interval (scenes.dashboard.dashboardLogic)': 'resetInterval'
        'update and refresh dashboard (scenes.dashboard.dashboardLogic)': 'updateAndRefreshDashboard'
        'set dates (scenes.dashboard.dashboardLogic)': 'setDates'
        'set properties (scenes.dashboard.dashboardLogic)': 'setProperties'
        'set auto refresh (scenes.dashboard.dashboardLogic)': 'setAutoRefresh'
        'set refresh status (scenes.dashboard.dashboardLogic)': 'setRefreshStatus'
        'set refresh statuses (scenes.dashboard.dashboardLogic)': 'setRefreshStatuses'
        'set refresh error (scenes.dashboard.dashboardLogic)': 'setRefreshError'
        'report dashboard viewed (scenes.dashboard.dashboardLogic)': 'reportDashboardViewed'
        'set should report on a p i load (scenes.dashboard.dashboardLogic)': 'setShouldReportOnAPILoad'
        'load dashboard items success (scenes.dashboard.dashboardLogic)': 'loadDashboardItemsSuccess'
        'load dashboard items failure (scenes.dashboard.dashboardLogic)': 'loadDashboardItemsFailure'
    }
    actionTypes: {
        setReceivedErrorsFromAPI: 'set received errors from a p i (scenes.dashboard.dashboardLogic)'
        loadDashboardItems: 'load dashboard items (scenes.dashboard.dashboardLogic)'
        triggerDashboardUpdate: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
        setIsSharedDashboard: 'set is shared dashboard (scenes.dashboard.dashboardLogic)'
        setDashboardMode: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
        updateLayouts: 'update layouts (scenes.dashboard.dashboardLogic)'
        updateContainerWidth: 'update container width (scenes.dashboard.dashboardLogic)'
        saveLayouts: 'save layouts (scenes.dashboard.dashboardLogic)'
        updateItemColor: 'update item color (scenes.dashboard.dashboardLogic)'
        removeItem: 'remove item (scenes.dashboard.dashboardLogic)'
        refreshAllDashboardItems: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
        refreshAllDashboardItemsManual: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
        resetInterval: 'reset interval (scenes.dashboard.dashboardLogic)'
        updateAndRefreshDashboard: 'update and refresh dashboard (scenes.dashboard.dashboardLogic)'
        setDates: 'set dates (scenes.dashboard.dashboardLogic)'
        setProperties: 'set properties (scenes.dashboard.dashboardLogic)'
        setAutoRefresh: 'set auto refresh (scenes.dashboard.dashboardLogic)'
        setRefreshStatus: 'set refresh status (scenes.dashboard.dashboardLogic)'
        setRefreshStatuses: 'set refresh statuses (scenes.dashboard.dashboardLogic)'
        setRefreshError: 'set refresh error (scenes.dashboard.dashboardLogic)'
        reportDashboardViewed: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
        setShouldReportOnAPILoad: 'set should report on a p i load (scenes.dashboard.dashboardLogic)'
        loadDashboardItemsSuccess: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
        loadDashboardItemsFailure: 'load dashboard items failure (scenes.dashboard.dashboardLogic)'
    }
    actions: {
        setReceivedErrorsFromAPI: (receivedErrors: boolean) => void
        loadDashboardItems: ({ refresh }?: { refresh?: boolean }) => void
        triggerDashboardUpdate: (payload: any) => void
        setIsSharedDashboard: (id: number, isShared: boolean) => void
        setDashboardMode: (mode: DashboardMode | null, source: DashboardEventSource | null) => void
        updateLayouts: (layouts: Layouts) => void
        updateContainerWidth: (containerWidth: number, columns: number) => void
        saveLayouts: () => void
        updateItemColor: (insightNumericId: number, color: string | null) => void
        removeItem: (insight: Partial<InsightModel>) => void
        refreshAllDashboardItems: (items?: InsightModel[]) => void
        refreshAllDashboardItemsManual: () => void
        resetInterval: () => void
        updateAndRefreshDashboard: () => void
        setDates: (dateFrom: string, dateTo: string | null, reloadDashboard?: any) => void
        setProperties: (properties: AnyPropertyFilter[]) => void
        setAutoRefresh: (enabled: boolean, interval: number) => void
        setRefreshStatus: (shortId: InsightShortId, loading?: any) => void
        setRefreshStatuses: (shortIds: InsightShortId[], loading?: any) => void
        setRefreshError: (shortId: InsightShortId) => void
        reportDashboardViewed: () => void
        setShouldReportOnAPILoad: (shouldReport: boolean) => void
        loadDashboardItemsSuccess: (
            allItems: DashboardType | null,
            payload?: {
                refresh: boolean | undefined
            }
        ) => void
        loadDashboardItemsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        allItems: DashboardType | null
        allItemsLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        refreshStatus: Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: number | 'new'
    listeners: {
        setIsSharedDashboard: ((
            action: {
                type: 'set is shared dashboard (scenes.dashboard.dashboardLogic)'
                payload: {
                    id: number
                    isShared: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        triggerDashboardUpdate: ((
            action: {
                type: 'trigger dashboard update (scenes.dashboard.dashboardLogic)'
                payload: {
                    payload: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateLayouts: ((
            action: {
                type: 'update layouts (scenes.dashboard.dashboardLogic)'
                payload: {
                    layouts: Layouts
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveLayouts: ((
            action: {
                type: 'save layouts (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateItemColor: ((
            action: {
                type: 'update item color (scenes.dashboard.dashboardLogic)'
                payload: {
                    insightNumericId: number
                    color: string | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeItem: ((
            action: {
                type: 'remove item (scenes.dashboard.dashboardLogic)'
                payload: {
                    insight: Partial<InsightModel>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        refreshAllDashboardItemsManual: ((
            action: {
                type: 'refresh all dashboard items manual (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        refreshAllDashboardItems: ((
            action: {
                type: 'refresh all dashboard items (scenes.dashboard.dashboardLogic)'
                payload: {
                    items: InsightModel[] | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateAndRefreshDashboard: ((
            action: {
                type: 'update and refresh dashboard (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDates: ((
            action: {
                type: 'set dates (scenes.dashboard.dashboardLogic)'
                payload: {
                    dateFrom: string
                    dateTo: string | null
                    reloadDashboard: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setProperties: ((
            action: {
                type: 'set properties (scenes.dashboard.dashboardLogic)'
                payload: {
                    properties: AnyPropertyFilter[]
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setDashboardMode: ((
            action: {
                type: 'set dashboard mode (scenes.dashboard.dashboardLogic)'
                payload: {
                    mode: DashboardMode | null
                    source: DashboardEventSource | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setAutoRefresh: ((
            action: {
                type: 'set auto refresh (scenes.dashboard.dashboardLogic)'
                payload: {
                    enabled: boolean
                    interval: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        resetInterval: ((
            action: {
                type: 'reset interval (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadDashboardItemsSuccess: ((
            action: {
                type: 'load dashboard items success (scenes.dashboard.dashboardLogic)'
                payload: {
                    allItems: DashboardType | null
                    payload?: {
                        refresh: boolean | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportDashboardViewed: ((
            action: {
                type: 'report dashboard viewed (scenes.dashboard.dashboardLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'dashboard', 'dashboardLogic']
    pathString: 'scenes.dashboard.dashboardLogic'
    props: DashboardLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        allItems: DashboardType | null
        allItemsLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        refreshStatus: Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
    }
    reducers: {
        allItems: (state: DashboardType | null, action: any, fullState: any) => DashboardType | null
        allItemsLoading: (state: boolean, action: any, fullState: any) => boolean
        receivedErrorsFromAPI: (state: boolean, action: any, fullState: any) => boolean
        filters: (state: FilterType, action: any, fullState: any) => FilterType
        refreshStatus: (
            state: Record<
                string,
                {
                    loading?: boolean
                    refreshed?: boolean
                    error?: boolean
                }
            >,
            action: any,
            fullState: any
        ) => Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: (state: number | null, action: any, fullState: any) => number | null
        containerWidth: (state: number | null, action: any, fullState: any) => number | null
        dashboardMode: (state: DashboardMode | null, action: any, fullState: any) => DashboardMode | null
        lastDashboardModeSource: (
            state: DashboardEventSource | null,
            action: any,
            fullState: any
        ) => DashboardEventSource | null
        autoRefresh: (
            state: {
                interval: number
                enabled: boolean
            },
            action: any,
            fullState: any
        ) => {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        allItems: DashboardType | null
        allItemsLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        refreshStatus: Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
    }
    selectors: {
        allItems: (state: any, props?: any) => DashboardType | null
        allItemsLoading: (state: any, props?: any) => boolean
        receivedErrorsFromAPI: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => FilterType
        refreshStatus: (
            state: any,
            props?: any
        ) => Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: (state: any, props?: any) => number | null
        containerWidth: (state: any, props?: any) => number | null
        dashboardMode: (state: any, props?: any) => DashboardMode | null
        lastDashboardModeSource: (state: any, props?: any) => DashboardEventSource | null
        autoRefresh: (
            state: any,
            props?: any
        ) => {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        placement: (state: any, props?: any) => any
        items: (state: any, props?: any) => InsightModel[] | undefined
        itemsLoading: (state: any, props?: any) => boolean
        isRefreshing: (state: any, props?: any) => (id: string) => boolean
        highlightedInsightId: (state: any, props?: any) => any
        lastRefreshed: (state: any, props?: any) => Dayjs | null
        dashboard: (state: any, props?: any) => DashboardType | null
        canEditDashboard: (state: any, props?: any) => boolean
        canRestrictDashboard: (state: any, props?: any) => boolean
        sizeKey: (state: any, props?: any) => DashboardLayoutSize | undefined
        layouts: (state: any, props?: any) => Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: (state: any, props?: any) => Layout[] | undefined
        layoutForItem: (state: any, props?: any) => Record<string, Layout>
        refreshMetrics: (state: any, props?: any) => { completed: number; total: number }
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        allItems: DashboardType | null
        allItemsLoading: boolean
        receivedErrorsFromAPI: boolean
        filters: FilterType
        refreshStatus: Record<
            string,
            {
                loading?: boolean
                refreshed?: boolean
                error?: boolean
            }
        >
        columns: number | null
        containerWidth: number | null
        dashboardMode: DashboardMode | null
        lastDashboardModeSource: DashboardEventSource | null
        autoRefresh: {
            interval: number
            enabled: boolean
        }
        shouldReportOnAPILoad: boolean
        currentTeamId: number | null
        placement: any
        items: InsightModel[] | undefined
        itemsLoading: boolean
        isRefreshing: (id: string) => boolean
        highlightedInsightId: any
        lastRefreshed: Dayjs | null
        dashboard: DashboardType | null
        canEditDashboard: boolean
        canRestrictDashboard: boolean
        sizeKey: DashboardLayoutSize | undefined
        layouts: Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: Layout[] | undefined
        layoutForItem: Record<string, Layout>
        refreshMetrics: { completed: number; total: number }
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        placement: (arg: any) => any
        items: (allItems: DashboardType | null) => InsightModel[] | undefined
        itemsLoading: (
            allItemsLoading: boolean,
            refreshStatus: Record<
                string,
                {
                    loading?: boolean | undefined
                    refreshed?: boolean | undefined
                    error?: boolean | undefined
                }
            >
        ) => boolean
        isRefreshing: (
            refreshStatus: Record<
                string,
                {
                    loading?: boolean | undefined
                    refreshed?: boolean | undefined
                    error?: boolean | undefined
                }
            >
        ) => (id: string) => boolean
        highlightedInsightId: (searchParams: Record<string, any>) => any
        lastRefreshed: (items: InsightModel[] | undefined) => Dayjs | null
        dashboard: (
            sharedDashboard: DashboardType | null,
            nameSortedDashboards: DashboardType[],
            arg: any,
            arg2: any
        ) => DashboardType | null
        canEditDashboard: (dashboard: DashboardType | null) => boolean
        canRestrictDashboard: (
            dashboard: DashboardType | null,
            user: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').UserType | null,
            currentTeam: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').TeamType | null
        ) => boolean
        sizeKey: (columns: number | null) => DashboardLayoutSize | undefined
        layouts: (items: InsightModel[] | undefined) => Partial<Record<DashboardLayoutSize, Layout[]>>
        layout: (
            layouts: Partial<Record<DashboardLayoutSize, Layout[]>>,
            sizeKey: DashboardLayoutSize | undefined
        ) => Layout[] | undefined
        layoutForItem: (layout: Layout[] | undefined) => Record<string, Layout>
        refreshMetrics: (
            refreshStatus: Record<
                string,
                {
                    loading?: boolean | undefined
                    refreshed?: boolean | undefined
                    error?: boolean | undefined
                }
            >
        ) => { completed: number; total: number }
        breadcrumbs: (allItems: DashboardType | null) => Breadcrumb[]
    }
    __keaTypeGenInternalReducerActions: {
        'update dashboard item (models.dashboardsModel)': (
            item: InsightModel,
            dashboardIds?: Array<DashboardType['id']>
        ) => {
            type: 'update dashboard item (models.dashboardsModel)'
            payload: {
                item: InsightModel
                dashboardIds: number[] | undefined
            }
        }
        'update dashboard success (models.dashboardsModel)': (
            dashboard: DashboardType | undefined,
            payload?: any
        ) => {
            type: 'update dashboard success (models.dashboardsModel)'
            payload: {
                dashboard: DashboardType | undefined
                payload?: any
            }
        }
        'update dashboard refresh status (models.dashboardsModel)': (
            shortId: string | undefined | null,
            refreshing: boolean | null,
            last_refresh: string | null
        ) => {
            type: 'update dashboard refresh status (models.dashboardsModel)'
            payload: {
                shortId: string | null | undefined
                refreshing: boolean | null
                last_refresh: string | null
            }
        }
        'duplicate insight success (models.insightsModel)': (item: InsightModel) => {
            type: 'duplicate insight success (models.insightsModel)'
            payload: {
                item: InsightModel
            }
        }
    }
}
