// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionEditLogicProps, ActionEditType, SetActionProps } from './actionEditLogic'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../../../node_modules/kea-forms'
import type { ActionStepType, UserBasicType } from '../../types'

export interface actionEditLogicType extends Logic {
    actionCreators: {
        setAction: (
            action: Partial<ActionEditType>,
            options?: SetActionProps
        ) => {
            type: 'set action (scenes.actions.actionEditLogic)'
            payload: {
                action: Partial<ActionEditType>
                options: SetActionProps
            }
        }
        setCreateNew: (createNew: boolean) => {
            type: 'set create new (scenes.actions.actionEditLogic)'
            payload: {
                createNew: boolean
            }
        }
        actionAlreadyExists: (actionId: number | null) => {
            type: 'action already exists (scenes.actions.actionEditLogic)'
            payload: {
                actionId: number | null
            }
        }
        setActionValue: (
            key: FieldName,
            value: any
        ) => {
            type: 'set action value (scenes.actions.actionEditLogic)'
            payload: {
                name: FieldName
                value: any
            }
        }
        setActionValues: (values: DeepPartial<ActionEditType>) => {
            type: 'set action values (scenes.actions.actionEditLogic)'
            payload: {
                values: DeepPartial<ActionEditType>
            }
        }
        setActionManualErrors: (errors: Record<string, any>) => {
            type: 'set action manual errors (scenes.actions.actionEditLogic)'
            payload: {
                errors: Record<string, any>
            }
        }
        touchActionField: (key: string) => {
            type: 'touch action field (scenes.actions.actionEditLogic)'
            payload: {
                key: string
            }
        }
        resetAction: (values?: ActionEditType) => {
            type: 'reset action (scenes.actions.actionEditLogic)'
            payload: {
                values?: ActionEditType
            }
        }
        submitAction: () => {
            type: 'submit action (scenes.actions.actionEditLogic)'
            payload: {
                value: boolean
            }
        }
        submitActionRequest: (action: ActionEditType) => {
            type: 'submit action request (scenes.actions.actionEditLogic)'
            payload: {
                action: ActionEditType
            }
        }
        submitActionSuccess: (action: ActionEditType) => {
            type: 'submit action success (scenes.actions.actionEditLogic)'
            payload: {
                action: ActionEditType
            }
        }
        submitActionFailure: (
            error: Error,
            errors: Record<string, any>
        ) => {
            type: 'submit action failure (scenes.actions.actionEditLogic)'
            payload: {
                error: Error
                errors: Record<string, any>
            }
        }
        loadActionCount: () => {
            type: 'load action count (scenes.actions.actionEditLogic)'
            payload: any
        }
        loadActionCountSuccess: (
            actionCount: number,
            payload?: any
        ) => {
            type: 'load action count success (scenes.actions.actionEditLogic)'
            payload: {
                actionCount: number
                payload?: any
            }
        }
        loadActionCountFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load action count failure (scenes.actions.actionEditLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setActionSuccess: (
            action: ActionEditType,
            payload?: {
                action: Partial<ActionEditType>
                options: SetActionProps
            }
        ) => {
            type: 'set action success (scenes.actions.actionEditLogic)'
            payload: {
                action: ActionEditType
                payload?: {
                    action: Partial<ActionEditType>
                    options: SetActionProps
                }
            }
        }
        setActionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set action failure (scenes.actions.actionEditLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        saveAction: (updatedAction: ActionEditType) => {
            type: 'save action (scenes.actions.actionEditLogic)'
            payload: ActionEditType
        }
        saveActionSuccess: (
            action:
                | {
                      count?: number | undefined
                      created_at: string
                      deleted?: boolean | undefined
                      id: number
                      is_calculating?: boolean | undefined
                      last_calculated_at?: string | undefined
                      name: string | null
                      description?: string | undefined
                      post_to_slack?: boolean | undefined
                      slack_message_format?: string | undefined
                      steps?: ActionStepType[] | undefined
                      created_by: UserBasicType | null
                      tags?: string[] | undefined
                  }
                | {
                      count?: number | undefined
                      created_at?: string | undefined
                      deleted?: boolean | undefined
                      id?: number | undefined
                      is_calculating?: boolean | undefined
                      last_calculated_at?: string | undefined
                      name: string | null
                      description?: string | undefined
                      post_to_slack?: boolean | undefined
                      slack_message_format?: string | undefined
                      steps?: ActionStepType[] | undefined
                      created_by?: UserBasicType | null | undefined
                      tags?: string[] | undefined
                  },
            payload?: ActionEditType
        ) => {
            type: 'save action success (scenes.actions.actionEditLogic)'
            payload: {
                action:
                    | {
                          count?: number | undefined
                          created_at: string
                          deleted?: boolean | undefined
                          id: number
                          is_calculating?: boolean | undefined
                          last_calculated_at?: string | undefined
                          name: string | null
                          description?: string | undefined
                          post_to_slack?: boolean | undefined
                          slack_message_format?: string | undefined
                          steps?: ActionStepType[] | undefined
                          created_by: UserBasicType | null
                          tags?: string[] | undefined
                      }
                    | {
                          count?: number | undefined
                          created_at?: string | undefined
                          deleted?: boolean | undefined
                          id?: number | undefined
                          is_calculating?: boolean | undefined
                          last_calculated_at?: string | undefined
                          name: string | null
                          description?: string | undefined
                          post_to_slack?: boolean | undefined
                          slack_message_format?: string | undefined
                          steps?: ActionStepType[] | undefined
                          created_by?: UserBasicType | null | undefined
                          tags?: string[] | undefined
                      }
                payload?: ActionEditType
            }
        }
        saveActionFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'save action failure (scenes.actions.actionEditLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set action (scenes.actions.actionEditLogic)': 'setAction'
        'set create new (scenes.actions.actionEditLogic)': 'setCreateNew'
        'action already exists (scenes.actions.actionEditLogic)': 'actionAlreadyExists'
        'set action value (scenes.actions.actionEditLogic)': 'setActionValue'
        'set action values (scenes.actions.actionEditLogic)': 'setActionValues'
        'set action manual errors (scenes.actions.actionEditLogic)': 'setActionManualErrors'
        'touch action field (scenes.actions.actionEditLogic)': 'touchActionField'
        'reset action (scenes.actions.actionEditLogic)': 'resetAction'
        'submit action (scenes.actions.actionEditLogic)': 'submitAction'
        'submit action request (scenes.actions.actionEditLogic)': 'submitActionRequest'
        'submit action success (scenes.actions.actionEditLogic)': 'submitActionSuccess'
        'submit action failure (scenes.actions.actionEditLogic)': 'submitActionFailure'
        'load action count (scenes.actions.actionEditLogic)': 'loadActionCount'
        'load action count success (scenes.actions.actionEditLogic)': 'loadActionCountSuccess'
        'load action count failure (scenes.actions.actionEditLogic)': 'loadActionCountFailure'
        'set action success (scenes.actions.actionEditLogic)': 'setActionSuccess'
        'set action failure (scenes.actions.actionEditLogic)': 'setActionFailure'
        'save action (scenes.actions.actionEditLogic)': 'saveAction'
        'save action success (scenes.actions.actionEditLogic)': 'saveActionSuccess'
        'save action failure (scenes.actions.actionEditLogic)': 'saveActionFailure'
    }
    actionTypes: {
        setAction: 'set action (scenes.actions.actionEditLogic)'
        setCreateNew: 'set create new (scenes.actions.actionEditLogic)'
        actionAlreadyExists: 'action already exists (scenes.actions.actionEditLogic)'
        setActionValue: 'set action value (scenes.actions.actionEditLogic)'
        setActionValues: 'set action values (scenes.actions.actionEditLogic)'
        setActionManualErrors: 'set action manual errors (scenes.actions.actionEditLogic)'
        touchActionField: 'touch action field (scenes.actions.actionEditLogic)'
        resetAction: 'reset action (scenes.actions.actionEditLogic)'
        submitAction: 'submit action (scenes.actions.actionEditLogic)'
        submitActionRequest: 'submit action request (scenes.actions.actionEditLogic)'
        submitActionSuccess: 'submit action success (scenes.actions.actionEditLogic)'
        submitActionFailure: 'submit action failure (scenes.actions.actionEditLogic)'
        loadActionCount: 'load action count (scenes.actions.actionEditLogic)'
        loadActionCountSuccess: 'load action count success (scenes.actions.actionEditLogic)'
        loadActionCountFailure: 'load action count failure (scenes.actions.actionEditLogic)'
        setActionSuccess: 'set action success (scenes.actions.actionEditLogic)'
        setActionFailure: 'set action failure (scenes.actions.actionEditLogic)'
        saveAction: 'save action (scenes.actions.actionEditLogic)'
        saveActionSuccess: 'save action success (scenes.actions.actionEditLogic)'
        saveActionFailure: 'save action failure (scenes.actions.actionEditLogic)'
    }
    actions: {
        setAction: (action: Partial<ActionEditType>, options?: SetActionProps) => void
        setCreateNew: (createNew: boolean) => void
        actionAlreadyExists: (actionId: number | null) => void
        setActionValue: (key: FieldName, value: any) => void
        setActionValues: (values: DeepPartial<ActionEditType>) => void
        setActionManualErrors: (errors: Record<string, any>) => void
        touchActionField: (key: string) => void
        resetAction: (values?: ActionEditType) => void
        submitAction: () => void
        submitActionRequest: (action: ActionEditType) => void
        submitActionSuccess: (action: ActionEditType) => void
        submitActionFailure: (error: Error, errors: Record<string, any>) => void
        loadActionCount: () => void
        loadActionCountSuccess: (actionCount: number, payload?: any) => void
        loadActionCountFailure: (error: string, errorObject?: any) => void
        setActionSuccess: (
            action: ActionEditType,
            payload?: {
                action: Partial<ActionEditType>
                options: SetActionProps
            }
        ) => void
        setActionFailure: (error: string, errorObject?: any) => void
        saveAction: (updatedAction: ActionEditType) => void
        saveActionSuccess: (
            action:
                | {
                      count?: number | undefined
                      created_at: string
                      deleted?: boolean | undefined
                      id: number
                      is_calculating?: boolean | undefined
                      last_calculated_at?: string | undefined
                      name: string | null
                      description?: string | undefined
                      post_to_slack?: boolean | undefined
                      slack_message_format?: string | undefined
                      steps?: ActionStepType[] | undefined
                      created_by: UserBasicType | null
                      tags?: string[] | undefined
                  }
                | {
                      count?: number | undefined
                      created_at?: string | undefined
                      deleted?: boolean | undefined
                      id?: number | undefined
                      is_calculating?: boolean | undefined
                      last_calculated_at?: string | undefined
                      name: string | null
                      description?: string | undefined
                      post_to_slack?: boolean | undefined
                      slack_message_format?: string | undefined
                      steps?: ActionStepType[] | undefined
                      created_by?: UserBasicType | null | undefined
                      tags?: string[] | undefined
                  },
            payload?: ActionEditType
        ) => void
        saveActionFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        createNew: boolean
        action: ActionEditType
        isActionSubmitting: boolean
        showActionErrors: boolean
        actionChanged: boolean
        actionTouches: Record<string, boolean>
        actionManualErrors: Record<string, any>
        actionCount: any
        actionCountLoading: boolean
        actionLoading: boolean
    }
    events: {}
    key: number | 'new'
    listeners: {}
    path: ['scenes', 'actions', 'actionEditLogic']
    pathString: 'scenes.actions.actionEditLogic'
    props: ActionEditLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        createNew: boolean
        action: ActionEditType
        isActionSubmitting: boolean
        showActionErrors: boolean
        actionChanged: boolean
        actionTouches: Record<string, boolean>
        actionManualErrors: Record<string, any>
        actionCount: any
        actionCountLoading: boolean
        actionLoading: boolean
    }
    reducers: {
        createNew: (state: boolean, action: any, fullState: any) => boolean
        action: (state: ActionEditType, action: any, fullState: any) => ActionEditType
        isActionSubmitting: (state: boolean, action: any, fullState: any) => boolean
        showActionErrors: (state: boolean, action: any, fullState: any) => boolean
        actionChanged: (state: boolean, action: any, fullState: any) => boolean
        actionTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
        actionManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>
        actionCount: (state: any, action: any, fullState: any) => any
        actionCountLoading: (state: boolean, action: any, fullState: any) => boolean
        actionLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        createNew: boolean
        action: ActionEditType
        isActionSubmitting: boolean
        showActionErrors: boolean
        actionChanged: boolean
        actionTouches: Record<string, boolean>
        actionManualErrors: Record<string, any>
        actionCount: any
        actionCountLoading: boolean
        actionLoading: boolean
    }
    selectors: {
        createNew: (state: any, props?: any) => boolean
        action: (state: any, props?: any) => ActionEditType
        isActionSubmitting: (state: any, props?: any) => boolean
        showActionErrors: (state: any, props?: any) => boolean
        actionChanged: (state: any, props?: any) => boolean
        actionTouches: (state: any, props?: any) => Record<string, boolean>
        actionManualErrors: (state: any, props?: any) => Record<string, any>
        actionCount: (state: any, props?: any) => any
        actionCountLoading: (state: any, props?: any) => boolean
        actionLoading: (state: any, props?: any) => boolean
        actionTouched: (state: any, props?: any) => boolean
        actionValidationErrors: (state: any, props?: any) => DeepPartialMap<ActionEditType, ValidationErrorType>
        actionAllErrors: (state: any, props?: any) => Record<string, any>
        actionHasErrors: (state: any, props?: any) => boolean
        actionErrors: (state: any, props?: any) => DeepPartialMap<ActionEditType, ValidationErrorType>
        isActionValid: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        createNew: boolean
        action: ActionEditType
        isActionSubmitting: boolean
        showActionErrors: boolean
        actionChanged: boolean
        actionTouches: Record<string, boolean>
        actionManualErrors: Record<string, any>
        actionCount: any
        actionCountLoading: boolean
        actionLoading: boolean
        actionTouched: boolean
        actionValidationErrors: DeepPartialMap<ActionEditType, ValidationErrorType>
        actionAllErrors: Record<string, any>
        actionHasErrors: boolean
        actionErrors: DeepPartialMap<ActionEditType, ValidationErrorType>
        isActionValid: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
