// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { JobSpec } from '../../../../types'
import type { FormInstance } from '../../../../../../node_modules/antd/lib/form/hooks/useForm.d'

export interface interfaceJobsLogicType extends Logic {
    actionCreators: {
        showPluginLogs: (id: number) => {
            type: 'show plugin logs (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                id: number
            }
        }
        setIsJobModalOpen: (isOpen: boolean) => {
            type: 'set is job modal open (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                isOpen: boolean
            }
        }
        setRunJobAvailable: (isAvailable: boolean) => {
            type: 'set run job available (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                isAvailable: boolean
            }
        }
        runJob: (form: FormInstance<any>) => {
            type: 'run job (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                form: FormInstance<any>
            }
        }
        playButtonOnClick: (
            form: FormInstance<any>,
            jobHasEmptyPayload: boolean
        ) => {
            type: 'play button on click (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                form: FormInstance<any>
                jobHasEmptyPayload: boolean
            }
        }
        setRunJobAvailableTimeout: (timeout: number) => {
            type: 'set run job available timeout (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
            payload: {
                timeout: number
            }
        }
    }
    actionKeys: {
        'show plugin logs (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'showPluginLogs'
        'set is job modal open (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'setIsJobModalOpen'
        'set run job available (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'setRunJobAvailable'
        'run job (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'runJob'
        'play button on click (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'playButtonOnClick'
        'set run job available timeout (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)': 'setRunJobAvailableTimeout'
    }
    actionTypes: {
        showPluginLogs: 'show plugin logs (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
        setIsJobModalOpen: 'set is job modal open (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
        setRunJobAvailable: 'set run job available (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
        runJob: 'run job (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
        playButtonOnClick: 'play button on click (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
        setRunJobAvailableTimeout: 'set run job available timeout (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
    }
    actions: {
        showPluginLogs: (id: number) => void
        setIsJobModalOpen: (isOpen: boolean) => void
        setRunJobAvailable: (isAvailable: boolean) => void
        runJob: (form: FormInstance<any>) => void
        playButtonOnClick: (form: FormInstance<any>, jobHasEmptyPayload: boolean) => void
        setRunJobAvailableTimeout: (timeout: number) => void
    }
    defaults: {
        isJobModalOpen: boolean
        runJobAvailable: boolean
        runJobAvailableTimeout: number | null
    }
    events: {
        beforeUnmount: () => void
    }
    key: string
    listeners: {
        runJob: ((
            action: {
                type: 'run job (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
                payload: {
                    form: FormInstance<any>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        playButtonOnClick: ((
            action: {
                type: 'play button on click (scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*)'
                payload: {
                    form: FormInstance<any>
                    jobHasEmptyPayload: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'plugins', 'edit', 'interface-jobs', 'interfaceJobsLogic', '*']
    pathString: 'scenes.plugins.edit.interface-jobs.interfaceJobsLogic.*'
    props: {
        jobName: string
        pluginConfigId: number
        pluginId: number
        jobSpecPayload: JobSpec['payload']
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isJobModalOpen: boolean
        runJobAvailable: boolean
        runJobAvailableTimeout: number | null
    }
    reducers: {
        isJobModalOpen: (state: boolean, action: any, fullState: any) => boolean
        runJobAvailable: (state: boolean, action: any, fullState: any) => boolean
        runJobAvailableTimeout: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        isJobModalOpen: boolean
        runJobAvailable: boolean
        runJobAvailableTimeout: number | null
    }
    selectors: {
        isJobModalOpen: (state: any, props?: any) => boolean
        runJobAvailable: (state: any, props?: any) => boolean
        runJobAvailableTimeout: (state: any, props?: any) => number | null
    }
    sharedListeners: {}
    values: {
        isJobModalOpen: boolean
        runJobAvailable: boolean
        runJobAvailableTimeout: number | null
    }
    _isKea: true
    _isKeaWithKey: true
}
