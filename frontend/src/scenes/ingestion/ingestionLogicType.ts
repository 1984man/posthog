// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { TeamType } from '../../types'
import type { Framework, PlatformType } from './types'
import type { PluginTypeWithConfig } from '../plugins/types'
import type { ThirdPartySource } from './constants'

export interface ingestionLogicType extends Logic {
    actionCreators: {
        updateCurrentTeamSuccess: (
            currentTeam: TeamType,
            payload?: Partial<TeamType>
        ) => {
            type: 'update current team success (scenes.ingestion.ingestionLogic)'
            payload: {
                currentTeam: TeamType
                payload?: Partial<TeamType>
            }
        }
        setPlatform: (platform: PlatformType) => {
            type: 'set platform (scenes.ingestion.ingestionLogic)'
            payload: {
                platform: PlatformType
            }
        }
        setFramework: (framework: Framework) => {
            type: 'set framework (scenes.ingestion.ingestionLogic)'
            payload: {
                framework: Framework
            }
        }
        setVerify: (verify: boolean) => {
            type: 'set verify (scenes.ingestion.ingestionLogic)'
            payload: {
                verify: boolean
            }
        }
        setState: (
            platform: PlatformType,
            framework: string | null,
            verify: boolean
        ) => {
            type: 'set state (scenes.ingestion.ingestionLogic)'
            payload: {
                platform: PlatformType
                framework: string | null
                verify: boolean
            }
        }
        setActiveTab: (tab: string) => {
            type: 'set active tab (scenes.ingestion.ingestionLogic)'
            payload: {
                tab: string
            }
        }
        setInstructionsModal: (isOpen: boolean) => {
            type: 'set instructions modal (scenes.ingestion.ingestionLogic)'
            payload: {
                isOpen: boolean
            }
        }
        setThirdPartySource: (sourceIndex: number) => {
            type: 'set third party source (scenes.ingestion.ingestionLogic)'
            payload: {
                sourceIndex: number
            }
        }
        openThirdPartyPluginModal: (plugin: PluginTypeWithConfig) => {
            type: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
            payload: {
                plugin: PluginTypeWithConfig
            }
        }
        setIndex: (index: number) => {
            type: 'set index (scenes.ingestion.ingestionLogic)'
            payload: {
                index: number
            }
        }
        completeOnboarding: () => {
            type: 'complete onboarding (scenes.ingestion.ingestionLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'update current team success (scenes.ingestion.ingestionLogic)': 'updateCurrentTeamSuccess'
        'set platform (scenes.ingestion.ingestionLogic)': 'setPlatform'
        'set framework (scenes.ingestion.ingestionLogic)': 'setFramework'
        'set verify (scenes.ingestion.ingestionLogic)': 'setVerify'
        'set state (scenes.ingestion.ingestionLogic)': 'setState'
        'set active tab (scenes.ingestion.ingestionLogic)': 'setActiveTab'
        'set instructions modal (scenes.ingestion.ingestionLogic)': 'setInstructionsModal'
        'set third party source (scenes.ingestion.ingestionLogic)': 'setThirdPartySource'
        'open third party plugin modal (scenes.ingestion.ingestionLogic)': 'openThirdPartyPluginModal'
        'set index (scenes.ingestion.ingestionLogic)': 'setIndex'
        'complete onboarding (scenes.ingestion.ingestionLogic)': 'completeOnboarding'
    }
    actionTypes: {
        updateCurrentTeamSuccess: 'update current team success (scenes.ingestion.ingestionLogic)'
        setPlatform: 'set platform (scenes.ingestion.ingestionLogic)'
        setFramework: 'set framework (scenes.ingestion.ingestionLogic)'
        setVerify: 'set verify (scenes.ingestion.ingestionLogic)'
        setState: 'set state (scenes.ingestion.ingestionLogic)'
        setActiveTab: 'set active tab (scenes.ingestion.ingestionLogic)'
        setInstructionsModal: 'set instructions modal (scenes.ingestion.ingestionLogic)'
        setThirdPartySource: 'set third party source (scenes.ingestion.ingestionLogic)'
        openThirdPartyPluginModal: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
        setIndex: 'set index (scenes.ingestion.ingestionLogic)'
        completeOnboarding: 'complete onboarding (scenes.ingestion.ingestionLogic)'
    }
    actions: {
        updateCurrentTeamSuccess: (currentTeam: TeamType, payload?: Partial<TeamType>) => void
        setPlatform: (platform: PlatformType) => void
        setFramework: (framework: Framework) => void
        setVerify: (verify: boolean) => void
        setState: (platform: PlatformType, framework: string | null, verify: boolean) => void
        setActiveTab: (tab: string) => void
        setInstructionsModal: (isOpen: boolean) => void
        setThirdPartySource: (sourceIndex: number) => void
        openThirdPartyPluginModal: (plugin: PluginTypeWithConfig) => void
        setIndex: (index: number) => void
        completeOnboarding: () => void
    }
    defaults: {
        isSmallScreen: boolean
        platform: null | PlatformType
        framework: null | Framework
        verify: boolean
        activeTab: string
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        currentIndex: number
    }
    events: {}
    key: undefined
    listeners: {
        completeOnboarding: ((
            action: {
                type: 'complete onboarding (scenes.ingestion.ingestionLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        openThirdPartyPluginModal: ((
            action: {
                type: 'open third party plugin modal (scenes.ingestion.ingestionLogic)'
                payload: {
                    plugin: PluginTypeWithConfig
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPlatform: ((
            action: {
                type: 'set platform (scenes.ingestion.ingestionLogic)'
                payload: {
                    platform: PlatformType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFramework: ((
            action: {
                type: 'set framework (scenes.ingestion.ingestionLogic)'
                payload: {
                    framework: Framework
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'ingestion', 'ingestionLogic']
    pathString: 'scenes.ingestion.ingestionLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        isSmallScreen: boolean
        platform: null | PlatformType
        framework: null | Framework
        verify: boolean
        activeTab: string
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        currentIndex: number
    }
    reducers: {
        isSmallScreen: (state: boolean, action: any, fullState: any) => boolean
        platform: (state: null | PlatformType, action: any, fullState: any) => null | PlatformType
        framework: (state: null | Framework, action: any, fullState: any) => null | Framework
        verify: (state: boolean, action: any, fullState: any) => boolean
        activeTab: (state: string, action: any, fullState: any) => string
        instructionsModalOpen: (state: boolean, action: any, fullState: any) => boolean
        thirdPartyIntegrationSource: (
            state: ThirdPartySource | null,
            action: any,
            fullState: any
        ) => ThirdPartySource | null
        thirdPartyPluginSource: (
            state: PluginTypeWithConfig | null,
            action: any,
            fullState: any
        ) => PluginTypeWithConfig | null
        currentIndex: (state: number, action: any, fullState: any) => number
    }
    selector: (state: any) => {
        isSmallScreen: boolean
        platform: null | PlatformType
        framework: null | Framework
        verify: boolean
        activeTab: string
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        currentIndex: number
    }
    selectors: {
        isSmallScreen: (state: any, props?: any) => boolean
        platform: (state: any, props?: any) => null | PlatformType
        framework: (state: any, props?: any) => null | Framework
        verify: (state: any, props?: any) => boolean
        activeTab: (state: any, props?: any) => string
        instructionsModalOpen: (state: any, props?: any) => boolean
        thirdPartyIntegrationSource: (state: any, props?: any) => ThirdPartySource | null
        thirdPartyPluginSource: (state: any, props?: any) => PluginTypeWithConfig | null
        currentIndex: (state: any, props?: any) => number
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        index: (state: any, props?: any) => number
        onboardingSidebarEnabled: (state: any, props?: any) => boolean
        frameworkString: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        isSmallScreen: boolean
        platform: null | PlatformType
        framework: null | Framework
        verify: boolean
        activeTab: string
        instructionsModalOpen: boolean
        thirdPartyIntegrationSource: ThirdPartySource | null
        thirdPartyPluginSource: PluginTypeWithConfig | null
        currentIndex: number
        featureFlags: FeatureFlagsSet
        index: number
        onboardingSidebarEnabled: boolean
        frameworkString: string
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        index: (platform: PlatformType, framework: Framework, verify: boolean) => number
        frameworkString: (framework: Framework) => string
    }
}
