// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { TeamType } from '../types'

export interface teamLogicType extends Logic {
    actionCreators: {
        reportTeamHasIngestedEvents: () => {
            type: 'report team has ingested events (scenes.teamLogic)'
            payload: {
                value: true
            }
        }
        loadUser: (resetOnFailure?: boolean) => {
            type: 'load user (scenes.teamLogic)'
            payload: {
                resetOnFailure: boolean | undefined
            }
        }
        deleteTeam: (team: TeamType) => {
            type: 'delete team (scenes.teamLogic)'
            payload: {
                team: TeamType
            }
        }
        deleteTeamSuccess: () => {
            type: 'delete team success (scenes.teamLogic)'
            payload: {
                value: true
            }
        }
        deleteTeamFailure: () => {
            type: 'delete team failure (scenes.teamLogic)'
            payload: {
                value: true
            }
        }
        loadCurrentTeam: () => {
            type: 'load current team (scenes.teamLogic)'
            payload: any
        }
        loadCurrentTeamSuccess: (
            currentTeam: TeamType | null,
            payload?: any
        ) => {
            type: 'load current team success (scenes.teamLogic)'
            payload: {
                currentTeam: TeamType | null
                payload?: any
            }
        }
        loadCurrentTeamFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load current team failure (scenes.teamLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateCurrentTeam: (payload: Partial<TeamType>) => {
            type: 'update current team (scenes.teamLogic)'
            payload: Partial<TeamType>
        }
        updateCurrentTeamSuccess: (
            currentTeam: TeamType,
            payload?: Partial<TeamType>
        ) => {
            type: 'update current team success (scenes.teamLogic)'
            payload: {
                currentTeam: TeamType
                payload?: Partial<TeamType>
            }
        }
        updateCurrentTeamFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update current team failure (scenes.teamLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createTeam: (name: string) => {
            type: 'create team (scenes.teamLogic)'
            payload: string
        }
        createTeamSuccess: (
            currentTeam: TeamType,
            payload?: string
        ) => {
            type: 'create team success (scenes.teamLogic)'
            payload: {
                currentTeam: TeamType
                payload?: string
            }
        }
        createTeamFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create team failure (scenes.teamLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        resetToken: () => {
            type: 'reset token (scenes.teamLogic)'
            payload: any
        }
        resetTokenSuccess: (
            currentTeam: TeamType | null,
            payload?: any
        ) => {
            type: 'reset token success (scenes.teamLogic)'
            payload: {
                currentTeam: TeamType | null
                payload?: any
            }
        }
        resetTokenFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'reset token failure (scenes.teamLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'report team has ingested events (scenes.teamLogic)': 'reportTeamHasIngestedEvents'
        'load user (scenes.teamLogic)': 'loadUser'
        'delete team (scenes.teamLogic)': 'deleteTeam'
        'delete team success (scenes.teamLogic)': 'deleteTeamSuccess'
        'delete team failure (scenes.teamLogic)': 'deleteTeamFailure'
        'load current team (scenes.teamLogic)': 'loadCurrentTeam'
        'load current team success (scenes.teamLogic)': 'loadCurrentTeamSuccess'
        'load current team failure (scenes.teamLogic)': 'loadCurrentTeamFailure'
        'update current team (scenes.teamLogic)': 'updateCurrentTeam'
        'update current team success (scenes.teamLogic)': 'updateCurrentTeamSuccess'
        'update current team failure (scenes.teamLogic)': 'updateCurrentTeamFailure'
        'create team (scenes.teamLogic)': 'createTeam'
        'create team success (scenes.teamLogic)': 'createTeamSuccess'
        'create team failure (scenes.teamLogic)': 'createTeamFailure'
        'reset token (scenes.teamLogic)': 'resetToken'
        'reset token success (scenes.teamLogic)': 'resetTokenSuccess'
        'reset token failure (scenes.teamLogic)': 'resetTokenFailure'
    }
    actionTypes: {
        reportTeamHasIngestedEvents: 'report team has ingested events (scenes.teamLogic)'
        loadUser: 'load user (scenes.teamLogic)'
        deleteTeam: 'delete team (scenes.teamLogic)'
        deleteTeamSuccess: 'delete team success (scenes.teamLogic)'
        deleteTeamFailure: 'delete team failure (scenes.teamLogic)'
        loadCurrentTeam: 'load current team (scenes.teamLogic)'
        loadCurrentTeamSuccess: 'load current team success (scenes.teamLogic)'
        loadCurrentTeamFailure: 'load current team failure (scenes.teamLogic)'
        updateCurrentTeam: 'update current team (scenes.teamLogic)'
        updateCurrentTeamSuccess: 'update current team success (scenes.teamLogic)'
        updateCurrentTeamFailure: 'update current team failure (scenes.teamLogic)'
        createTeam: 'create team (scenes.teamLogic)'
        createTeamSuccess: 'create team success (scenes.teamLogic)'
        createTeamFailure: 'create team failure (scenes.teamLogic)'
        resetToken: 'reset token (scenes.teamLogic)'
        resetTokenSuccess: 'reset token success (scenes.teamLogic)'
        resetTokenFailure: 'reset token failure (scenes.teamLogic)'
    }
    actions: {
        reportTeamHasIngestedEvents: () => void
        loadUser: (resetOnFailure?: boolean) => void
        deleteTeam: (team: TeamType) => void
        deleteTeamSuccess: () => void
        deleteTeamFailure: () => void
        loadCurrentTeam: () => void
        loadCurrentTeamSuccess: (currentTeam: TeamType | null, payload?: any) => void
        loadCurrentTeamFailure: (error: string, errorObject?: any) => void
        updateCurrentTeam: (payload: Partial<TeamType>) => void
        updateCurrentTeamSuccess: (currentTeam: TeamType, payload?: Partial<TeamType>) => void
        updateCurrentTeamFailure: (error: string, errorObject?: any) => void
        createTeam: (name: string) => void
        createTeamSuccess: (currentTeam: TeamType, payload?: string) => void
        createTeamFailure: (error: string, errorObject?: any) => void
        resetToken: () => void
        resetTokenSuccess: (currentTeam: TeamType | null, payload?: any) => void
        resetTokenFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        teamBeingDeleted: TeamType | null
        currentTeam: TeamType | null
        currentTeamLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        deleteTeam: ((
            action: {
                type: 'delete team (scenes.teamLogic)'
                payload: {
                    team: TeamType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteTeamSuccess: ((
            action: {
                type: 'delete team success (scenes.teamLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        createTeamSuccess: ((
            action: {
                type: 'create team success (scenes.teamLogic)'
                payload: {
                    currentTeam: TeamType
                    payload?: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadCurrentTeamSuccess: ((
            action: {
                type: 'load current team success (scenes.teamLogic)'
                payload: {
                    currentTeam: TeamType | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'teamLogic']
    pathString: 'scenes.teamLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        teamBeingDeleted: TeamType | null
        currentTeam: TeamType | null
        currentTeamLoading: boolean
    }
    reducers: {
        teamBeingDeleted: (state: TeamType | null, action: any, fullState: any) => TeamType | null
        currentTeam: (state: TeamType | null, action: any, fullState: any) => TeamType | null
        currentTeamLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        teamBeingDeleted: TeamType | null
        currentTeam: TeamType | null
        currentTeamLoading: boolean
    }
    selectors: {
        teamBeingDeleted: (state: any, props?: any) => TeamType | null
        currentTeam: (state: any, props?: any) => TeamType | null
        currentTeamLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        isCurrentTeamUnavailable: (state: any, props?: any) => boolean
        demoOnlyProject: (state: any, props?: any) => boolean
        pathCleaningFiltersWithNew: (state: any, props?: any) => Record<string, any>[]
        funnelCorrelationConfig: (state: any, props?: any) => Partial<TeamType['correlation_config']>
    }
    sharedListeners: {}
    values: {
        teamBeingDeleted: TeamType | null
        currentTeam: TeamType | null
        currentTeamLoading: boolean
        currentTeamId: number | null
        isCurrentTeamUnavailable: boolean
        demoOnlyProject: boolean
        pathCleaningFiltersWithNew: Record<string, any>[]
        funnelCorrelationConfig: Partial<TeamType['correlation_config']>
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        currentTeamId: (currentTeam: TeamType | null) => number | null
        isCurrentTeamUnavailable: (currentTeam: TeamType | null, currentTeamLoading: boolean) => boolean
        demoOnlyProject: (
            currentTeam: TeamType | null,
            currentOrganization:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').OrganizationType
                | null
        ) => boolean
        pathCleaningFiltersWithNew: (currentTeam: TeamType | null) => Record<string, any>[]
        funnelCorrelationConfig: (currentTeam: TeamType | null) => Partial<TeamType['correlation_config']>
    }
}
