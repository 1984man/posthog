// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Breadcrumb, EventType, MatchedRecording } from '../../types'
import type { EventPerformanceData, WebPerformancePage } from './webPerformanceLogic'

export interface webPerformanceLogicType extends Logic {
    actionCreators: {
        setEventToDisplay: (eventToDisplay: EventType) => {
            type: 'set event to display (scenes.performance)'
            payload: {
                eventToDisplay: EventType
            }
        }
        clearEventToDisplay: () => {
            type: 'clear event to display (scenes.performance)'
            payload: {
                value: true
            }
        }
        setCurrentPage: (page: WebPerformancePage) => {
            type: 'set current page (scenes.performance)'
            payload: {
                page: WebPerformancePage
            }
        }
        openRecordingModal: (sessionRecordingId: string) => {
            type: 'open recording modal (scenes.performance)'
            payload: {
                sessionRecordingId: string
            }
        }
        closeRecordingModal: () => {
            type: 'close recording modal (scenes.performance)'
            payload: boolean
        }
        loadEvent: (id: string | number) => {
            type: 'load event (scenes.performance)'
            payload: string | number
        }
        loadEventSuccess: (
            event: EventType,
            payload?: string | number
        ) => {
            type: 'load event success (scenes.performance)'
            payload: {
                event: EventType
                payload?: string | number
            }
        }
        loadEventFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load event failure (scenes.performance)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set event to display (scenes.performance)': 'setEventToDisplay'
        'clear event to display (scenes.performance)': 'clearEventToDisplay'
        'set current page (scenes.performance)': 'setCurrentPage'
        'open recording modal (scenes.performance)': 'openRecordingModal'
        'close recording modal (scenes.performance)': 'closeRecordingModal'
        'load event (scenes.performance)': 'loadEvent'
        'load event success (scenes.performance)': 'loadEventSuccess'
        'load event failure (scenes.performance)': 'loadEventFailure'
    }
    actionTypes: {
        setEventToDisplay: 'set event to display (scenes.performance)'
        clearEventToDisplay: 'clear event to display (scenes.performance)'
        setCurrentPage: 'set current page (scenes.performance)'
        openRecordingModal: 'open recording modal (scenes.performance)'
        closeRecordingModal: 'close recording modal (scenes.performance)'
        loadEvent: 'load event (scenes.performance)'
        loadEventSuccess: 'load event success (scenes.performance)'
        loadEventFailure: 'load event failure (scenes.performance)'
    }
    actions: {
        setEventToDisplay: (eventToDisplay: EventType) => void
        clearEventToDisplay: () => void
        setCurrentPage: (page: WebPerformancePage) => void
        openRecordingModal: (sessionRecordingId: string) => void
        closeRecordingModal: () => void
        loadEvent: (id: string | number) => void
        loadEventSuccess: (event: EventType, payload?: string | number) => void
        loadEventFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        openedSessionRecordingId: null | string
        eventToDisplay: EventPerformanceData | null
        currentEvent: EventType | null
        currentPage: WebPerformancePage
        event: any
        eventLoading: boolean
    }
    events: {}
    key: undefined
    listeners: {
        loadEventSuccess: ((
            action: {
                type: 'load event success (scenes.performance)'
                payload: {
                    event: EventType
                    payload?: string | number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'performance']
    pathString: 'scenes.performance'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        openedSessionRecordingId: null | string
        eventToDisplay: EventPerformanceData | null
        currentEvent: EventType | null
        currentPage: WebPerformancePage
        event: any
        eventLoading: boolean
    }
    reducers: {
        openedSessionRecordingId: (state: null | string, action: any, fullState: any) => null | string
        eventToDisplay: (state: EventPerformanceData | null, action: any, fullState: any) => EventPerformanceData | null
        currentEvent: (state: EventType | null, action: any, fullState: any) => EventType | null
        currentPage: (state: WebPerformancePage, action: any, fullState: any) => WebPerformancePage
        event: (state: any, action: any, fullState: any) => any
        eventLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        openedSessionRecordingId: null | string
        eventToDisplay: EventPerformanceData | null
        currentEvent: EventType | null
        currentPage: WebPerformancePage
        event: any
        eventLoading: boolean
    }
    selectors: {
        openedSessionRecordingId: (state: any, props?: any) => null | string
        eventToDisplay: (state: any, props?: any) => EventPerformanceData | null
        currentEvent: (state: any, props?: any) => EventType | null
        currentPage: (state: any, props?: any) => WebPerformancePage
        event: (state: any, props?: any) => any
        eventLoading: (state: any, props?: any) => boolean
        sessionRecording: (state: any, props?: any) => MatchedRecording[]
        breadcrumbs: (state: any, props?: any) => Breadcrumb[]
    }
    sharedListeners: {}
    values: {
        openedSessionRecordingId: null | string
        eventToDisplay: EventPerformanceData | null
        currentEvent: EventType | null
        currentPage: WebPerformancePage
        event: any
        eventLoading: boolean
        sessionRecording: MatchedRecording[]
        breadcrumbs: Breadcrumb[]
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sessionRecording: (currentEvent: EventType | null) => MatchedRecording[]
        breadcrumbs: (eventToDisplay: EventPerformanceData | null, currentPage: WebPerformancePage) => Breadcrumb[]
    }
}
