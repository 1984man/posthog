// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SecondaryMetricsProps } from './secondaryMetricsLogic'
import type { Experiment, FilterType, InsightShortId, InsightType, SecondaryExperimentMetric } from '../../types'

export interface secondaryMetricsLogicType extends Logic {
    actionCreators: {
        setSecondaryMetrics: (secondaryMetrics: any) => {
            type: 'set secondary metrics (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                secondaryMetrics: any
            }
        }
        createNewMetric: () => {
            type: 'create new metric (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                value: true
            }
        }
        addNewMetric: (metric: SecondaryExperimentMetric) => {
            type: 'add new metric (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                metric: SecondaryExperimentMetric
            }
        }
        updateMetricFilters: (filters: Partial<FilterType>) => {
            type: 'update metric filters (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        setFilters: (filters: Partial<FilterType>) => {
            type: 'set filters (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        setPreviewInsightId: (shortId: InsightShortId) => {
            type: 'set preview insight id (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                shortId: InsightShortId
            }
        }
        createPreviewInsight: (filters?: Partial<FilterType>) => {
            type: 'create preview insight (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                filters: Partial<FilterType> | undefined
            }
        }
        showModal: () => {
            type: 'show modal (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                value: true
            }
        }
        hideModal: () => {
            type: 'hide modal (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                value: true
            }
        }
        changeInsightType: (type?: InsightType) => {
            type: 'change insight type (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                type: InsightType | undefined
            }
        }
        setCurrentMetricName: (name: string) => {
            type: 'set current metric name (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                name: string
            }
        }
        deleteMetric: (metricId: number) => {
            type: 'delete metric (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                metricId: number
            }
        }
        loadExperiments: () => {
            type: 'load experiments (scenes.experiment.secondaryMetricsLogic)'
            payload: any
        }
        loadExperimentsSuccess: (
            experiments: Experiment[],
            payload?: any
        ) => {
            type: 'load experiments success (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                experiments: Experiment[]
                payload?: any
            }
        }
        loadExperimentsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load experiments failure (scenes.experiment.secondaryMetricsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set secondary metrics (scenes.experiment.secondaryMetricsLogic)': 'setSecondaryMetrics'
        'create new metric (scenes.experiment.secondaryMetricsLogic)': 'createNewMetric'
        'add new metric (scenes.experiment.secondaryMetricsLogic)': 'addNewMetric'
        'update metric filters (scenes.experiment.secondaryMetricsLogic)': 'updateMetricFilters'
        'set filters (scenes.experiment.secondaryMetricsLogic)': 'setFilters'
        'set preview insight id (scenes.experiment.secondaryMetricsLogic)': 'setPreviewInsightId'
        'create preview insight (scenes.experiment.secondaryMetricsLogic)': 'createPreviewInsight'
        'show modal (scenes.experiment.secondaryMetricsLogic)': 'showModal'
        'hide modal (scenes.experiment.secondaryMetricsLogic)': 'hideModal'
        'change insight type (scenes.experiment.secondaryMetricsLogic)': 'changeInsightType'
        'set current metric name (scenes.experiment.secondaryMetricsLogic)': 'setCurrentMetricName'
        'delete metric (scenes.experiment.secondaryMetricsLogic)': 'deleteMetric'
        'load experiments (scenes.experiment.secondaryMetricsLogic)': 'loadExperiments'
        'load experiments success (scenes.experiment.secondaryMetricsLogic)': 'loadExperimentsSuccess'
        'load experiments failure (scenes.experiment.secondaryMetricsLogic)': 'loadExperimentsFailure'
    }
    actionTypes: {
        setSecondaryMetrics: 'set secondary metrics (scenes.experiment.secondaryMetricsLogic)'
        createNewMetric: 'create new metric (scenes.experiment.secondaryMetricsLogic)'
        addNewMetric: 'add new metric (scenes.experiment.secondaryMetricsLogic)'
        updateMetricFilters: 'update metric filters (scenes.experiment.secondaryMetricsLogic)'
        setFilters: 'set filters (scenes.experiment.secondaryMetricsLogic)'
        setPreviewInsightId: 'set preview insight id (scenes.experiment.secondaryMetricsLogic)'
        createPreviewInsight: 'create preview insight (scenes.experiment.secondaryMetricsLogic)'
        showModal: 'show modal (scenes.experiment.secondaryMetricsLogic)'
        hideModal: 'hide modal (scenes.experiment.secondaryMetricsLogic)'
        changeInsightType: 'change insight type (scenes.experiment.secondaryMetricsLogic)'
        setCurrentMetricName: 'set current metric name (scenes.experiment.secondaryMetricsLogic)'
        deleteMetric: 'delete metric (scenes.experiment.secondaryMetricsLogic)'
        loadExperiments: 'load experiments (scenes.experiment.secondaryMetricsLogic)'
        loadExperimentsSuccess: 'load experiments success (scenes.experiment.secondaryMetricsLogic)'
        loadExperimentsFailure: 'load experiments failure (scenes.experiment.secondaryMetricsLogic)'
    }
    actions: {
        setSecondaryMetrics: (secondaryMetrics: any) => void
        createNewMetric: () => void
        addNewMetric: (metric: SecondaryExperimentMetric) => void
        updateMetricFilters: (filters: Partial<FilterType>) => void
        setFilters: (filters: Partial<FilterType>) => void
        setPreviewInsightId: (shortId: InsightShortId) => void
        createPreviewInsight: (filters?: Partial<FilterType>) => void
        showModal: () => void
        hideModal: () => void
        changeInsightType: (type?: InsightType) => void
        setCurrentMetricName: (name: string) => void
        deleteMetric: (metricId: number) => void
        loadExperiments: () => void
        loadExperimentsSuccess: (experiments: Experiment[], payload?: any) => void
        loadExperimentsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        experiments: Experiment[]
        experimentsLoading: boolean
        previewInsightId: InsightShortId | null
        metrics: SecondaryExperimentMetric[]
        modalVisible: boolean
        currentMetricName: string
        currentMetric: SecondaryExperimentMetric
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        createPreviewInsight: ((
            action: {
                type: 'create preview insight (scenes.experiment.secondaryMetricsLogic)'
                payload: {
                    filters: Partial<FilterType> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setFilters: ((
            action: {
                type: 'set filters (scenes.experiment.secondaryMetricsLogic)'
                payload: {
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        createNewMetric: ((
            action: {
                type: 'create new metric (scenes.experiment.secondaryMetricsLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        deleteMetric: ((
            action: {
                type: 'delete metric (scenes.experiment.secondaryMetricsLogic)'
                payload: {
                    metricId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        changeInsightType: ((
            action: {
                type: 'change insight type (scenes.experiment.secondaryMetricsLogic)'
                payload: {
                    type: InsightType | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'experiment', 'secondaryMetricsLogic']
    pathString: 'scenes.experiment.secondaryMetricsLogic'
    props: SecondaryMetricsProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        experiments: Experiment[]
        experimentsLoading: boolean
        previewInsightId: InsightShortId | null
        metrics: SecondaryExperimentMetric[]
        modalVisible: boolean
        currentMetricName: string
        currentMetric: SecondaryExperimentMetric
    }
    reducers: {
        experiments: (state: Experiment[], action: any, fullState: any) => Experiment[]
        experimentsLoading: (state: boolean, action: any, fullState: any) => boolean
        previewInsightId: (state: InsightShortId | null, action: any, fullState: any) => InsightShortId | null
        metrics: (state: SecondaryExperimentMetric[], action: any, fullState: any) => SecondaryExperimentMetric[]
        modalVisible: (state: boolean, action: any, fullState: any) => boolean
        currentMetricName: (state: string, action: any, fullState: any) => string
        currentMetric: (state: SecondaryExperimentMetric, action: any, fullState: any) => SecondaryExperimentMetric
    }
    selector: (state: any) => {
        experiments: Experiment[]
        experimentsLoading: boolean
        previewInsightId: InsightShortId | null
        metrics: SecondaryExperimentMetric[]
        modalVisible: boolean
        currentMetricName: string
        currentMetric: SecondaryExperimentMetric
    }
    selectors: {
        experiments: (state: any, props?: any) => Experiment[]
        experimentsLoading: (state: any, props?: any) => boolean
        previewInsightId: (state: any, props?: any) => InsightShortId | null
        metrics: (state: any, props?: any) => SecondaryExperimentMetric[]
        modalVisible: (state: any, props?: any) => boolean
        currentMetricName: (state: any, props?: any) => string
        currentMetric: (state: any, props?: any) => SecondaryExperimentMetric
        currentTeamId: (state: any, props?: any) => number | null
    }
    sharedListeners: {}
    values: {
        experiments: Experiment[]
        experimentsLoading: boolean
        previewInsightId: InsightShortId | null
        metrics: SecondaryExperimentMetric[]
        modalVisible: boolean
        currentMetricName: string
        currentMetric: SecondaryExperimentMetric
        currentTeamId: number | null
    }
    _isKea: true
    _isKeaWithKey: false
}
