// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AvailableFeature, Experiment, ExperimentsTabs } from '../../types'

export interface experimentsLogicType extends Logic {
    actionCreators: {
        loadExperiments: (filter?: string) => {
            type: 'load experiments (scenes.experiments.experimentsLogic)'
            payload: string
        }
        loadExperimentsSuccess: (
            experiments: Experiment[],
            payload?: string
        ) => {
            type: 'load experiments success (scenes.experiments.experimentsLogic)'
            payload: {
                experiments: Experiment[]
                payload?: string
            }
        }
        loadExperimentsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load experiments failure (scenes.experiments.experimentsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteExperiment: (id: number) => {
            type: 'delete experiment (scenes.experiments.experimentsLogic)'
            payload: number
        }
        deleteExperimentSuccess: (
            experiments: Experiment[],
            payload?: number
        ) => {
            type: 'delete experiment success (scenes.experiments.experimentsLogic)'
            payload: {
                experiments: Experiment[]
                payload?: number
            }
        }
        deleteExperimentFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete experiment failure (scenes.experiments.experimentsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        addToExperiments: (experiment: Experiment) => {
            type: 'add to experiments (scenes.experiments.experimentsLogic)'
            payload: Experiment
        }
        addToExperimentsSuccess: (
            experiments: Experiment[],
            payload?: Experiment
        ) => {
            type: 'add to experiments success (scenes.experiments.experimentsLogic)'
            payload: {
                experiments: Experiment[]
                payload?: Experiment
            }
        }
        addToExperimentsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'add to experiments failure (scenes.experiments.experimentsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateExperiments: (experiment: Experiment) => {
            type: 'update experiments (scenes.experiments.experimentsLogic)'
            payload: Experiment
        }
        updateExperimentsSuccess: (
            experiments: Experiment[],
            payload?: Experiment
        ) => {
            type: 'update experiments success (scenes.experiments.experimentsLogic)'
            payload: {
                experiments: Experiment[]
                payload?: Experiment
            }
        }
        updateExperimentsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update experiments failure (scenes.experiments.experimentsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setExperimentsFilters: ({ tab }: { tab: ExperimentsTabs }) => {
            type: 'set experiments filters (scenes.experiments.experimentsLogic)'
            payload: {
                tab: ExperimentsTabs
            }
        }
        setExperimentsFiltersSuccess: (
            tab: ExperimentsTabs,
            payload?: {
                tab: ExperimentsTabs
            }
        ) => {
            type: 'set experiments filters success (scenes.experiments.experimentsLogic)'
            payload: {
                tab: ExperimentsTabs
                payload?: {
                    tab: ExperimentsTabs
                }
            }
        }
        setExperimentsFiltersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set experiments filters failure (scenes.experiments.experimentsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load experiments (scenes.experiments.experimentsLogic)': 'loadExperiments'
        'load experiments success (scenes.experiments.experimentsLogic)': 'loadExperimentsSuccess'
        'load experiments failure (scenes.experiments.experimentsLogic)': 'loadExperimentsFailure'
        'delete experiment (scenes.experiments.experimentsLogic)': 'deleteExperiment'
        'delete experiment success (scenes.experiments.experimentsLogic)': 'deleteExperimentSuccess'
        'delete experiment failure (scenes.experiments.experimentsLogic)': 'deleteExperimentFailure'
        'add to experiments (scenes.experiments.experimentsLogic)': 'addToExperiments'
        'add to experiments success (scenes.experiments.experimentsLogic)': 'addToExperimentsSuccess'
        'add to experiments failure (scenes.experiments.experimentsLogic)': 'addToExperimentsFailure'
        'update experiments (scenes.experiments.experimentsLogic)': 'updateExperiments'
        'update experiments success (scenes.experiments.experimentsLogic)': 'updateExperimentsSuccess'
        'update experiments failure (scenes.experiments.experimentsLogic)': 'updateExperimentsFailure'
        'set experiments filters (scenes.experiments.experimentsLogic)': 'setExperimentsFilters'
        'set experiments filters success (scenes.experiments.experimentsLogic)': 'setExperimentsFiltersSuccess'
        'set experiments filters failure (scenes.experiments.experimentsLogic)': 'setExperimentsFiltersFailure'
    }
    actionTypes: {
        loadExperiments: 'load experiments (scenes.experiments.experimentsLogic)'
        loadExperimentsSuccess: 'load experiments success (scenes.experiments.experimentsLogic)'
        loadExperimentsFailure: 'load experiments failure (scenes.experiments.experimentsLogic)'
        deleteExperiment: 'delete experiment (scenes.experiments.experimentsLogic)'
        deleteExperimentSuccess: 'delete experiment success (scenes.experiments.experimentsLogic)'
        deleteExperimentFailure: 'delete experiment failure (scenes.experiments.experimentsLogic)'
        addToExperiments: 'add to experiments (scenes.experiments.experimentsLogic)'
        addToExperimentsSuccess: 'add to experiments success (scenes.experiments.experimentsLogic)'
        addToExperimentsFailure: 'add to experiments failure (scenes.experiments.experimentsLogic)'
        updateExperiments: 'update experiments (scenes.experiments.experimentsLogic)'
        updateExperimentsSuccess: 'update experiments success (scenes.experiments.experimentsLogic)'
        updateExperimentsFailure: 'update experiments failure (scenes.experiments.experimentsLogic)'
        setExperimentsFilters: 'set experiments filters (scenes.experiments.experimentsLogic)'
        setExperimentsFiltersSuccess: 'set experiments filters success (scenes.experiments.experimentsLogic)'
        setExperimentsFiltersFailure: 'set experiments filters failure (scenes.experiments.experimentsLogic)'
    }
    actions: {
        loadExperiments: (filter?: string) => void
        loadExperimentsSuccess: (experiments: Experiment[], payload?: string) => void
        loadExperimentsFailure: (error: string, errorObject?: any) => void
        deleteExperiment: (id: number) => void
        deleteExperimentSuccess: (experiments: Experiment[], payload?: number) => void
        deleteExperimentFailure: (error: string, errorObject?: any) => void
        addToExperiments: (experiment: Experiment) => void
        addToExperimentsSuccess: (experiments: Experiment[], payload?: Experiment) => void
        addToExperimentsFailure: (error: string, errorObject?: any) => void
        updateExperiments: (experiment: Experiment) => void
        updateExperimentsSuccess: (experiments: Experiment[], payload?: Experiment) => void
        updateExperimentsFailure: (error: string, errorObject?: any) => void
        setExperimentsFilters: ({ tab }: { tab: ExperimentsTabs }) => void
        setExperimentsFiltersSuccess: (
            tab: ExperimentsTabs,
            payload?: {
                tab: ExperimentsTabs
            }
        ) => void
        setExperimentsFiltersFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        experiments: Experiment[]
        experimentsLoading: boolean
        tab: ExperimentsTabs
        tabLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['scenes', 'experiments', 'experimentsLogic']
    pathString: 'scenes.experiments.experimentsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        experiments: Experiment[]
        experimentsLoading: boolean
        tab: ExperimentsTabs
        tabLoading: boolean
    }
    reducers: {
        experiments: (state: Experiment[], action: any, fullState: any) => Experiment[]
        experimentsLoading: (state: boolean, action: any, fullState: any) => boolean
        tab: (state: ExperimentsTabs, action: any, fullState: any) => ExperimentsTabs
        tabLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        experiments: Experiment[]
        experimentsLoading: boolean
        tab: ExperimentsTabs
        tabLoading: boolean
    }
    selectors: {
        experiments: (state: any, props?: any) => Experiment[]
        experimentsLoading: (state: any, props?: any) => boolean
        tab: (state: any, props?: any) => ExperimentsTabs
        tabLoading: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        hasAvailableFeature: (state: any, props?: any) => (feature: AvailableFeature) => boolean
    }
    sharedListeners: {}
    values: {
        experiments: Experiment[]
        experimentsLoading: boolean
        tab: ExperimentsTabs
        tabLoading: boolean
        currentTeamId: number | null
        hasAvailableFeature: (feature: AvailableFeature) => boolean
    }
    _isKea: true
    _isKeaWithKey: false
}
