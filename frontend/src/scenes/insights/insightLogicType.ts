// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionType, CohortType, FilterType, InsightColor, InsightLogicProps, InsightModel, InsightShortId, InsightType, ItemMode, SetInsightOptions, UserBasicType } from '../../types'
import type { FeatureFlagsSet } from '../../lib/logic/featureFlagLogic'
import type { MathDefinition } from '../trends/mathsLogic'
import type { Scene } from '../sceneTypes'
import type { DashboardPrivilegeLevel, DashboardRestrictionLevel } from '../../lib/constants'

export interface insightLogicType extends Logic {
    actionCreators: {
        setActiveView: (type: InsightType) => {
            type: 'set active view (scenes.insights.insightLogic.*)'
            payload: {
                type: InsightType
            }
        }
        updateActiveView: (type: InsightType) => {
            type: 'update active view (scenes.insights.insightLogic.*)'
            payload: {
                type: InsightType
            }
        }
        setFilters: (
            filters: Partial<FilterType>,
            insightMode?: ItemMode
        ) => {
            type: 'set filters (scenes.insights.insightLogic.*)'
            payload: {
                filters: Partial<FilterType>
                insightMode: ItemMode | undefined
            }
        }
        reportInsightViewedForRecentInsights: () => {
            type: 'report insight viewed for recent insights (scenes.insights.insightLogic.*)'
            payload: boolean
        }
        reportInsightViewed: (
            insightModel: Partial<InsightModel>,
            filters: Partial<FilterType>,
            previousFilters?: Partial<FilterType>
        ) => {
            type: 'report insight viewed (scenes.insights.insightLogic.*)'
            payload: {
                insightModel: Partial<InsightModel>
                filters: Partial<FilterType>
                previousFilters: Partial<FilterType> | undefined
            }
        }
        startQuery: (queryId: string) => {
            type: 'start query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
            }
        }
        endQuery: (
            queryId: string,
            view: InsightType,
            lastRefresh: string | null,
            exception?: Record<string, any>
        ) => {
            type: 'end query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
                view: InsightType
                lastRefresh: string | null
                exception: Record<string, any> | undefined
            }
        }
        abortQuery: (
            queryId: string,
            view: InsightType,
            scene: Scene | null,
            exception?: Record<string, any>
        ) => {
            type: 'abort query (scenes.insights.insightLogic.*)'
            payload: {
                queryId: string
                view: InsightType
                scene: Scene | null
                exception: Record<string, any> | undefined
            }
        }
        setShowTimeoutMessage: (showTimeoutMessage: boolean) => {
            type: 'set show timeout message (scenes.insights.insightLogic.*)'
            payload: {
                showTimeoutMessage: boolean
            }
        }
        setShowErrorMessage: (showErrorMessage: boolean) => {
            type: 'set show error message (scenes.insights.insightLogic.*)'
            payload: {
                showErrorMessage: boolean
            }
        }
        setIsLoading: (isLoading: boolean) => {
            type: 'set is loading (scenes.insights.insightLogic.*)'
            payload: {
                isLoading: boolean
            }
        }
        setTimeout: (timeout: number | null) => {
            type: 'set timeout (scenes.insights.insightLogic.*)'
            payload: {
                timeout: number | null
            }
        }
        setLastRefresh: (lastRefresh: string | null) => {
            type: 'set last refresh (scenes.insights.insightLogic.*)'
            payload: {
                lastRefresh: string | null
            }
        }
        setNotFirstLoad: () => {
            type: 'set not first load (scenes.insights.insightLogic.*)'
            payload: {
                value: true
            }
        }
        setInsight: (
            insight: Partial<InsightModel>,
            options: SetInsightOptions
        ) => {
            type: 'set insight (scenes.insights.insightLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                options: SetInsightOptions
            }
        }
        saveAs: () => {
            type: 'save as (scenes.insights.insightLogic.*)'
            payload: {
                value: true
            }
        }
        saveAsNamingSuccess: (name: string) => {
            type: 'save as naming success (scenes.insights.insightLogic.*)'
            payload: {
                name: string
            }
        }
        cancelChanges: (goToViewMode?: boolean) => {
            type: 'cancel changes (scenes.insights.insightLogic.*)'
            payload: {
                goToViewMode: boolean | undefined
            }
        }
        setInsightDescription: (description: string) => {
            type: 'set insight description (scenes.insights.insightLogic.*)'
            payload: {
                description: string
            }
        }
        saveInsight: (redirectToViewMode?: any) => {
            type: 'save insight (scenes.insights.insightLogic.*)'
            payload: {
                redirectToViewMode: any
            }
        }
        saveInsightSuccess: () => {
            type: 'save insight success (scenes.insights.insightLogic.*)'
            payload: {
                value: true
            }
        }
        saveInsightFailure: () => {
            type: 'save insight failure (scenes.insights.insightLogic.*)'
            payload: {
                value: true
            }
        }
        setTagLoading: (tagLoading: boolean) => {
            type: 'set tag loading (scenes.insights.insightLogic.*)'
            payload: {
                tagLoading: boolean
            }
        }
        fetchedResults: (filters: Partial<FilterType>) => {
            type: 'fetched results (scenes.insights.insightLogic.*)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        loadInsight: (shortId: InsightShortId) => {
            type: 'load insight (scenes.insights.insightLogic.*)'
            payload: {
                shortId: InsightShortId
            }
        }
        updateInsight: (
            insight: Partial<InsightModel>,
            callback?: (insight: Partial<InsightModel>) => void
        ) => {
            type: 'update insight (scenes.insights.insightLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        }
        loadResults: (refresh?: any) => {
            type: 'load results (scenes.insights.insightLogic.*)'
            payload: {
                refresh: any
                queryId: string
            }
        }
        setInsightMetadata: (metadata: Partial<InsightModel>) => {
            type: 'set insight metadata (scenes.insights.insightLogic.*)'
            payload: {
                metadata: Partial<InsightModel>
            }
        }
        toggleInsightLegend: () => {
            type: 'toggle insight legend (scenes.insights.insightLogic.*)'
            payload: {
                value: true
            }
        }
        toggleVisibility: (index: number) => {
            type: 'toggle visibility (scenes.insights.insightLogic.*)'
            payload: {
                index: number
            }
        }
        setHiddenById: (entry: Record<string, boolean | undefined>) => {
            type: 'set hidden by id (scenes.insights.insightLogic.*)'
            payload: {
                entry: Record<string, boolean | undefined>
            }
        }
        loadInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                shortId: InsightShortId
            }
        ) => {
            type: 'load insight success (scenes.insights.insightLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    shortId: InsightShortId
                }
            }
        }
        loadInsightFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load insight failure (scenes.insights.insightLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        updateInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        ) => {
            type: 'update insight success (scenes.insights.insightLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    insight: Partial<InsightModel>
                    callback: ((insight: Partial<InsightModel>) => void) | undefined
                }
            }
        }
        updateInsightFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'update insight failure (scenes.insights.insightLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        setInsightMetadataSuccess: (
            insight: {
                short_id?: InsightShortId | undefined
                id?: number | undefined
                name?: string | undefined
                derived_name?: string | undefined
                description?: string | undefined
                favorited?: boolean | undefined
                order?: number | null | undefined
                deleted?: boolean | undefined
                saved?: boolean | undefined
                created_at?: string | undefined
                created_by?: UserBasicType | null | undefined
                refreshing?: boolean | undefined
                is_sample?: boolean | undefined
                dashboards?: number[] | null | undefined
                updated_at?: string | undefined
                tags?: string[] | undefined
                last_modified_at?: string | undefined
                last_modified_by?: UserBasicType | null | undefined
                effective_restriction_level?: DashboardRestrictionLevel | undefined
                effective_privilege_level?: DashboardPrivilegeLevel | undefined
                timezone?: string | undefined
                next?: string | undefined
                result?: any
                layouts?: Record<string, any> | undefined
                color?: InsightColor | null | undefined
                last_refresh?: string | null | undefined
                filters?: Partial<FilterType> | undefined
                filters_hash?: string | undefined
            },
            payload?: {
                metadata: Partial<InsightModel>
            }
        ) => {
            type: 'set insight metadata success (scenes.insights.insightLogic.*)'
            payload: {
                insight: {
                    short_id?: InsightShortId | undefined
                    id?: number | undefined
                    name?: string | undefined
                    derived_name?: string | undefined
                    description?: string | undefined
                    favorited?: boolean | undefined
                    order?: number | null | undefined
                    deleted?: boolean | undefined
                    saved?: boolean | undefined
                    created_at?: string | undefined
                    created_by?: UserBasicType | null | undefined
                    refreshing?: boolean | undefined
                    is_sample?: boolean | undefined
                    dashboards?: number[] | null | undefined
                    updated_at?: string | undefined
                    tags?: string[] | undefined
                    last_modified_at?: string | undefined
                    last_modified_by?: UserBasicType | null | undefined
                    effective_restriction_level?: DashboardRestrictionLevel | undefined
                    effective_privilege_level?: DashboardPrivilegeLevel | undefined
                    timezone?: string | undefined
                    next?: string | undefined
                    result?: any
                    layouts?: Record<string, any> | undefined
                    color?: InsightColor | null | undefined
                    last_refresh?: string | null | undefined
                    filters?: Partial<FilterType> | undefined
                    filters_hash?: string | undefined
                }
                payload?: {
                    metadata: Partial<InsightModel>
                }
            }
        }
        setInsightMetadataFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'set insight metadata failure (scenes.insights.insightLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load results success (scenes.insights.insightLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        loadResultsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load results failure (scenes.insights.insightLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set active view (scenes.insights.insightLogic.*)': 'setActiveView'
        'update active view (scenes.insights.insightLogic.*)': 'updateActiveView'
        'set filters (scenes.insights.insightLogic.*)': 'setFilters'
        'report insight viewed for recent insights (scenes.insights.insightLogic.*)': 'reportInsightViewedForRecentInsights'
        'report insight viewed (scenes.insights.insightLogic.*)': 'reportInsightViewed'
        'start query (scenes.insights.insightLogic.*)': 'startQuery'
        'end query (scenes.insights.insightLogic.*)': 'endQuery'
        'abort query (scenes.insights.insightLogic.*)': 'abortQuery'
        'set show timeout message (scenes.insights.insightLogic.*)': 'setShowTimeoutMessage'
        'set show error message (scenes.insights.insightLogic.*)': 'setShowErrorMessage'
        'set is loading (scenes.insights.insightLogic.*)': 'setIsLoading'
        'set timeout (scenes.insights.insightLogic.*)': 'setTimeout'
        'set last refresh (scenes.insights.insightLogic.*)': 'setLastRefresh'
        'set not first load (scenes.insights.insightLogic.*)': 'setNotFirstLoad'
        'set insight (scenes.insights.insightLogic.*)': 'setInsight'
        'save as (scenes.insights.insightLogic.*)': 'saveAs'
        'save as naming success (scenes.insights.insightLogic.*)': 'saveAsNamingSuccess'
        'cancel changes (scenes.insights.insightLogic.*)': 'cancelChanges'
        'set insight description (scenes.insights.insightLogic.*)': 'setInsightDescription'
        'save insight (scenes.insights.insightLogic.*)': 'saveInsight'
        'save insight success (scenes.insights.insightLogic.*)': 'saveInsightSuccess'
        'save insight failure (scenes.insights.insightLogic.*)': 'saveInsightFailure'
        'set tag loading (scenes.insights.insightLogic.*)': 'setTagLoading'
        'fetched results (scenes.insights.insightLogic.*)': 'fetchedResults'
        'load insight (scenes.insights.insightLogic.*)': 'loadInsight'
        'update insight (scenes.insights.insightLogic.*)': 'updateInsight'
        'load results (scenes.insights.insightLogic.*)': 'loadResults'
        'set insight metadata (scenes.insights.insightLogic.*)': 'setInsightMetadata'
        'toggle insight legend (scenes.insights.insightLogic.*)': 'toggleInsightLegend'
        'toggle visibility (scenes.insights.insightLogic.*)': 'toggleVisibility'
        'set hidden by id (scenes.insights.insightLogic.*)': 'setHiddenById'
        'load insight success (scenes.insights.insightLogic.*)': 'loadInsightSuccess'
        'load insight failure (scenes.insights.insightLogic.*)': 'loadInsightFailure'
        'update insight success (scenes.insights.insightLogic.*)': 'updateInsightSuccess'
        'update insight failure (scenes.insights.insightLogic.*)': 'updateInsightFailure'
        'set insight metadata success (scenes.insights.insightLogic.*)': 'setInsightMetadataSuccess'
        'set insight metadata failure (scenes.insights.insightLogic.*)': 'setInsightMetadataFailure'
        'load results success (scenes.insights.insightLogic.*)': 'loadResultsSuccess'
        'load results failure (scenes.insights.insightLogic.*)': 'loadResultsFailure'
    }
    actionTypes: {
        setActiveView: 'set active view (scenes.insights.insightLogic.*)'
        updateActiveView: 'update active view (scenes.insights.insightLogic.*)'
        setFilters: 'set filters (scenes.insights.insightLogic.*)'
        reportInsightViewedForRecentInsights: 'report insight viewed for recent insights (scenes.insights.insightLogic.*)'
        reportInsightViewed: 'report insight viewed (scenes.insights.insightLogic.*)'
        startQuery: 'start query (scenes.insights.insightLogic.*)'
        endQuery: 'end query (scenes.insights.insightLogic.*)'
        abortQuery: 'abort query (scenes.insights.insightLogic.*)'
        setShowTimeoutMessage: 'set show timeout message (scenes.insights.insightLogic.*)'
        setShowErrorMessage: 'set show error message (scenes.insights.insightLogic.*)'
        setIsLoading: 'set is loading (scenes.insights.insightLogic.*)'
        setTimeout: 'set timeout (scenes.insights.insightLogic.*)'
        setLastRefresh: 'set last refresh (scenes.insights.insightLogic.*)'
        setNotFirstLoad: 'set not first load (scenes.insights.insightLogic.*)'
        setInsight: 'set insight (scenes.insights.insightLogic.*)'
        saveAs: 'save as (scenes.insights.insightLogic.*)'
        saveAsNamingSuccess: 'save as naming success (scenes.insights.insightLogic.*)'
        cancelChanges: 'cancel changes (scenes.insights.insightLogic.*)'
        setInsightDescription: 'set insight description (scenes.insights.insightLogic.*)'
        saveInsight: 'save insight (scenes.insights.insightLogic.*)'
        saveInsightSuccess: 'save insight success (scenes.insights.insightLogic.*)'
        saveInsightFailure: 'save insight failure (scenes.insights.insightLogic.*)'
        setTagLoading: 'set tag loading (scenes.insights.insightLogic.*)'
        fetchedResults: 'fetched results (scenes.insights.insightLogic.*)'
        loadInsight: 'load insight (scenes.insights.insightLogic.*)'
        updateInsight: 'update insight (scenes.insights.insightLogic.*)'
        loadResults: 'load results (scenes.insights.insightLogic.*)'
        setInsightMetadata: 'set insight metadata (scenes.insights.insightLogic.*)'
        toggleInsightLegend: 'toggle insight legend (scenes.insights.insightLogic.*)'
        toggleVisibility: 'toggle visibility (scenes.insights.insightLogic.*)'
        setHiddenById: 'set hidden by id (scenes.insights.insightLogic.*)'
        loadInsightSuccess: 'load insight success (scenes.insights.insightLogic.*)'
        loadInsightFailure: 'load insight failure (scenes.insights.insightLogic.*)'
        updateInsightSuccess: 'update insight success (scenes.insights.insightLogic.*)'
        updateInsightFailure: 'update insight failure (scenes.insights.insightLogic.*)'
        setInsightMetadataSuccess: 'set insight metadata success (scenes.insights.insightLogic.*)'
        setInsightMetadataFailure: 'set insight metadata failure (scenes.insights.insightLogic.*)'
        loadResultsSuccess: 'load results success (scenes.insights.insightLogic.*)'
        loadResultsFailure: 'load results failure (scenes.insights.insightLogic.*)'
    }
    actions: {
        setActiveView: (type: InsightType) => void
        updateActiveView: (type: InsightType) => void
        setFilters: (filters: Partial<FilterType>, insightMode?: ItemMode) => void
        reportInsightViewedForRecentInsights: () => void
        reportInsightViewed: (
            insightModel: Partial<InsightModel>,
            filters: Partial<FilterType>,
            previousFilters?: Partial<FilterType>
        ) => void
        startQuery: (queryId: string) => void
        endQuery: (
            queryId: string,
            view: InsightType,
            lastRefresh: string | null,
            exception?: Record<string, any>
        ) => void
        abortQuery: (queryId: string, view: InsightType, scene: Scene | null, exception?: Record<string, any>) => void
        setShowTimeoutMessage: (showTimeoutMessage: boolean) => void
        setShowErrorMessage: (showErrorMessage: boolean) => void
        setIsLoading: (isLoading: boolean) => void
        setTimeout: (timeout: number | null) => void
        setLastRefresh: (lastRefresh: string | null) => void
        setNotFirstLoad: () => void
        setInsight: (insight: Partial<InsightModel>, options: SetInsightOptions) => void
        saveAs: () => void
        saveAsNamingSuccess: (name: string) => void
        cancelChanges: (goToViewMode?: boolean) => void
        setInsightDescription: (description: string) => void
        saveInsight: (redirectToViewMode?: any) => void
        saveInsightSuccess: () => void
        saveInsightFailure: () => void
        setTagLoading: (tagLoading: boolean) => void
        fetchedResults: (filters: Partial<FilterType>) => void
        loadInsight: (shortId: InsightShortId) => void
        updateInsight: (insight: Partial<InsightModel>, callback?: (insight: Partial<InsightModel>) => void) => void
        loadResults: (refresh?: any) => void
        setInsightMetadata: (metadata: Partial<InsightModel>) => void
        toggleInsightLegend: () => void
        toggleVisibility: (index: number) => void
        setHiddenById: (entry: Record<string, boolean | undefined>) => void
        loadInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                shortId: InsightShortId
            }
        ) => void
        loadInsightFailure: (error: string, errorObject?: any) => void
        updateInsightSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                insight: Partial<InsightModel>
                callback: ((insight: Partial<InsightModel>) => void) | undefined
            }
        ) => void
        updateInsightFailure: (error: string, errorObject?: any) => void
        setInsightMetadataSuccess: (
            insight: {
                short_id?: InsightShortId | undefined
                id?: number | undefined
                name?: string | undefined
                derived_name?: string | undefined
                description?: string | undefined
                favorited?: boolean | undefined
                order?: number | null | undefined
                deleted?: boolean | undefined
                saved?: boolean | undefined
                created_at?: string | undefined
                created_by?: UserBasicType | null | undefined
                refreshing?: boolean | undefined
                is_sample?: boolean | undefined
                dashboards?: number[] | null | undefined
                updated_at?: string | undefined
                tags?: string[] | undefined
                last_modified_at?: string | undefined
                last_modified_by?: UserBasicType | null | undefined
                effective_restriction_level?: DashboardRestrictionLevel | undefined
                effective_privilege_level?: DashboardPrivilegeLevel | undefined
                timezone?: string | undefined
                next?: string | undefined
                result?: any
                layouts?: Record<string, any> | undefined
                color?: InsightColor | null | undefined
                last_refresh?: string | null | undefined
                filters?: Partial<FilterType> | undefined
                filters_hash?: string | undefined
            },
            payload?: {
                metadata: Partial<InsightModel>
            }
        ) => void
        setInsightMetadataFailure: (error: string, errorObject?: any) => void
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        loadResultsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        savedInsight: Partial<InsightModel>
        showTimeoutMessage: boolean
        maybeShowTimeoutMessage: boolean
        showErrorMessage: boolean
        maybeShowErrorMessage: boolean
        timeout: number | null
        lastRefresh: string | null
        isFirstLoad: boolean
        queryStartTimes: Record<string, number>
        tagLoading: boolean
        insightSaving: boolean
    }
    events: {
        afterMount: () => void
        beforeUnmount: () => void
    }
    key: string | number
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (scenes.insights.insightLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                    insightMode: ItemMode | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightViewedForRecentInsights: ((
            action: {
                type: 'report insight viewed for recent insights (scenes.insights.insightLogic.*)'
                payload: boolean
            },
            previousState: any
        ) => void | Promise<void>)[]
        reportInsightViewed: ((
            action: {
                type: 'report insight viewed (scenes.insights.insightLogic.*)'
                payload: {
                    insightModel: Partial<InsightModel>
                    filters: Partial<FilterType>
                    previousFilters: Partial<FilterType> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        startQuery: ((
            action: {
                type: 'start query (scenes.insights.insightLogic.*)'
                payload: {
                    queryId: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        abortQuery: ((
            action: {
                type: 'abort query (scenes.insights.insightLogic.*)'
                payload: {
                    queryId: string
                    view: InsightType
                    scene: Scene | null
                    exception: Record<string, any> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        endQuery: ((
            action: {
                type: 'end query (scenes.insights.insightLogic.*)'
                payload: {
                    queryId: string
                    view: InsightType
                    lastRefresh: string | null
                    exception: Record<string, any> | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setActiveView: ((
            action: {
                type: 'set active view (scenes.insights.insightLogic.*)'
                payload: {
                    type: InsightType
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveInsight: ((
            action: {
                type: 'save insight (scenes.insights.insightLogic.*)'
                payload: {
                    redirectToViewMode: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveAs: ((
            action: {
                type: 'save as (scenes.insights.insightLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        saveAsNamingSuccess: ((
            action: {
                type: 'save as naming success (scenes.insights.insightLogic.*)'
                payload: {
                    name: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadInsightSuccess: ((
            action: {
                type: 'load insight success (scenes.insights.insightLogic.*)'
                payload: {
                    insight: Partial<InsightModel>
                    payload?: {
                        shortId: InsightShortId
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleInsightLegend: ((
            action: {
                type: 'toggle insight legend (scenes.insights.insightLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        toggleVisibility: ((
            action: {
                type: 'toggle visibility (scenes.insights.insightLogic.*)'
                payload: {
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setHiddenById: ((
            action: {
                type: 'set hidden by id (scenes.insights.insightLogic.*)'
                payload: {
                    entry: Record<string, boolean | undefined>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        cancelChanges: ((
            action: {
                type: 'cancel changes (scenes.insights.insightLogic.*)'
                payload: {
                    goToViewMode: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'insights', 'insightLogic', '*']
    pathString: 'scenes.insights.insightLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        savedInsight: Partial<InsightModel>
        showTimeoutMessage: boolean
        maybeShowTimeoutMessage: boolean
        showErrorMessage: boolean
        maybeShowErrorMessage: boolean
        timeout: number | null
        lastRefresh: string | null
        isFirstLoad: boolean
        queryStartTimes: Record<string, number>
        tagLoading: boolean
        insightSaving: boolean
    }
    reducers: {
        insight: (state: Partial<InsightModel>, action: any, fullState: any) => Partial<InsightModel>
        insightLoading: (state: boolean, action: any, fullState: any) => boolean
        filters: (state: Partial<FilterType>, action: any, fullState: any) => Partial<FilterType>
        savedInsight: (state: Partial<InsightModel>, action: any, fullState: any) => Partial<InsightModel>
        showTimeoutMessage: (state: boolean, action: any, fullState: any) => boolean
        maybeShowTimeoutMessage: (state: boolean, action: any, fullState: any) => boolean
        showErrorMessage: (state: boolean, action: any, fullState: any) => boolean
        maybeShowErrorMessage: (state: boolean, action: any, fullState: any) => boolean
        timeout: (state: number | null, action: any, fullState: any) => number | null
        lastRefresh: (state: string | null, action: any, fullState: any) => string | null
        isFirstLoad: (state: boolean, action: any, fullState: any) => boolean
        queryStartTimes: (state: Record<string, number>, action: any, fullState: any) => Record<string, number>
        tagLoading: (state: boolean, action: any, fullState: any) => boolean
        insightSaving: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        savedInsight: Partial<InsightModel>
        showTimeoutMessage: boolean
        maybeShowTimeoutMessage: boolean
        showErrorMessage: boolean
        maybeShowErrorMessage: boolean
        timeout: number | null
        lastRefresh: string | null
        isFirstLoad: boolean
        queryStartTimes: Record<string, number>
        tagLoading: boolean
        insightSaving: boolean
    }
    selectors: {
        insight: (state: any, props?: any) => Partial<InsightModel>
        insightLoading: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => Partial<FilterType>
        savedInsight: (state: any, props?: any) => Partial<InsightModel>
        showTimeoutMessage: (state: any, props?: any) => boolean
        maybeShowTimeoutMessage: (state: any, props?: any) => boolean
        showErrorMessage: (state: any, props?: any) => boolean
        maybeShowErrorMessage: (state: any, props?: any) => boolean
        timeout: (state: any, props?: any) => number | null
        lastRefresh: (state: any, props?: any) => string | null
        isFirstLoad: (state: any, props?: any) => boolean
        queryStartTimes: (state: any, props?: any) => Record<string, number>
        tagLoading: (state: any, props?: any) => boolean
        insightSaving: (state: any, props?: any) => boolean
        currentTeamId: (state: any, props?: any) => number | null
        featureFlags: (state: any, props?: any) => FeatureFlagsSet
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        cohortsById: (state: any, props?: any) => Partial<Record<string | number, CohortType>>
        mathDefinitions: (state: any, props?: any) => Record<string, MathDefinition>
        loadedFilters: (state: any, props?: any) => Partial<FilterType> | undefined
        insightProps: (state: any, props?: any) => InsightLogicProps
        derivedName: (state: any, props?: any) => string
        insightName: (state: any, props?: any) => string
        canEditInsight: (state: any, props?: any) => boolean
        activeView: (state: any, props?: any) => InsightType
        loadedView: (state: any, props?: any) => InsightType
        insightChanged: (state: any, props?: any) => boolean
        isViewedOnDashboard: (state: any, props?: any) => boolean
        allEventNames: (state: any, props?: any) => string[]
        hiddenLegendKeys: (state: any, props?: any) => Record<string, boolean | undefined>
        filtersKnown: (state: any, props?: any) => boolean
        filterPropertiesCount: (state: any, props?: any) => number
        supportsCsvExport: (state: any, props?: any) => boolean
        csvExportUrl: (state: any, props?: any) => string | undefined
    }
    sharedListeners: {}
    values: {
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        savedInsight: Partial<InsightModel>
        showTimeoutMessage: boolean
        maybeShowTimeoutMessage: boolean
        showErrorMessage: boolean
        maybeShowErrorMessage: boolean
        timeout: number | null
        lastRefresh: string | null
        isFirstLoad: boolean
        queryStartTimes: Record<string, number>
        tagLoading: boolean
        insightSaving: boolean
        currentTeamId: number | null
        featureFlags: FeatureFlagsSet
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        cohortsById: Partial<Record<string | number, CohortType>>
        mathDefinitions: Record<string, MathDefinition>
        loadedFilters: Partial<FilterType> | undefined
        insightProps: InsightLogicProps
        derivedName: string
        insightName: string
        canEditInsight: boolean
        activeView: InsightType
        loadedView: InsightType
        insightChanged: boolean
        isViewedOnDashboard: boolean
        allEventNames: string[]
        hiddenLegendKeys: Record<string, boolean | undefined>
        filtersKnown: boolean
        filterPropertiesCount: number
        supportsCsvExport: boolean
        csvExportUrl: string | undefined
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        loadedFilters: (insight: Partial<InsightModel>) => Partial<FilterType> | undefined
        insightProps: (arg: any) => InsightLogicProps
        derivedName: (
            insight: Partial<InsightModel>,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            },
            cohortsById: Partial<
                Record<string | number, import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').CohortType>
            >,
            mathDefinitions: Record<
                string,
                import('/Users/marius/Projects/PostHog/posthog/frontend/src/scenes/trends/mathsLogic').MathDefinition
            >
        ) => string
        insightName: (insight: Partial<InsightModel>, derivedName: string) => string
        canEditInsight: (insight: Partial<InsightModel>) => boolean
        activeView: (filters: Partial<FilterType>) => InsightType
        loadedView: (insight: Partial<InsightModel>, activeView: InsightType) => InsightType
        insightChanged: (
            insight: Partial<InsightModel>,
            savedInsight: Partial<InsightModel>,
            filters: Partial<FilterType>
        ) => boolean
        isViewedOnDashboard: (location: { pathname: string; search: string; hash: string }) => boolean
        allEventNames: (filters: Partial<FilterType>, actions: ActionType[]) => string[]
        hiddenLegendKeys: (filters: Partial<FilterType>) => Record<string, boolean | undefined>
        filtersKnown: (insight: Partial<InsightModel>) => boolean
        filterPropertiesCount: (filters: Partial<FilterType>) => number
        supportsCsvExport: (insight: Partial<InsightModel>) => boolean
        csvExportUrl: (
            insight: Partial<InsightModel>,
            currentTeamId: number | null,
            supportsCsvExport: boolean
        ) => string | undefined
    }
}
