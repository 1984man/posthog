// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:10 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AsyncMigration, AsyncMigrationError, AsyncMigrationsTab } from './asyncMigrationsLogic'
import type { InstanceSetting } from '../../../types'

export interface asyncMigrationsLogicType extends Logic {
    actionCreators: {
        triggerMigration: (migrationId: number) => {
            type: 'trigger migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        resumeMigration: (migrationId: number) => {
            type: 'resume migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        rollbackMigration: (migrationId: number) => {
            type: 'rollback migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        forceStopMigration: (migrationId: number) => {
            type: 'force stop migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        forceStopMigrationWithoutRollback: (migrationId: number) => {
            type: 'force stop migration without rollback (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        setActiveTab: (tab: AsyncMigrationsTab) => {
            type: 'set active tab (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                tab: AsyncMigrationsTab
            }
        }
        updateSetting: (
            settingKey: string,
            newValue: string
        ) => {
            type: 'update setting (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                settingKey: string
                newValue: string
            }
        }
        loadAsyncMigrationErrors: (migrationId: number) => {
            type: 'load async migration errors (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
            }
        }
        loadAsyncMigrationErrorsSuccess: (
            migrationId: number,
            errors: AsyncMigrationError[]
        ) => {
            type: 'load async migration errors success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
                errors: AsyncMigrationError[]
            }
        }
        loadAsyncMigrationErrorsFailure: (
            migrationId: number,
            error: any
        ) => {
            type: 'load async migration errors failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                migrationId: number
                error: any
            }
        }
        loadAsyncMigrations: () => {
            type: 'load async migrations (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: any
        }
        loadAsyncMigrationsSuccess: (
            asyncMigrations: AsyncMigration[],
            payload?: any
        ) => {
            type: 'load async migrations success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                asyncMigrations: AsyncMigration[]
                payload?: any
            }
        }
        loadAsyncMigrationsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load async migrations failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadAsyncMigrationSettings: () => {
            type: 'load async migration settings (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: any
        }
        loadAsyncMigrationSettingsSuccess: (
            asyncMigrationSettings: InstanceSetting[],
            payload?: any
        ) => {
            type: 'load async migration settings success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                asyncMigrationSettings: InstanceSetting[]
                payload?: any
            }
        }
        loadAsyncMigrationSettingsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load async migration settings failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'trigger migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'triggerMigration'
        'resume migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'resumeMigration'
        'rollback migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'rollbackMigration'
        'force stop migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'forceStopMigration'
        'force stop migration without rollback (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'forceStopMigrationWithoutRollback'
        'set active tab (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'setActiveTab'
        'update setting (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'updateSetting'
        'load async migration errors (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationErrors'
        'load async migration errors success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationErrorsSuccess'
        'load async migration errors failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationErrorsFailure'
        'load async migrations (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrations'
        'load async migrations success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationsSuccess'
        'load async migrations failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationsFailure'
        'load async migration settings (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationSettings'
        'load async migration settings success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationSettingsSuccess'
        'load async migration settings failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)': 'loadAsyncMigrationSettingsFailure'
    }
    actionTypes: {
        triggerMigration: 'trigger migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        resumeMigration: 'resume migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        rollbackMigration: 'rollback migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        forceStopMigration: 'force stop migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        forceStopMigrationWithoutRollback: 'force stop migration without rollback (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        setActiveTab: 'set active tab (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        updateSetting: 'update setting (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationErrors: 'load async migration errors (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationErrorsSuccess: 'load async migration errors success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationErrorsFailure: 'load async migration errors failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrations: 'load async migrations (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationsSuccess: 'load async migrations success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationsFailure: 'load async migrations failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationSettings: 'load async migration settings (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationSettingsSuccess: 'load async migration settings success (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
        loadAsyncMigrationSettingsFailure: 'load async migration settings failure (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
    }
    actions: {
        triggerMigration: (migrationId: number) => void
        resumeMigration: (migrationId: number) => void
        rollbackMigration: (migrationId: number) => void
        forceStopMigration: (migrationId: number) => void
        forceStopMigrationWithoutRollback: (migrationId: number) => void
        setActiveTab: (tab: AsyncMigrationsTab) => void
        updateSetting: (settingKey: string, newValue: string) => void
        loadAsyncMigrationErrors: (migrationId: number) => void
        loadAsyncMigrationErrorsSuccess: (migrationId: number, errors: AsyncMigrationError[]) => void
        loadAsyncMigrationErrorsFailure: (migrationId: number, error: any) => void
        loadAsyncMigrations: () => void
        loadAsyncMigrationsSuccess: (asyncMigrations: AsyncMigration[], payload?: any) => void
        loadAsyncMigrationsFailure: (error: string, errorObject?: any) => void
        loadAsyncMigrationSettings: () => void
        loadAsyncMigrationSettingsSuccess: (asyncMigrationSettings: InstanceSetting[], payload?: any) => void
        loadAsyncMigrationSettingsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        activeTab: AsyncMigrationsTab
        asyncMigrationErrors: Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: Record<number, boolean>
        asyncMigrations: AsyncMigration[]
        asyncMigrationsLoading: boolean
        asyncMigrationSettings: InstanceSetting[]
        asyncMigrationSettingsLoading: boolean
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {
        triggerMigration: ((
            action: {
                type: 'trigger migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        resumeMigration: ((
            action: {
                type: 'resume migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        rollbackMigration: ((
            action: {
                type: 'rollback migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        forceStopMigration: ((
            action: {
                type: 'force stop migration (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        forceStopMigrationWithoutRollback: ((
            action: {
                type: 'force stop migration without rollback (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateSetting: ((
            action: {
                type: 'update setting (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    settingKey: string
                    newValue: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadAsyncMigrationErrors: ((
            action: {
                type: 'load async migration errors (scenes.instance.AsyncMigrations.asyncMigrationsLogic)'
                payload: {
                    migrationId: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'instance', 'AsyncMigrations', 'asyncMigrationsLogic']
    pathString: 'scenes.instance.AsyncMigrations.asyncMigrationsLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        activeTab: AsyncMigrationsTab
        asyncMigrationErrors: Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: Record<number, boolean>
        asyncMigrations: AsyncMigration[]
        asyncMigrationsLoading: boolean
        asyncMigrationSettings: InstanceSetting[]
        asyncMigrationSettingsLoading: boolean
    }
    reducers: {
        activeTab: (state: AsyncMigrationsTab, action: any, fullState: any) => AsyncMigrationsTab
        asyncMigrationErrors: (
            state: Record<number, AsyncMigrationError[]>,
            action: any,
            fullState: any
        ) => Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: (
            state: Record<number, boolean>,
            action: any,
            fullState: any
        ) => Record<number, boolean>
        asyncMigrations: (state: AsyncMigration[], action: any, fullState: any) => AsyncMigration[]
        asyncMigrationsLoading: (state: boolean, action: any, fullState: any) => boolean
        asyncMigrationSettings: (state: InstanceSetting[], action: any, fullState: any) => InstanceSetting[]
        asyncMigrationSettingsLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        activeTab: AsyncMigrationsTab
        asyncMigrationErrors: Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: Record<number, boolean>
        asyncMigrations: AsyncMigration[]
        asyncMigrationsLoading: boolean
        asyncMigrationSettings: InstanceSetting[]
        asyncMigrationSettingsLoading: boolean
    }
    selectors: {
        activeTab: (state: any, props?: any) => AsyncMigrationsTab
        asyncMigrationErrors: (state: any, props?: any) => Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: (state: any, props?: any) => Record<number, boolean>
        asyncMigrations: (state: any, props?: any) => AsyncMigration[]
        asyncMigrationsLoading: (state: any, props?: any) => boolean
        asyncMigrationSettings: (state: any, props?: any) => InstanceSetting[]
        asyncMigrationSettingsLoading: (state: any, props?: any) => boolean
        isAnyMigrationRunning: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        activeTab: AsyncMigrationsTab
        asyncMigrationErrors: Record<number, AsyncMigrationError[]>
        asyncMigrationErrorsLoading: Record<number, boolean>
        asyncMigrations: AsyncMigration[]
        asyncMigrationsLoading: boolean
        asyncMigrationSettings: InstanceSetting[]
        asyncMigrationSettingsLoading: boolean
        isAnyMigrationRunning: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        isAnyMigrationRunning: (asyncMigrations: AsyncMigration[]) => boolean
    }
}
