// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { APIErrorType, LicenseType, PreflightStatus } from '../../../types'

export interface licenseLogicType extends Logic {
    actionCreators: {
        setError: (error: APIErrorType | null) => {
            type: 'set error (scenes.instance.Licenses.licenseLogic)'
            payload: {
                error: APIErrorType | null
            }
        }
        addLicense: (license: LicenseType) => {
            type: 'add license (scenes.instance.Licenses.licenseLogic)'
            payload: {
                license: LicenseType
            }
        }
        setShowConfirmCancel: (license: LicenseType | null) => {
            type: 'set show confirm cancel (scenes.instance.Licenses.licenseLogic)'
            payload: {
                license: LicenseType | null
            }
        }
        loadLicenses: () => {
            type: 'load licenses (scenes.instance.Licenses.licenseLogic)'
            payload: any
        }
        loadLicensesSuccess: (
            licenses: LicenseType[],
            payload?: any
        ) => {
            type: 'load licenses success (scenes.instance.Licenses.licenseLogic)'
            payload: {
                licenses: LicenseType[]
                payload?: any
            }
        }
        loadLicensesFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load licenses failure (scenes.instance.Licenses.licenseLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        createLicense: ({ key }: { key: string }) => {
            type: 'create license (scenes.instance.Licenses.licenseLogic)'
            payload: {
                key: string
            }
        }
        createLicenseSuccess: (
            licenses: LicenseType[],
            payload?: {
                key: string
            }
        ) => {
            type: 'create license success (scenes.instance.Licenses.licenseLogic)'
            payload: {
                licenses: LicenseType[]
                payload?: {
                    key: string
                }
            }
        }
        createLicenseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'create license failure (scenes.instance.Licenses.licenseLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        deleteLicense: ({ id }: LicenseType) => {
            type: 'delete license (scenes.instance.Licenses.licenseLogic)'
            payload: LicenseType
        }
        deleteLicenseSuccess: (
            licenses: LicenseType[],
            payload?: LicenseType
        ) => {
            type: 'delete license success (scenes.instance.Licenses.licenseLogic)'
            payload: {
                licenses: LicenseType[]
                payload?: LicenseType
            }
        }
        deleteLicenseFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'delete license failure (scenes.instance.Licenses.licenseLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'set error (scenes.instance.Licenses.licenseLogic)': 'setError'
        'add license (scenes.instance.Licenses.licenseLogic)': 'addLicense'
        'set show confirm cancel (scenes.instance.Licenses.licenseLogic)': 'setShowConfirmCancel'
        'load licenses (scenes.instance.Licenses.licenseLogic)': 'loadLicenses'
        'load licenses success (scenes.instance.Licenses.licenseLogic)': 'loadLicensesSuccess'
        'load licenses failure (scenes.instance.Licenses.licenseLogic)': 'loadLicensesFailure'
        'create license (scenes.instance.Licenses.licenseLogic)': 'createLicense'
        'create license success (scenes.instance.Licenses.licenseLogic)': 'createLicenseSuccess'
        'create license failure (scenes.instance.Licenses.licenseLogic)': 'createLicenseFailure'
        'delete license (scenes.instance.Licenses.licenseLogic)': 'deleteLicense'
        'delete license success (scenes.instance.Licenses.licenseLogic)': 'deleteLicenseSuccess'
        'delete license failure (scenes.instance.Licenses.licenseLogic)': 'deleteLicenseFailure'
    }
    actionTypes: {
        setError: 'set error (scenes.instance.Licenses.licenseLogic)'
        addLicense: 'add license (scenes.instance.Licenses.licenseLogic)'
        setShowConfirmCancel: 'set show confirm cancel (scenes.instance.Licenses.licenseLogic)'
        loadLicenses: 'load licenses (scenes.instance.Licenses.licenseLogic)'
        loadLicensesSuccess: 'load licenses success (scenes.instance.Licenses.licenseLogic)'
        loadLicensesFailure: 'load licenses failure (scenes.instance.Licenses.licenseLogic)'
        createLicense: 'create license (scenes.instance.Licenses.licenseLogic)'
        createLicenseSuccess: 'create license success (scenes.instance.Licenses.licenseLogic)'
        createLicenseFailure: 'create license failure (scenes.instance.Licenses.licenseLogic)'
        deleteLicense: 'delete license (scenes.instance.Licenses.licenseLogic)'
        deleteLicenseSuccess: 'delete license success (scenes.instance.Licenses.licenseLogic)'
        deleteLicenseFailure: 'delete license failure (scenes.instance.Licenses.licenseLogic)'
    }
    actions: {
        setError: (error: APIErrorType | null) => void
        addLicense: (license: LicenseType) => void
        setShowConfirmCancel: (license: LicenseType | null) => void
        loadLicenses: () => void
        loadLicensesSuccess: (licenses: LicenseType[], payload?: any) => void
        loadLicensesFailure: (error: string, errorObject?: any) => void
        createLicense: ({ key }: { key: string }) => void
        createLicenseSuccess: (
            licenses: LicenseType[],
            payload?: {
                key: string
            }
        ) => void
        createLicenseFailure: (error: string, errorObject?: any) => void
        deleteLicense: ({ id }: LicenseType) => void
        deleteLicenseSuccess: (licenses: LicenseType[], payload?: LicenseType) => void
        deleteLicenseFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        licenses: LicenseType[]
        licensesLoading: boolean
        error: null | APIErrorType
        showConfirmCancel: null | LicenseType
    }
    events: {
        afterMount: () => void
    }
    key: undefined
    listeners: {}
    path: ['scenes', 'instance', 'Licenses', 'licenseLogic']
    pathString: 'scenes.instance.Licenses.licenseLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        licenses: LicenseType[]
        licensesLoading: boolean
        error: null | APIErrorType
        showConfirmCancel: null | LicenseType
    }
    reducers: {
        licenses: (state: LicenseType[], action: any, fullState: any) => LicenseType[]
        licensesLoading: (state: boolean, action: any, fullState: any) => boolean
        error: (state: null | APIErrorType, action: any, fullState: any) => null | APIErrorType
        showConfirmCancel: (state: null | LicenseType, action: any, fullState: any) => null | LicenseType
    }
    selector: (state: any) => {
        licenses: LicenseType[]
        licensesLoading: boolean
        error: null | APIErrorType
        showConfirmCancel: null | LicenseType
    }
    selectors: {
        licenses: (state: any, props?: any) => LicenseType[]
        licensesLoading: (state: any, props?: any) => boolean
        error: (state: any, props?: any) => null | APIErrorType
        showConfirmCancel: (state: any, props?: any) => null | LicenseType
        preflight: (state: any, props?: any) => PreflightStatus | null
        relevantLicense: (state: any, props?: any) => LicenseType | null
    }
    sharedListeners: {}
    values: {
        licenses: LicenseType[]
        licensesLoading: boolean
        error: null | APIErrorType
        showConfirmCancel: null | LicenseType
        preflight: PreflightStatus | null
        relevantLicense: LicenseType | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        relevantLicense: (licenses: LicenseType[]) => LicenseType | null
    }
}
