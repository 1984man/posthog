// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ActionType, FilterType, InsightLogicProps, InsightModel } from '../../types'
import type { RetentionTablePayload, RetentionTablePeoplePayload, RetentionTrendPayload, RetentionTrendPeoplePayload } from './types'

export interface retentionTableLogicType extends Logic {
    actionCreators: {
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => {
            type: 'load results success (scenes.retention.retentionTableLogic.*)'
            payload: {
                insight: Partial<InsightModel>
                payload?: {
                    refresh: any
                    queryId: string
                }
            }
        }
        setFilters: (filters: Partial<FilterType>) => {
            type: 'set filters (scenes.retention.retentionTableLogic.*)'
            payload: {
                filters: Partial<FilterType>
            }
        }
        setRetentionReference: (retentionReference: FilterType['retention_reference']) => {
            type: 'set retention reference (scenes.retention.retentionTableLogic.*)'
            payload: {
                retentionReference: 'total' | 'previous' | undefined
            }
        }
        loadMorePeople: () => {
            type: 'load more people (scenes.retention.retentionTableLogic.*)'
            payload: {
                value: true
            }
        }
        updatePeople: (people: any) => {
            type: 'update people (scenes.retention.retentionTableLogic.*)'
            payload: {
                people: any
            }
        }
        clearPeople: () => {
            type: 'clear people (scenes.retention.retentionTableLogic.*)'
            payload: {
                value: true
            }
        }
        loadPeople: (rowIndex: number) => {
            type: 'load people (scenes.retention.retentionTableLogic.*)'
            payload: number
        }
        loadPeopleSuccess: (
            people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload,
            payload?: number
        ) => {
            type: 'load people success (scenes.retention.retentionTableLogic.*)'
            payload: {
                people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload
                payload?: number
            }
        }
        loadPeopleFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load people failure (scenes.retention.retentionTableLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load results success (scenes.retention.retentionTableLogic.*)': 'loadResultsSuccess'
        'set filters (scenes.retention.retentionTableLogic.*)': 'setFilters'
        'set retention reference (scenes.retention.retentionTableLogic.*)': 'setRetentionReference'
        'load more people (scenes.retention.retentionTableLogic.*)': 'loadMorePeople'
        'update people (scenes.retention.retentionTableLogic.*)': 'updatePeople'
        'clear people (scenes.retention.retentionTableLogic.*)': 'clearPeople'
        'load people (scenes.retention.retentionTableLogic.*)': 'loadPeople'
        'load people success (scenes.retention.retentionTableLogic.*)': 'loadPeopleSuccess'
        'load people failure (scenes.retention.retentionTableLogic.*)': 'loadPeopleFailure'
    }
    actionTypes: {
        loadResultsSuccess: 'load results success (scenes.retention.retentionTableLogic.*)'
        setFilters: 'set filters (scenes.retention.retentionTableLogic.*)'
        setRetentionReference: 'set retention reference (scenes.retention.retentionTableLogic.*)'
        loadMorePeople: 'load more people (scenes.retention.retentionTableLogic.*)'
        updatePeople: 'update people (scenes.retention.retentionTableLogic.*)'
        clearPeople: 'clear people (scenes.retention.retentionTableLogic.*)'
        loadPeople: 'load people (scenes.retention.retentionTableLogic.*)'
        loadPeopleSuccess: 'load people success (scenes.retention.retentionTableLogic.*)'
        loadPeopleFailure: 'load people failure (scenes.retention.retentionTableLogic.*)'
    }
    actions: {
        loadResultsSuccess: (
            insight: Partial<InsightModel>,
            payload?: {
                refresh: any
                queryId: string
            }
        ) => void
        setFilters: (filters: Partial<FilterType>) => void
        setRetentionReference: (retentionReference: FilterType['retention_reference']) => void
        loadMorePeople: () => void
        updatePeople: (people: any) => void
        clearPeople: () => void
        loadPeople: (rowIndex: number) => void
        loadPeopleSuccess: (people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload, payload?: number) => void
        loadPeopleFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: boolean
        loadingMore: boolean
    }
    events: {}
    key: string | number
    listeners: {
        setFilters: ((
            action: {
                type: 'set filters (scenes.retention.retentionTableLogic.*)'
                payload: {
                    filters: Partial<FilterType>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setRetentionReference: ((
            action: {
                type: 'set retention reference (scenes.retention.retentionTableLogic.*)'
                payload: {
                    retentionReference: 'total' | 'previous' | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadResultsSuccess: ((
            action: {
                type: 'load results success (scenes.retention.retentionTableLogic.*)'
                payload: {
                    insight: Partial<InsightModel>
                    payload?: {
                        refresh: any
                        queryId: string
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadMorePeople: ((
            action: {
                type: 'load more people (scenes.retention.retentionTableLogic.*)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'retention', 'retentionTableLogic', '*']
    pathString: 'scenes.retention.retentionTableLogic.*'
    props: InsightLogicProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: boolean
        loadingMore: boolean
    }
    reducers: {
        people: (
            state: RetentionTablePeoplePayload | RetentionTrendPeoplePayload,
            action: any,
            fullState: any
        ) => RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: (state: boolean, action: any, fullState: any) => boolean
        loadingMore: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: boolean
        loadingMore: boolean
    }
    selectors: {
        people: (state: any, props?: any) => RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: (state: any, props?: any) => boolean
        loadingMore: (state: any, props?: any) => boolean
        insight: (state: any, props?: any) => Partial<InsightModel>
        insightLoading: (state: any, props?: any) => boolean
        filters: (state: any, props?: any) => Partial<FilterType>
        actions: (state: any, props?: any) => ActionType[]
        aggregationLabel: (
            state: any,
            props?: any
        ) => (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        loadedFilters: (state: any, props?: any) => Partial<FilterType>
        results: (state: any, props?: any) => RetentionTablePayload[]
        trendSeries: (state: any, props?: any) => RetentionTrendPayload[]
        resultsLoading: (state: any, props?: any) => boolean
        actionsLookup: (state: any, props?: any) => any
        actionFilterTargetEntity: (state: any, props?: any) => { events: (Record<string, any> | undefined)[] }
        actionFilterReturningEntity: (state: any, props?: any) => { events: (Record<string, any> | undefined)[] }
        retentionReference: (state: any, props?: any) => 'total' | 'previous'
        aggregationTargetLabel: (
            state: any,
            props?: any
        ) => {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        people: RetentionTablePeoplePayload | RetentionTrendPeoplePayload
        peopleLoading: boolean
        loadingMore: boolean
        insight: Partial<InsightModel>
        insightLoading: boolean
        filters: Partial<FilterType>
        actions: ActionType[]
        aggregationLabel: (
            groupTypeIndex: number | null | undefined,
            deferToUserWording?: boolean
        ) => {
            singular: string
            plural: string
        }
        loadedFilters: Partial<FilterType>
        results: RetentionTablePayload[]
        trendSeries: RetentionTrendPayload[]
        resultsLoading: boolean
        actionsLookup: any
        actionFilterTargetEntity: { events: (Record<string, any> | undefined)[] }
        actionFilterReturningEntity: { events: (Record<string, any> | undefined)[] }
        retentionReference: 'total' | 'previous'
        aggregationTargetLabel: {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: number
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        loadedFilters: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => Partial<FilterType>
        results: (
            insight: Partial<import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').InsightModel>
        ) => RetentionTablePayload[]
        trendSeries: (
            results: RetentionTablePayload[],
            filters: Partial<FilterType>,
            retentionReference: 'total' | 'previous'
        ) => RetentionTrendPayload[]
        resultsLoading: (insightLoading: boolean) => boolean
        actionsLookup: (actions: ActionType[]) => any
        actionFilterTargetEntity: (filters: Partial<FilterType>) => { events: (Record<string, any> | undefined)[] }
        actionFilterReturningEntity: (filters: Partial<FilterType>) => { events: (Record<string, any> | undefined)[] }
        retentionReference: (filters: Partial<FilterType>) => 'total' | 'previous'
        aggregationTargetLabel: (
            filters: Partial<FilterType>,
            aggregationLabel: (
                groupTypeIndex: number | null | undefined,
                deferToUserWording?: boolean | undefined
            ) => {
                singular: string
                plural: string
            }
        ) => {
            singular: string
            plural: string
        }
        incompletenessOffsetFromEnd: (filters: Partial<FilterType>, trendSeries: RetentionTrendPayload[]) => number
    }
}
