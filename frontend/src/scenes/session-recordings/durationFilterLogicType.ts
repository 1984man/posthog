// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DurationFilterProps, TimeUnit } from './durationFilterLogic'
import type { PropertyOperator } from '../../types'

export interface durationFilterLogicType extends Logic {
    actionCreators: {
        setTimeValue: (timeValue: number | null) => {
            type: 'set time value (scenes.session-recordings.DurationFilterLogic.*)'
            payload: {
                timeValue: number | null
            }
        }
        setUnit: (unit: TimeUnit) => {
            type: 'set unit (scenes.session-recordings.DurationFilterLogic.*)'
            payload: {
                unit: TimeUnit
            }
        }
        setIsOpen: (isOpen: boolean) => {
            type: 'set is open (scenes.session-recordings.DurationFilterLogic.*)'
            payload: {
                isOpen: boolean
            }
        }
        setOperator: (operator: PropertyOperator) => {
            type: 'set operator (scenes.session-recordings.DurationFilterLogic.*)'
            payload: {
                operator: PropertyOperator
            }
        }
    }
    actionKeys: {
        'set time value (scenes.session-recordings.DurationFilterLogic.*)': 'setTimeValue'
        'set unit (scenes.session-recordings.DurationFilterLogic.*)': 'setUnit'
        'set is open (scenes.session-recordings.DurationFilterLogic.*)': 'setIsOpen'
        'set operator (scenes.session-recordings.DurationFilterLogic.*)': 'setOperator'
    }
    actionTypes: {
        setTimeValue: 'set time value (scenes.session-recordings.DurationFilterLogic.*)'
        setUnit: 'set unit (scenes.session-recordings.DurationFilterLogic.*)'
        setIsOpen: 'set is open (scenes.session-recordings.DurationFilterLogic.*)'
        setOperator: 'set operator (scenes.session-recordings.DurationFilterLogic.*)'
    }
    actions: {
        setTimeValue: (timeValue: number | null) => void
        setUnit: (unit: TimeUnit) => void
        setIsOpen: (isOpen: boolean) => void
        setOperator: (operator: PropertyOperator) => void
    }
    defaults: {
        unit: TimeUnit
        operator: PropertyOperator
        timeValue: number | null
        isOpen: boolean
    }
    events: {}
    key: string
    listeners: {
        setTimeValue: ((
            action: {
                type: 'set time value (scenes.session-recordings.DurationFilterLogic.*)'
                payload: {
                    timeValue: number | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setUnit: ((
            action: {
                type: 'set unit (scenes.session-recordings.DurationFilterLogic.*)'
                payload: {
                    unit: TimeUnit
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setOperator: ((
            action: {
                type: 'set operator (scenes.session-recordings.DurationFilterLogic.*)'
                payload: {
                    operator: PropertyOperator
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'DurationFilterLogic', '*']
    pathString: 'scenes.session-recordings.DurationFilterLogic.*'
    props: DurationFilterProps
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        unit: TimeUnit
        operator: PropertyOperator
        timeValue: number | null
        isOpen: boolean
    }
    reducers: {
        unit: (state: TimeUnit, action: any, fullState: any) => TimeUnit
        operator: (state: PropertyOperator, action: any, fullState: any) => PropertyOperator
        timeValue: (state: number | null, action: any, fullState: any) => number | null
        isOpen: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        unit: TimeUnit
        operator: PropertyOperator
        timeValue: number | null
        isOpen: boolean
    }
    selectors: {
        unit: (state: any, props?: any) => TimeUnit
        operator: (state: any, props?: any) => PropertyOperator
        timeValue: (state: any, props?: any) => number | null
        isOpen: (state: any, props?: any) => boolean
        durationString: (state: any, props?: any) => string
    }
    sharedListeners: {}
    values: {
        unit: TimeUnit
        operator: PropertyOperator
        timeValue: number | null
        isOpen: boolean
        durationString: string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        durationString: (operator: PropertyOperator, timeValue: number | null, unit: TimeUnit) => string
    }
}
