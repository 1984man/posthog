// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:15 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonType, PlayerPosition, SessionPlayerData } from '../../../types'

export interface metaLogicType extends Logic {
    actionCreators: {
        loadRecordingMetaSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
            }
        ) => {
            type: 'load recording meta success (scenes.session-recordings.player.metaLogic)'
            payload: {
                sessionPlayerData: SessionPlayerData
                payload?: {
                    sessionRecordingId: string | undefined
                }
            }
        }
    }
    actionKeys: {
        'load recording meta success (scenes.session-recordings.player.metaLogic)': 'loadRecordingMetaSuccess'
    }
    actionTypes: {
        loadRecordingMetaSuccess: 'load recording meta success (scenes.session-recordings.player.metaLogic)'
    }
    actions: {
        loadRecordingMetaSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
            }
        ) => void
    }
    defaults: {
        loading: boolean
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['scenes', 'session-recordings', 'player', 'metaLogic']
    pathString: 'scenes.session-recordings.player.metaLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        loading: boolean
    }
    reducers: {
        loading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        loading: boolean
    }
    selectors: {
        loading: (state: any, props?: any) => boolean
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        currentPlayerPosition: (state: any, props?: any) => PlayerPosition | null
        scale: (state: any, props?: any) => number
        sessionPerson: (state: any, props?: any) => Partial<PersonType>
        description: (state: any, props?: any) => string
        resolution: (state: any, props?: any) => { width: any; height: any } | null
        recordingStartTime: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        loading: boolean
        sessionPlayerData: SessionPlayerData
        currentPlayerPosition: PlayerPosition | null
        scale: number
        sessionPerson: Partial<PersonType>
        description: string
        resolution: { width: any; height: any } | null
        recordingStartTime: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sessionPerson: (
            sessionPlayerData: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SessionPlayerData
        ) => Partial<PersonType>
        description: (sessionPerson: Partial<PersonType>) => string
        resolution: (
            sessionPlayerData: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SessionPlayerData,
            currentPlayerPosition:
                | import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').PlayerPosition
                | null
        ) => { width: any; height: any } | null
        recordingStartTime: (
            sessionPlayerData: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SessionPlayerData
        ) => number
    }
}
