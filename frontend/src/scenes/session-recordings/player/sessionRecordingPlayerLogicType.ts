// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PlayerPosition, RecordingSegment, SessionPlayerData, SessionPlayerState, SessionRecordingId } from '../../../types'
import type { Player } from './sessionRecordingPlayerLogic'

export interface sessionRecordingPlayerLogicType extends Logic {
    actionCreators: {
        loadRecordingMetaSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
            }
        ) => {
            type: 'load recording meta success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                sessionPlayerData: SessionPlayerData
                payload?: {
                    sessionRecordingId: string | undefined
                }
            }
        }
        loadRecordingSnapshotsSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
                url: string | undefined
            }
        ) => {
            type: 'load recording snapshots success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                sessionPlayerData: SessionPlayerData
                payload?: {
                    sessionRecordingId: string | undefined
                    url: string | undefined
                }
            }
        }
        tryInitReplayer: () => {
            type: 'try init replayer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: boolean
        }
        setPlayer: (player: Player | null) => {
            type: 'set player (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                player: Player | null
            }
        }
        setPlay: () => {
            type: 'set play (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        setPause: () => {
            type: 'set pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        startBuffer: () => {
            type: 'start buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        endBuffer: () => {
            type: 'end buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        startScrub: () => {
            type: 'start scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        endScrub: () => {
            type: 'end scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        setSkipInactivitySetting: (skipInactivitySetting: boolean) => {
            type: 'set skip inactivity setting (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                skipInactivitySetting: boolean
            }
        }
        setSkippingInactivity: (isSkippingInactivity: boolean) => {
            type: 'set skipping inactivity (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                isSkippingInactivity: boolean
            }
        }
        syncPlayerSpeed: () => {
            type: 'sync player speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        setCurrentPlayerPosition: (playerPosition: PlayerPosition | null) => {
            type: 'set current player position (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                playerPosition: PlayerPosition | null
            }
        }
        setSpeed: (speed: number) => {
            type: 'set speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                speed: number
            }
        }
        setScale: (scale: number) => {
            type: 'set scale (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                scale: number
            }
        }
        togglePlayPause: () => {
            type: 'toggle play pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        seek: (
            playerPosition: PlayerPosition | null,
            forcePlay?: boolean
        ) => {
            type: 'seek (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                playerPosition: PlayerPosition | null
                forcePlay: boolean
            }
        }
        seekForward: () => {
            type: 'seek forward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        seekBackward: () => {
            type: 'seek backward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        resolvePlayerState: () => {
            type: 'resolve player state (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        updateAnimation: () => {
            type: 'update animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        stopAnimation: () => {
            type: 'stop animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        setCurrentSegment: (segment: RecordingSegment) => {
            type: 'set current segment (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                segment: RecordingSegment
            }
        }
        setRootFrame: (frame: HTMLDivElement) => {
            type: 'set root frame (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                frame: HTMLDivElement
            }
        }
        checkBufferingCompleted: () => {
            type: 'check buffering completed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
        initializePlayerFromStart: () => {
            type: 'initialize player from start (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
            payload: {
                value: true
            }
        }
    }
    actionKeys: {
        'load recording meta success (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'loadRecordingMetaSuccess'
        'load recording snapshots success (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'loadRecordingSnapshotsSuccess'
        'try init replayer (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'tryInitReplayer'
        'set player (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setPlayer'
        'set play (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setPlay'
        'set pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setPause'
        'start buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'startBuffer'
        'end buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'endBuffer'
        'start scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'startScrub'
        'end scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'endScrub'
        'set skip inactivity setting (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setSkipInactivitySetting'
        'set skipping inactivity (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setSkippingInactivity'
        'sync player speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'syncPlayerSpeed'
        'set current player position (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setCurrentPlayerPosition'
        'set speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setSpeed'
        'set scale (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setScale'
        'toggle play pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'togglePlayPause'
        'seek (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'seek'
        'seek forward (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'seekForward'
        'seek backward (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'seekBackward'
        'resolve player state (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'resolvePlayerState'
        'update animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'updateAnimation'
        'stop animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'stopAnimation'
        'set current segment (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setCurrentSegment'
        'set root frame (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'setRootFrame'
        'check buffering completed (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'checkBufferingCompleted'
        'initialize player from start (scenes.session-recordings.player.sessionRecordingPlayerLogic)': 'initializePlayerFromStart'
    }
    actionTypes: {
        loadRecordingMetaSuccess: 'load recording meta success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        loadRecordingSnapshotsSuccess: 'load recording snapshots success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        tryInitReplayer: 'try init replayer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setPlayer: 'set player (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setPlay: 'set play (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setPause: 'set pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        startBuffer: 'start buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        endBuffer: 'end buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        startScrub: 'start scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        endScrub: 'end scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setSkipInactivitySetting: 'set skip inactivity setting (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setSkippingInactivity: 'set skipping inactivity (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        syncPlayerSpeed: 'sync player speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setCurrentPlayerPosition: 'set current player position (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setSpeed: 'set speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setScale: 'set scale (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        togglePlayPause: 'toggle play pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        seek: 'seek (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        seekForward: 'seek forward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        seekBackward: 'seek backward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        resolvePlayerState: 'resolve player state (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        updateAnimation: 'update animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        stopAnimation: 'stop animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setCurrentSegment: 'set current segment (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        setRootFrame: 'set root frame (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        checkBufferingCompleted: 'check buffering completed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
        initializePlayerFromStart: 'initialize player from start (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
    }
    actions: {
        loadRecordingMetaSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
            }
        ) => void
        loadRecordingSnapshotsSuccess: (
            sessionPlayerData: SessionPlayerData,
            payload?: {
                sessionRecordingId: string | undefined
                url: string | undefined
            }
        ) => void
        tryInitReplayer: () => void
        setPlayer: (player: Player | null) => void
        setPlay: () => void
        setPause: () => void
        startBuffer: () => void
        endBuffer: () => void
        startScrub: () => void
        endScrub: () => void
        setSkipInactivitySetting: (skipInactivitySetting: boolean) => void
        setSkippingInactivity: (isSkippingInactivity: boolean) => void
        syncPlayerSpeed: () => void
        setCurrentPlayerPosition: (playerPosition: PlayerPosition | null) => void
        setSpeed: (speed: number) => void
        setScale: (scale: number) => void
        togglePlayPause: () => void
        seek: (playerPosition: PlayerPosition | null, forcePlay?: boolean) => void
        seekForward: () => void
        seekBackward: () => void
        resolvePlayerState: () => void
        updateAnimation: () => void
        stopAnimation: () => void
        setCurrentSegment: (segment: RecordingSegment) => void
        setRootFrame: (frame: HTMLDivElement) => void
        checkBufferingCompleted: () => void
        initializePlayerFromStart: () => void
    }
    defaults: {
        rootFrame: HTMLDivElement | null
        player: Player | null
        currentPlayerPosition: PlayerPosition | null
        currentSegment: RecordingSegment | null
        speed: number
        skipInactivitySetting: boolean
        isSkippingInactivity: boolean
        scale: number
        playingState: SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: boolean
        isScrubbing: boolean
        isSmallScreen: boolean
    }
    events: {
        beforeUnmount: () => void
    }
    key: undefined
    listeners: {
        setRootFrame: ((
            action: {
                type: 'set root frame (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    frame: HTMLDivElement
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        tryInitReplayer: ((
            action: {
                type: 'try init replayer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: boolean
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPlayer: ((
            action: {
                type: 'set player (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    player: Player | null
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setCurrentSegment: ((
            action: {
                type: 'set current segment (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    segment: RecordingSegment
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSkipInactivitySetting: ((
            action: {
                type: 'set skip inactivity setting (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    skipInactivitySetting: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSkippingInactivity: ((
            action: {
                type: 'set skipping inactivity (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    isSkippingInactivity: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        syncPlayerSpeed: ((
            action: {
                type: 'sync player speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        checkBufferingCompleted: ((
            action: {
                type: 'check buffering completed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        initializePlayerFromStart: ((
            action: {
                type: 'initialize player from start (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadRecordingMetaSuccess: ((
            action: {
                type: 'load recording meta success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    sessionPlayerData: SessionPlayerData
                    payload?: {
                        sessionRecordingId: string | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        loadRecordingSnapshotsSuccess: ((
            action: {
                type: 'load recording snapshots success (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    sessionPlayerData: SessionPlayerData
                    payload?: {
                        sessionRecordingId: string | undefined
                        url: string | undefined
                    }
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPlay: ((
            action: {
                type: 'set play (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setPause: ((
            action: {
                type: 'set pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        startBuffer: ((
            action: {
                type: 'start buffer (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        startScrub: ((
            action: {
                type: 'start scrub (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        setSpeed: ((
            action: {
                type: 'set speed (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    speed: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        seek: ((
            action: {
                type: 'seek (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    playerPosition: PlayerPosition | null
                    forcePlay: boolean
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        seekForward: ((
            action: {
                type: 'seek forward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        seekBackward: ((
            action: {
                type: 'seek backward (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        togglePlayPause: ((
            action: {
                type: 'toggle play pause (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateAnimation: ((
            action: {
                type: 'update animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        stopAnimation: ((
            action: {
                type: 'stop animation (scenes.session-recordings.player.sessionRecordingPlayerLogic)'
                payload: {
                    value: true
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'sessionRecordingPlayerLogic']
    pathString: 'scenes.session-recordings.player.sessionRecordingPlayerLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        rootFrame: HTMLDivElement | null
        player: Player | null
        currentPlayerPosition: PlayerPosition | null
        currentSegment: RecordingSegment | null
        speed: number
        skipInactivitySetting: boolean
        isSkippingInactivity: boolean
        scale: number
        playingState: SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: boolean
        isScrubbing: boolean
        isSmallScreen: boolean
    }
    reducers: {
        rootFrame: (state: HTMLDivElement | null, action: any, fullState: any) => HTMLDivElement | null
        player: (state: Player | null, action: any, fullState: any) => Player | null
        currentPlayerPosition: (state: PlayerPosition | null, action: any, fullState: any) => PlayerPosition | null
        currentSegment: (state: RecordingSegment | null, action: any, fullState: any) => RecordingSegment | null
        speed: (state: number, action: any, fullState: any) => number
        skipInactivitySetting: (state: boolean, action: any, fullState: any) => boolean
        isSkippingInactivity: (state: boolean, action: any, fullState: any) => boolean
        scale: (state: number, action: any, fullState: any) => number
        playingState: (
            state: SessionPlayerState.PLAY | SessionPlayerState.PAUSE,
            action: any,
            fullState: any
        ) => SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: (state: boolean, action: any, fullState: any) => boolean
        isScrubbing: (state: boolean, action: any, fullState: any) => boolean
        isSmallScreen: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        rootFrame: HTMLDivElement | null
        player: Player | null
        currentPlayerPosition: PlayerPosition | null
        currentSegment: RecordingSegment | null
        speed: number
        skipInactivitySetting: boolean
        isSkippingInactivity: boolean
        scale: number
        playingState: SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: boolean
        isScrubbing: boolean
        isSmallScreen: boolean
    }
    selectors: {
        rootFrame: (state: any, props?: any) => HTMLDivElement | null
        player: (state: any, props?: any) => Player | null
        currentPlayerPosition: (state: any, props?: any) => PlayerPosition | null
        currentSegment: (state: any, props?: any) => RecordingSegment | null
        speed: (state: any, props?: any) => number
        skipInactivitySetting: (state: any, props?: any) => boolean
        isSkippingInactivity: (state: any, props?: any) => boolean
        scale: (state: any, props?: any) => number
        playingState: (state: any, props?: any) => SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: (state: any, props?: any) => boolean
        isScrubbing: (state: any, props?: any) => boolean
        isSmallScreen: (state: any, props?: any) => boolean
        sessionRecordingId: (state: any, props?: any) => SessionRecordingId | null
        sessionPlayerData: (state: any, props?: any) => SessionPlayerData
        currentPlayerState: (
            state: any,
            props?: any
        ) => SessionPlayerState.BUFFER | SessionPlayerState.PLAY | SessionPlayerState.PAUSE | SessionPlayerState.SKIP
        currentPlayerTime: (state: any, props?: any) => number | null
        jumpTimeMs: (state: any, props?: any) => number
    }
    sharedListeners: {}
    values: {
        rootFrame: HTMLDivElement | null
        player: Player | null
        currentPlayerPosition: PlayerPosition | null
        currentSegment: RecordingSegment | null
        speed: number
        skipInactivitySetting: boolean
        isSkippingInactivity: boolean
        scale: number
        playingState: SessionPlayerState.PLAY | SessionPlayerState.PAUSE
        isBuffering: boolean
        isScrubbing: boolean
        isSmallScreen: boolean
        sessionRecordingId: SessionRecordingId | null
        sessionPlayerData: SessionPlayerData
        currentPlayerState:
            | SessionPlayerState.BUFFER
            | SessionPlayerState.PLAY
            | SessionPlayerState.PAUSE
            | SessionPlayerState.SKIP
        currentPlayerTime: number | null
        jumpTimeMs: number
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        currentPlayerState: (
            playingState: SessionPlayerState.PLAY | SessionPlayerState.PAUSE,
            isBuffering: boolean,
            isScrubbing: boolean,
            isSkippingInactivity: boolean
        ) => SessionPlayerState.BUFFER | SessionPlayerState.PLAY | SessionPlayerState.PAUSE | SessionPlayerState.SKIP
        currentPlayerTime: (
            currentPlayerPosition: PlayerPosition | null,
            sessionPlayerData: import('/Users/marius/Projects/PostHog/posthog/frontend/src/types').SessionPlayerData
        ) => number | null
        jumpTimeMs: (speed: number) => number
    }
}
