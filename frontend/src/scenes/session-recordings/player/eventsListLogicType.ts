// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:09 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PlayerPosition, RecordingEventType, RecordingEventsFilters, SessionRecordingEvents } from '../../../types'
import type { List, RenderedRows } from '../../../../../node_modules/@types/react-virtualized/dist/es/List.d'

export interface eventsListLogicType extends Logic {
    actionCreators: {
        setFilters: (filters: Partial<RecordingEventsFilters>) => {
            type: 'set filters (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                filters: Partial<RecordingEventsFilters>
            }
        }
        loadEventsSuccess: (
            sessionEventsData:
                | SessionRecordingEvents
                | {
                      next: any
                      events: RecordingEventType[]
                  }
                | null,
            payload?: {
                url: string | undefined
            }
        ) => {
            type: 'load events success (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                sessionEventsData:
                    | SessionRecordingEvents
                    | {
                          next: any
                          events: RecordingEventType[]
                      }
                    | null
                payload?: {
                    url: string | undefined
                }
            }
        }
        seek: (
            playerPosition: PlayerPosition | null,
            forcePlay?: boolean
        ) => {
            type: 'seek (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                playerPosition: PlayerPosition | null
                forcePlay: boolean
            }
        }
        setLocalFilters: (filters: Partial<RecordingEventsFilters>) => {
            type: 'set local filters (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                filters: Partial<RecordingEventsFilters>
            }
        }
        setRenderedRows: (renderMeta: RenderedRows) => {
            type: 'set rendered rows (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                renderMeta: RenderedRows
            }
        }
        setList: (list: List) => {
            type: 'set list (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                list: List
            }
        }
        enablePositionFinder: () => {
            type: 'enable position finder (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                value: true
            }
        }
        disablePositionFinder: () => {
            type: 'disable position finder (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                value: true
            }
        }
        scrollTo: (rowIndex?: number) => {
            type: 'scroll to (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                rowIndex: number | undefined
            }
        }
        handleEventClick: (playerPosition: PlayerPosition) => {
            type: 'handle event click (scenes.session-recordings.player.eventsListLogic)'
            payload: {
                playerPosition: PlayerPosition
            }
        }
    }
    actionKeys: {
        'set filters (scenes.session-recordings.player.eventsListLogic)': 'setFilters'
        'load events success (scenes.session-recordings.player.eventsListLogic)': 'loadEventsSuccess'
        'seek (scenes.session-recordings.player.eventsListLogic)': 'seek'
        'set local filters (scenes.session-recordings.player.eventsListLogic)': 'setLocalFilters'
        'set rendered rows (scenes.session-recordings.player.eventsListLogic)': 'setRenderedRows'
        'set list (scenes.session-recordings.player.eventsListLogic)': 'setList'
        'enable position finder (scenes.session-recordings.player.eventsListLogic)': 'enablePositionFinder'
        'disable position finder (scenes.session-recordings.player.eventsListLogic)': 'disablePositionFinder'
        'scroll to (scenes.session-recordings.player.eventsListLogic)': 'scrollTo'
        'handle event click (scenes.session-recordings.player.eventsListLogic)': 'handleEventClick'
    }
    actionTypes: {
        setFilters: 'set filters (scenes.session-recordings.player.eventsListLogic)'
        loadEventsSuccess: 'load events success (scenes.session-recordings.player.eventsListLogic)'
        seek: 'seek (scenes.session-recordings.player.eventsListLogic)'
        setLocalFilters: 'set local filters (scenes.session-recordings.player.eventsListLogic)'
        setRenderedRows: 'set rendered rows (scenes.session-recordings.player.eventsListLogic)'
        setList: 'set list (scenes.session-recordings.player.eventsListLogic)'
        enablePositionFinder: 'enable position finder (scenes.session-recordings.player.eventsListLogic)'
        disablePositionFinder: 'disable position finder (scenes.session-recordings.player.eventsListLogic)'
        scrollTo: 'scroll to (scenes.session-recordings.player.eventsListLogic)'
        handleEventClick: 'handle event click (scenes.session-recordings.player.eventsListLogic)'
    }
    actions: {
        setFilters: (filters: Partial<RecordingEventsFilters>) => void
        loadEventsSuccess: (
            sessionEventsData:
                | SessionRecordingEvents
                | {
                      next: any
                      events: RecordingEventType[]
                  }
                | null,
            payload?: {
                url: string | undefined
            }
        ) => void
        seek: (playerPosition: PlayerPosition | null, forcePlay?: boolean) => void
        setLocalFilters: (filters: Partial<RecordingEventsFilters>) => void
        setRenderedRows: (renderMeta: RenderedRows) => void
        setList: (list: List) => void
        enablePositionFinder: () => void
        disablePositionFinder: () => void
        scrollTo: (rowIndex?: number) => void
        handleEventClick: (playerPosition: PlayerPosition) => void
    }
    defaults: {
        localFilters: Partial<RecordingEventsFilters>
        renderedRows: RenderedRows
        list: List | null
        shouldHidePositionFinder: boolean
    }
    events: {}
    key: undefined
    listeners: {
        setLocalFilters: ((
            action: {
                type: 'set local filters (scenes.session-recordings.player.eventsListLogic)'
                payload: {
                    filters: Partial<RecordingEventsFilters>
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        scrollTo: ((
            action: {
                type: 'scroll to (scenes.session-recordings.player.eventsListLogic)'
                payload: {
                    rowIndex: number | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        handleEventClick: ((
            action: {
                type: 'handle event click (scenes.session-recordings.player.eventsListLogic)'
                payload: {
                    playerPosition: PlayerPosition
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['scenes', 'session-recordings', 'player', 'eventsListLogic']
    pathString: 'scenes.session-recordings.player.eventsListLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        localFilters: Partial<RecordingEventsFilters>
        renderedRows: RenderedRows
        list: List | null
        shouldHidePositionFinder: boolean
    }
    reducers: {
        localFilters: (
            state: Partial<RecordingEventsFilters>,
            action: any,
            fullState: any
        ) => Partial<RecordingEventsFilters>
        renderedRows: (state: RenderedRows, action: any, fullState: any) => RenderedRows
        list: (state: List | null, action: any, fullState: any) => List | null
        shouldHidePositionFinder: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        localFilters: Partial<RecordingEventsFilters>
        renderedRows: RenderedRows
        list: List | null
        shouldHidePositionFinder: boolean
    }
    selectors: {
        localFilters: (state: any, props?: any) => Partial<RecordingEventsFilters>
        renderedRows: (state: any, props?: any) => RenderedRows
        list: (state: any, props?: any) => List | null
        shouldHidePositionFinder: (state: any, props?: any) => boolean
        sessionEventsDataLoading: (state: any, props?: any) => boolean
        eventsToShow: (state: any, props?: any) => RecordingEventType[]
        currentPlayerTime: (state: any, props?: any) => number | null
        listEvents: (state: any, props?: any) => RecordingEventType[]
        currentEventsTimeRange: (state: any, props?: any) => { start: number; end: number }
        isEventCurrent: (state: any, props?: any) => (index: number) => boolean
        currentEventsIndices: (state: any, props?: any) => { startIndex: number; stopIndex: number }
        currentEventsBoxSizeAndPosition: (state: any, props?: any) => { top: any; height: number }
        isRowIndexRendered: (state: any, props?: any) => (index: number) => boolean
        showPositionFinder: (state: any, props?: any) => boolean
        isDirectionUp: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        localFilters: Partial<RecordingEventsFilters>
        renderedRows: RenderedRows
        list: List | null
        shouldHidePositionFinder: boolean
        sessionEventsDataLoading: boolean
        eventsToShow: RecordingEventType[]
        currentPlayerTime: number | null
        listEvents: RecordingEventType[]
        currentEventsTimeRange: { start: number; end: number }
        isEventCurrent: (index: number) => boolean
        currentEventsIndices: { startIndex: number; stopIndex: number }
        currentEventsBoxSizeAndPosition: { top: any; height: number }
        isRowIndexRendered: (index: number) => boolean
        showPositionFinder: boolean
        isDirectionUp: boolean
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        listEvents: (eventsToShow: RecordingEventType[]) => RecordingEventType[]
        currentEventsTimeRange: (
            listEvents: RecordingEventType[],
            currentPlayerTime: number | null
        ) => { start: number; end: number }
        isEventCurrent: (
            currentEventsTimeRange: {
                start: number
                end: number
            },
            listEvents: RecordingEventType[]
        ) => (index: number) => boolean
        currentEventsIndices: (
            listEvents: RecordingEventType[],
            isEventCurrent: (index: number) => boolean
        ) => { startIndex: number; stopIndex: number }
        currentEventsBoxSizeAndPosition: (
            currentEventsIndices: {
                startIndex: number
                stopIndex: number
            },
            list: List | null
        ) => { top: any; height: number }
        isRowIndexRendered: (renderedRows: RenderedRows) => (index: number) => boolean
        showPositionFinder: (
            renderedRows: RenderedRows,
            currentEventsIndices: {
                startIndex: number
                stopIndex: number
            },
            shouldHidePositionFinder: boolean
        ) => boolean
        isDirectionUp: (
            renderedRows: RenderedRows,
            currentEventsIndices: {
                startIndex: number
                stopIndex: number
            }
        ) => boolean
    }
}
