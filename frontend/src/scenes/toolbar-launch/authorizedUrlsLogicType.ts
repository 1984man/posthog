// Generated by kea-typegen on Thu, 09 Jun 2022 19:50:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { TeamType } from '../../types'
import type { KeyedAppUrl } from './authorizedUrlsLogic'

export interface authorizedUrlsLogicType extends Logic {
    actionCreators: {
        updateCurrentTeam: (payload: Partial<TeamType>) => {
            type: 'update current team (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: Partial<TeamType>
        }
        setAppUrls: (appUrls: string[]) => {
            type: 'set app urls (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                appUrls: string[]
            }
        }
        addUrl: (
            url: string,
            launch?: boolean
        ) => {
            type: 'add url (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                url: string
                launch: boolean | undefined
            }
        }
        newUrl: () => {
            type: 'new url (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                value: true
            }
        }
        removeUrl: (index: number) => {
            type: 'remove url (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                index: number
            }
        }
        updateUrl: (
            index: number,
            url: string
        ) => {
            type: 'update url (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                index: number
                url: string
            }
        }
        launchAtUrl: (url: string) => {
            type: 'launch at url (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                url: string
            }
        }
        setSearchTerm: (term: string) => {
            type: 'set search term (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                term: string
            }
        }
        setEditUrlIndex: (originalIndex: number | null) => {
            type: 'set edit url index (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                originalIndex: number | null
            }
        }
        loadSuggestions: () => {
            type: 'load suggestions (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: any
        }
        loadSuggestionsSuccess: (
            suggestions: (string | number | undefined)[],
            payload?: any
        ) => {
            type: 'load suggestions success (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                suggestions: (string | number | undefined)[]
                payload?: any
            }
        }
        loadSuggestionsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load suggestions failure (lib.components.AppEditorLink.appUrlsLogic.*)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'update current team (lib.components.AppEditorLink.appUrlsLogic.*)': 'updateCurrentTeam'
        'set app urls (lib.components.AppEditorLink.appUrlsLogic.*)': 'setAppUrls'
        'add url (lib.components.AppEditorLink.appUrlsLogic.*)': 'addUrl'
        'new url (lib.components.AppEditorLink.appUrlsLogic.*)': 'newUrl'
        'remove url (lib.components.AppEditorLink.appUrlsLogic.*)': 'removeUrl'
        'update url (lib.components.AppEditorLink.appUrlsLogic.*)': 'updateUrl'
        'launch at url (lib.components.AppEditorLink.appUrlsLogic.*)': 'launchAtUrl'
        'set search term (lib.components.AppEditorLink.appUrlsLogic.*)': 'setSearchTerm'
        'set edit url index (lib.components.AppEditorLink.appUrlsLogic.*)': 'setEditUrlIndex'
        'load suggestions (lib.components.AppEditorLink.appUrlsLogic.*)': 'loadSuggestions'
        'load suggestions success (lib.components.AppEditorLink.appUrlsLogic.*)': 'loadSuggestionsSuccess'
        'load suggestions failure (lib.components.AppEditorLink.appUrlsLogic.*)': 'loadSuggestionsFailure'
    }
    actionTypes: {
        updateCurrentTeam: 'update current team (lib.components.AppEditorLink.appUrlsLogic.*)'
        setAppUrls: 'set app urls (lib.components.AppEditorLink.appUrlsLogic.*)'
        addUrl: 'add url (lib.components.AppEditorLink.appUrlsLogic.*)'
        newUrl: 'new url (lib.components.AppEditorLink.appUrlsLogic.*)'
        removeUrl: 'remove url (lib.components.AppEditorLink.appUrlsLogic.*)'
        updateUrl: 'update url (lib.components.AppEditorLink.appUrlsLogic.*)'
        launchAtUrl: 'launch at url (lib.components.AppEditorLink.appUrlsLogic.*)'
        setSearchTerm: 'set search term (lib.components.AppEditorLink.appUrlsLogic.*)'
        setEditUrlIndex: 'set edit url index (lib.components.AppEditorLink.appUrlsLogic.*)'
        loadSuggestions: 'load suggestions (lib.components.AppEditorLink.appUrlsLogic.*)'
        loadSuggestionsSuccess: 'load suggestions success (lib.components.AppEditorLink.appUrlsLogic.*)'
        loadSuggestionsFailure: 'load suggestions failure (lib.components.AppEditorLink.appUrlsLogic.*)'
    }
    actions: {
        updateCurrentTeam: (payload: Partial<TeamType>) => void
        setAppUrls: (appUrls: string[]) => void
        addUrl: (url: string, launch?: boolean) => void
        newUrl: () => void
        removeUrl: (index: number) => void
        updateUrl: (index: number, url: string) => void
        launchAtUrl: (url: string) => void
        setSearchTerm: (term: string) => void
        setEditUrlIndex: (originalIndex: number | null) => void
        loadSuggestions: () => void
        loadSuggestionsSuccess: (suggestions: (string | number | undefined)[], payload?: any) => void
        loadSuggestionsFailure: (error: string, errorObject?: any) => void
    }
    defaults: {
        suggestions: any[]
        suggestionsLoading: boolean
        appUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    events: {
        afterMount: () => void
    }
    key: string
    listeners: {
        addUrl: ((
            action: {
                type: 'add url (lib.components.AppEditorLink.appUrlsLogic.*)'
                payload: {
                    url: string
                    launch: boolean | undefined
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        removeUrl: ((
            action: {
                type: 'remove url (lib.components.AppEditorLink.appUrlsLogic.*)'
                payload: {
                    index: number
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        updateUrl: ((
            action: {
                type: 'update url (lib.components.AppEditorLink.appUrlsLogic.*)'
                payload: {
                    index: number
                    url: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        'load current team success (scenes.teamLogic)': ((
            action: {
                type: 'load current team success (scenes.teamLogic)'
                payload: {
                    currentTeam: TeamType | null
                    payload?: any
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
        launchAtUrl: ((
            action: {
                type: 'launch at url (lib.components.AppEditorLink.appUrlsLogic.*)'
                payload: {
                    url: string
                }
            },
            previousState: any
        ) => void | Promise<void>)[]
    }
    path: ['lib', 'components', 'AppEditorLink', 'appUrlsLogic', '*']
    pathString: 'lib.components.AppEditorLink.appUrlsLogic.*'
    props: {
        actionId?: number
        pageKey?: string
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        suggestions: any[]
        suggestionsLoading: boolean
        appUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    reducers: {
        suggestions: (state: any[], action: any, fullState: any) => any[]
        suggestionsLoading: (state: boolean, action: any, fullState: any) => boolean
        appUrls: (state: string[], action: any, fullState: any) => string[]
        searchTerm: (state: string, action: any, fullState: any) => string
        editUrlIndex: (state: number | null, action: any, fullState: any) => number | null
    }
    selector: (state: any) => {
        suggestions: any[]
        suggestionsLoading: boolean
        appUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
    }
    selectors: {
        suggestions: (state: any, props?: any) => any[]
        suggestionsLoading: (state: any, props?: any) => boolean
        appUrls: (state: any, props?: any) => string[]
        searchTerm: (state: any, props?: any) => string
        editUrlIndex: (state: any, props?: any) => number | null
        currentTeam: (state: any, props?: any) => TeamType | null
        currentTeamId: (state: any, props?: any) => number | null
        appUrlsKeyed: (state: any, props?: any) => KeyedAppUrl[]
        launchUrl: (state: any, props?: any) => (url: string) => string
    }
    sharedListeners: {
        saveAppUrls: (
            payload: any,
            breakpoint: BreakPointFunction,
            action: {
                type: string
                payload: any
            },
            previousState: any
        ) => void | Promise<void>
    }
    values: {
        suggestions: any[]
        suggestionsLoading: boolean
        appUrls: string[]
        searchTerm: string
        editUrlIndex: number | null
        currentTeam: TeamType | null
        currentTeamId: number | null
        appUrlsKeyed: KeyedAppUrl[]
        launchUrl: (url: string) => string
    }
    _isKea: true
    _isKeaWithKey: true
    __keaTypeGenInternalSelectorTypes: {
        appUrlsKeyed: (appUrls: string[], suggestions: any[], searchTerm: string) => KeyedAppUrl[]
    }
    __keaTypeGenInternalReducerActions: {
        'load current team success (scenes.teamLogic)': (
            currentTeam: TeamType | null,
            payload?: any
        ) => {
            type: 'load current team success (scenes.teamLogic)'
            payload: {
                currentTeam: TeamType | null
                payload?: any
            }
        }
    }
}
