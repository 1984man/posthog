name: Docker

on:
    push:
        branches:
            - master
            - main
    pull_request:

jobs:
    build-push:
        name: Build Docker images and push them
        if: github.repository == 'PostHog/posthog'
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout default branch
              uses: actions/checkout@v2

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Update git sha
              run: echo "GIT_SHA = '${GITHUB_SHA}'" >posthog/gitsha.py

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Docker image metadata
              id: meta
              uses: docker/metadata-action@v3
              with:
                  flavor: latest=auto
                  images: ${{ steps.login-ecr.outputs.registry }}/posthog/posthog
                  tags: |
                      type=ref,event=pr

            # We also want to use cache-from when building, but we want to also
            # include the master tag so we get the master branch image as well.
            # This creates a scope similar to the github cache action scoping
            - name: Docker cache-from/cache-to metadata
              id: meta-for-cache
              uses: docker/metadata-action@v3
              with:
                  images: ${{ steps.login-ecr.outputs.registry }}/posthog/posthog
                  tags: |
                      type=ref,event=pr
                      type=raw,value=master

            - name: Build production image
              id: docker-latest
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true
                  platforms: x86_64
                  # Cache from this branch, or master
                  # TODO: do not use cache if we're building production image,
                  # to ensure we get e.g. security patches
                  cache-from: ${{ steps.meta-for-cache.outputs.tags }}
                  # NOTE: we use inline as suggested here:
                  # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#inline-cache
                  # It notes that it doesn't support mode=max, but we're not
                  # removing any layers, soooo, maybe it's fine.
                  cache-to: type=inline
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    # TODO: handle dockerhub publishing
    # dockerhub:
    #     # If we're on master branch, also push up to dockerhub
    #     name: Push image to DockerHub
    #     if: github.repository == 'PostHog/posthog' && github.ref == 'refs/heads/master'
    #     steps:
    #         - name: Login to DockerHub
    #           if: github.repository == 'PostHog/posthog'
    #           uses: docker/login-action@v1
    #           with:
    #               username: ${{ secrets.DOCKERHUB_USERNAME }}
    #               password: ${{ secrets.DOCKERHUB_TOKEN }}

    #         - name: Build production image
    #           id: docker-latest
    #           if: github.repository == 'PostHog/posthog'
    #           uses: docker/build-push-action@v2
    #           with:
    #               context: .
    #               push: false
    #               tags: posthog/posthog:latest

    #         - name: Image digests
    #           if: github.repository == 'PostHog/posthog'
    #           run: |
    #               echo "Pushed latest: ${{ steps.docker-latest.outputs.digest }}"
    #               echo "Pushed dev: ${{ steps.docker-dev.outputs.digest }}"
